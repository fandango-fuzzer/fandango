
// Generated from language/FandangoParser.g4 by ANTLR 4.13.2


#include "FandangoParserVisitor.h"

#include "FandangoParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct FandangoParserStaticData final {
  FandangoParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  FandangoParserStaticData(const FandangoParserStaticData&) = delete;
  FandangoParserStaticData(FandangoParserStaticData&&) = delete;
  FandangoParserStaticData& operator=(const FandangoParserStaticData&) = delete;
  FandangoParserStaticData& operator=(FandangoParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag fandangoparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<FandangoParserStaticData> fandangoparserParserStaticData = nullptr;

void fandangoparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (fandangoparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(fandangoparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<FandangoParserStaticData>(
    std::vector<std::string>{
      "fandango", "program", "statement", "production", "alternative", "concatenation", 
      "operator", "kleene", "plus", "option", "repeat", "symbol", "nonterminal_right", 
      "nonterminal", "generator_call", "char_set", "constraint", "implies", 
      "implies_in_line", "quantifier", "quantifier_in_line", "formula_disjunction", 
      "formula_conjunction", "formula_atom", "formula_comparison", "expr", 
      "selector_length", "star_selection_or_dot_selection", "star_selection", 
      "dot_selection", "selection", "base_selection", "rs_pairs", "rs_pair", 
      "rs_slices", "rs_slice", "python", "python_tag", "python_file", "interactive", 
      "eval", "func_type", "statements", "stmt", "statement_newline", "simple_stmts", 
      "simple_stmt", "compound_stmt", "assignment", "annotated_rhs", "augassign", 
      "return_stmt", "raise_stmt", "global_stmt", "nonlocal_stmt", "del_stmt", 
      "yield_stmt", "assert_stmt", "import_stmt", "import_name", "import_from", 
      "import_from_targets", "import_from_as_names", "import_from_as_name", 
      "dotted_as_names", "dotted_as_name", "dotted_name", "block", "decorators", 
      "class_def", "class_def_raw", "function_def", "function_def_raw", 
      "params", "parameters", "slash_no_default", "slash_with_default", 
      "star_etc", "kwds", "param_no_default", "param_no_default_star_annotation", 
      "param_with_default", "param_maybe_default", "param", "param_star_annotation", 
      "annotation", "star_annotation", "default", "if_stmt", "elif_stmt", 
      "else_block", "while_stmt", "for_stmt", "with_stmt", "with_item", 
      "try_stmt", "except_block", "except_star_block", "finally_block", 
      "match_stmt", "subject_expr", "case_block", "guard", "patterns", "pattern", 
      "as_pattern", "or_pattern", "closed_pattern", "literal_pattern", "literal_expr", 
      "complex_number", "signed_number", "signed_real_number", "real_number", 
      "imaginary_number", "capture_pattern", "pattern_capture_target", "wildcard_pattern", 
      "value_pattern", "attr", "name_or_attr", "group_pattern", "sequence_pattern", 
      "open_sequence_pattern", "maybe_sequence_pattern", "maybe_star_pattern", 
      "star_pattern", "mapping_pattern", "items_pattern", "key_value_pattern", 
      "double_star_pattern", "class_pattern", "positional_patterns", "keyword_patterns", 
      "keyword_pattern", "type_alias", "type_params", "type_param_seq", 
      "type_param", "type_param_bound", "expressions", "expression", "yield_expr", 
      "star_expressions", "star_expression", "star_named_expressions", "star_named_expression", 
      "assignment_expression", "named_expression", "disjunction", "conjunction", 
      "inversion", "comparison", "compare_op_bitwise_or_pair", "eq_bitwise_or", 
      "noteq_bitwise_or", "lte_bitwise_or", "lt_bitwise_or", "gte_bitwise_or", 
      "gt_bitwise_or", "notin_bitwise_or", "in_bitwise_or", "isnot_bitwise_or", 
      "is_bitwise_or", "bitwise_or", "bitwise_xor", "bitwise_and", "shift_expr", 
      "sum", "term", "factor", "power", "await_primary", "primary", "slices", 
      "slice", "atom", "group", "lambdef", "lambda_params", "lambda_parameters", 
      "lambda_slash_no_default", "lambda_slash_with_default", "lambda_star_etc", 
      "lambda_kwds", "lambda_param_no_default", "lambda_param_with_default", 
      "lambda_param_maybe_default", "lambda_param", "fstring_middle_no_quote", 
      "fstring_middle_no_single_quote", "fstring_middle_breaks_no_triple_quote", 
      "fstring_middle_breaks_no_triple_single_quote", "fstring_any_no_quote", 
      "fstring_any_no_single_quote", "fstring_middle", "fstring_any_breaks_no_triple_quote", 
      "fstring_any_breaks_no_triple_single_quote", "fstring_any", "fstring_replacement_field", 
      "fstring_conversion", "fstring_full_format_spec", "fstring_format_spec", 
      "fstring", "string", "strings", "list", "tuple", "set", "dict", "double_starred_kvpairs", 
      "double_starred_kvpair", "kvpair", "for_if_clauses", "for_if_clause", 
      "listcomp", "setcomp", "genexp", "dictcomp", "arguments", "args", 
      "arg", "kwargs", "starred_expression", "kwarg_or_starred", "kwarg_or_double_starred", 
      "star_targets", "star_targets_list_seq", "star_targets_tuple_seq", 
      "star_target", "target_with_star_atom", "star_atom", "single_target", 
      "single_subscript_attribute_target", "t_primary", "del_targets", "del_target", 
      "del_t_atom", "type_expressions", "func_type_comment", "identifier"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "'<py>'", "'</py>'", "'and'", 
      "'as'", "'assert'", "'async'", "'await'", "'break'", "'case'", "'class'", 
      "'continue'", "'def'", "'del'", "'elif'", "'else'", "'except'", "'False'", 
      "'finally'", "'for'", "'from'", "'global'", "'if'", "'import'", "'in'", 
      "'is'", "'lambda'", "'match'", "'None'", "'nonlocal'", "'not'", "'or'", 
      "'pass'", "'raise'", "'return'", "'True'", "'try'", "'type'", "'while'", 
      "'where'", "'with'", "'yield'", "'forall'", "'exists'", "'maximizing'", 
      "'minimizing'", "'any'", "'all'", "'len'", "", "", "'\"\"\"'", "'''''", 
      "'\"'", "'''", "", "", "", "", "", "", "", "'::='", "'\\u003F'", "'\\'", 
      "'...'", "'..'", "'.'", "'*'", "'('", "')'", "','", "':'", "';'", 
      "'**'", "'='", "'['", "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'", 
      "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", "'}'", "'<'", "'>'", 
      "'=='", "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", 
      "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", 
      "'**='", "'//='", "':='", "'!'"
    },
    std::vector<std::string>{
      "", "INDENT", "DEDENT", "FSTRING_START_QUOTE", "FSTRING_START_SINGLE_QUOTE", 
      "FSTRING_START_TRIPLE_QUOTE", "FSTRING_START_TRIPLE_SINGLE_QUOTE", 
      "STRING", "NUMBER", "INTEGER", "PYTHON_START", "PYTHON_END", "AND", 
      "AS", "ASSERT", "ASYNC", "AWAIT", "BREAK", "CASE", "CLASS", "CONTINUE", 
      "DEF", "DEL", "ELIF", "ELSE", "EXCEPT", "FALSE", "FINALLY", "FOR", 
      "FROM", "GLOBAL", "IF", "IMPORT", "IN", "IS", "LAMBDA", "MATCH", "NONE", 
      "NONLOCAL", "NOT", "OR", "PASS", "RAISE", "RETURN", "TRUE", "TRY", 
      "TYPE", "WHILE", "WHERE", "WITH", "YIELD", "FORALL", "EXISTS", "MAXIMIZING", 
      "MINIMIZING", "ANY", "ALL", "LEN", "NAME", "STRING_LITERAL", "FSTRING_END_TRIPLE_QUOTE", 
      "FSTRING_END_TRIPLE_SINGLE_QUOTE", "FSTRING_END_QUOTE", "FSTRING_END_SINGLE_QUOTE", 
      "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", 
      "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", "GRAMMAR_ASSIGN", "QUESTION", 
      "BACKSLASH", "ELLIPSIS", "DOTDOT", "DOT", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
      "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", 
      "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", 
      "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", "LESS_THAN", 
      "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", 
      "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", 
      "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", 
      "EXPR_ASSIGN", "EXCL", "NEWLINE", "SKIP_", "UNKNOWN_CHAR", "UNDERSCORE"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,127,3348,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,1,0,1,0,1,0,1,1,
  	5,1,487,8,1,10,1,12,1,490,9,1,1,1,1,1,5,1,494,8,1,10,1,12,1,497,9,1,5,
  	1,499,8,1,10,1,12,1,502,9,1,1,2,1,2,1,2,3,2,507,8,2,1,3,5,3,510,8,3,10,
  	3,12,3,513,9,3,1,3,1,3,1,3,1,3,1,3,3,3,520,8,3,1,3,1,3,4,3,524,8,3,11,
  	3,12,3,525,1,3,3,3,529,8,3,1,3,5,3,532,8,3,10,3,12,3,535,9,3,1,3,5,3,
  	538,8,3,10,3,12,3,541,9,3,1,3,1,3,1,3,1,3,1,3,3,3,548,8,3,1,3,1,3,4,3,
  	552,8,3,11,3,12,3,553,1,3,3,3,557,8,3,1,3,5,3,560,8,3,10,3,12,3,563,9,
  	3,1,3,5,3,566,8,3,10,3,12,3,569,9,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,577,8,
  	3,1,3,1,3,4,3,581,8,3,11,3,12,3,582,1,3,3,3,586,8,3,1,3,5,3,589,8,3,10,
  	3,12,3,592,9,3,3,3,594,8,3,1,4,1,4,1,4,5,4,599,8,4,10,4,12,4,602,9,4,
  	1,5,1,5,5,5,606,8,5,10,5,12,5,609,9,5,1,6,1,6,1,6,1,6,1,6,3,6,616,8,6,
  	1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
  	1,10,3,10,635,8,10,1,10,1,10,3,10,639,8,10,1,10,1,10,3,10,643,8,10,1,
  	11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,654,8,11,1,12,1,12,1,
  	12,1,12,3,12,660,8,12,1,12,1,12,1,12,3,12,665,8,12,1,12,1,12,1,12,1,13,
  	1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,3,14,690,8,14,1,14,5,14,693,8,14,10,14,12,14,
  	696,9,14,1,15,1,15,3,15,700,8,15,1,15,1,15,1,15,1,16,5,16,706,8,16,10,
  	16,12,16,709,9,16,1,16,1,16,1,16,5,16,714,8,16,10,16,12,16,717,9,16,1,
  	16,5,16,720,8,16,10,16,12,16,723,9,16,1,16,1,16,1,16,1,16,4,16,729,8,
  	16,11,16,12,16,730,1,16,3,16,734,8,16,1,16,5,16,737,8,16,10,16,12,16,
  	740,9,16,1,16,5,16,743,8,16,10,16,12,16,746,9,16,1,16,1,16,1,16,1,16,
  	4,16,752,8,16,11,16,12,16,753,1,16,3,16,757,8,16,1,16,5,16,760,8,16,10,
  	16,12,16,763,9,16,1,16,1,16,1,16,3,16,768,8,16,1,17,1,17,1,17,1,17,1,
  	17,1,17,3,17,776,8,17,1,18,1,18,1,18,1,18,1,18,3,18,783,8,18,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,796,8,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,809,8,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,3,19,817,8,19,1,19,1,19,1,19,1,19,1,19,4,19,824,8,
  	19,11,19,12,19,825,1,19,3,19,829,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
  	19,3,19,838,8,19,1,19,1,19,1,19,1,19,1,19,1,19,4,19,846,8,19,11,19,12,
  	19,847,1,19,3,19,851,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,860,
  	8,19,1,19,1,19,1,19,1,19,1,19,1,19,4,19,868,8,19,11,19,12,19,869,1,19,
  	3,19,873,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,882,8,19,1,19,1,
  	19,1,19,1,19,1,19,1,19,4,19,890,8,19,11,19,12,19,891,1,19,3,19,895,8,
  	19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,903,8,19,1,19,1,19,1,19,1,19,1,
  	19,4,19,910,8,19,11,19,12,19,911,1,19,3,19,915,8,19,1,19,1,19,1,19,1,
  	19,1,19,1,19,1,19,3,19,924,8,19,1,19,1,19,1,19,1,19,1,19,1,19,4,19,932,
  	8,19,11,19,12,19,933,1,19,3,19,937,8,19,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,3,19,946,8,19,1,19,1,19,1,19,1,19,1,19,1,19,4,19,954,8,19,11,19,
  	12,19,955,1,19,3,19,959,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,
  	968,8,19,1,19,1,19,1,19,1,19,1,19,1,19,4,19,976,8,19,11,19,12,19,977,
  	1,19,3,19,981,8,19,1,19,1,19,1,19,4,19,986,8,19,11,19,12,19,987,1,19,
  	3,19,991,8,19,3,19,993,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
  	20,1,20,1,20,3,20,1006,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
  	20,1,20,1,20,3,20,1019,8,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,1027,8,
  	20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,1040,8,
  	20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,1054,
  	8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,
  	1068,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,
  	1081,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,
  	1094,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
  	3,20,1108,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
  	1,20,3,20,1122,8,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,1130,8,20,1,21,
  	1,21,1,21,5,21,1135,8,21,10,21,12,21,1138,9,21,1,22,1,22,1,22,5,22,1143,
  	8,22,10,22,12,22,1146,9,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,1154,8,
  	23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,1168,
  	8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,1180,8,26,
  	1,27,1,27,3,27,1184,8,27,1,28,1,28,1,28,1,28,3,28,1190,8,28,1,29,1,29,
  	1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,1201,8,29,10,29,12,29,1204,9,
  	29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,1217,8,
  	30,1,31,1,31,1,31,1,31,1,31,3,31,1224,8,31,1,32,1,32,1,32,5,32,1229,8,
  	32,10,32,12,32,1232,9,32,1,32,3,32,1235,8,32,1,33,1,33,1,33,1,33,3,33,
  	1241,8,33,1,34,1,34,1,34,5,34,1246,8,34,10,34,12,34,1249,9,34,1,34,3,
  	34,1252,8,34,1,35,1,35,3,35,1256,8,35,1,35,1,35,3,35,1260,8,35,1,35,3,
  	35,1263,8,35,1,35,1,35,3,35,1267,8,35,1,35,1,35,3,35,1271,8,35,3,35,1273,
  	8,35,1,36,1,36,3,36,1277,8,36,1,37,5,37,1280,8,37,10,37,12,37,1283,9,
  	37,1,37,1,37,5,37,1287,8,37,10,37,12,37,1290,9,37,1,38,3,38,1293,8,38,
  	1,38,3,38,1296,8,38,1,39,1,39,1,40,1,40,5,40,1302,8,40,10,40,12,40,1305,
  	9,40,1,40,3,40,1308,8,40,1,41,1,41,3,41,1312,8,41,1,41,1,41,1,41,1,41,
  	5,41,1318,8,41,10,41,12,41,1321,9,41,1,41,3,41,1324,8,41,1,42,1,42,4,
  	42,1328,8,42,11,42,12,42,1329,1,43,1,43,3,43,1334,8,43,1,44,1,44,1,44,
  	1,44,1,44,3,44,1341,8,44,1,45,1,45,1,45,5,45,1346,8,45,10,45,12,45,1349,
  	9,45,1,45,3,45,1352,8,45,1,45,4,45,1355,8,45,11,45,12,45,1356,1,45,5,
  	45,1360,8,45,10,45,12,45,1363,9,45,1,45,3,45,1366,8,45,1,46,1,46,1,46,
  	1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1382,8,46,
  	1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1392,8,47,1,48,1,48,1,48,
  	1,48,1,48,3,48,1399,8,48,1,48,1,48,1,48,1,48,1,48,3,48,1406,8,48,1,48,
  	1,48,1,48,1,48,3,48,1412,8,48,1,48,1,48,1,48,4,48,1417,8,48,11,48,12,
  	48,1418,1,48,1,48,3,48,1423,8,48,1,48,1,48,1,48,1,48,3,48,1429,8,48,3,
  	48,1431,8,48,1,49,1,49,3,49,1435,8,49,1,50,1,50,1,51,1,51,3,51,1441,8,
  	51,1,52,1,52,1,52,1,52,3,52,1447,8,52,1,52,3,52,1450,8,52,1,53,1,53,1,
  	53,1,53,5,53,1456,8,53,10,53,12,53,1459,9,53,1,54,1,54,1,54,1,54,5,54,
  	1465,8,54,10,54,12,54,1468,9,54,1,55,1,55,1,55,1,56,1,56,1,57,1,57,1,
  	57,1,57,3,57,1479,8,57,1,58,1,58,3,58,1483,8,58,1,59,1,59,1,59,1,60,1,
  	60,5,60,1490,8,60,10,60,12,60,1493,9,60,1,60,1,60,1,60,1,60,1,60,1,60,
  	4,60,1501,8,60,11,60,12,60,1502,1,60,1,60,3,60,1507,8,60,1,61,1,61,1,
  	61,3,61,1512,8,61,1,61,1,61,1,61,1,61,3,61,1518,8,61,1,62,1,62,1,62,5,
  	62,1523,8,62,10,62,12,62,1526,9,62,1,63,1,63,1,63,3,63,1531,8,63,1,64,
  	1,64,1,64,5,64,1536,8,64,10,64,12,64,1539,9,64,1,65,1,65,1,65,3,65,1544,
  	8,65,1,66,1,66,1,66,1,66,1,66,1,66,5,66,1552,8,66,10,66,12,66,1555,9,
  	66,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1563,8,67,1,68,1,68,1,68,1,68,4,
  	68,1569,8,68,11,68,12,68,1570,1,69,3,69,1574,8,69,1,69,1,69,1,70,1,70,
  	1,70,3,70,1581,8,70,1,70,1,70,3,70,1585,8,70,1,70,3,70,1588,8,70,1,70,
  	1,70,1,70,1,71,3,71,1594,8,71,1,71,1,71,1,72,3,72,1599,8,72,1,72,1,72,
  	1,72,3,72,1604,8,72,1,72,1,72,3,72,1608,8,72,1,72,1,72,1,72,3,72,1613,
  	8,72,1,72,1,72,3,72,1617,8,72,1,72,1,72,1,73,1,73,1,74,1,74,5,74,1625,
  	8,74,10,74,12,74,1628,9,74,1,74,5,74,1631,8,74,10,74,12,74,1634,9,74,
  	1,74,3,74,1637,8,74,1,74,1,74,5,74,1641,8,74,10,74,12,74,1644,9,74,1,
  	74,3,74,1647,8,74,1,74,4,74,1650,8,74,11,74,12,74,1651,1,74,5,74,1655,
  	8,74,10,74,12,74,1658,9,74,1,74,3,74,1661,8,74,1,74,4,74,1664,8,74,11,
  	74,12,74,1665,1,74,3,74,1669,8,74,1,74,3,74,1672,8,74,1,75,4,75,1675,
  	8,75,11,75,12,75,1676,1,75,1,75,3,75,1681,8,75,1,76,5,76,1684,8,76,10,
  	76,12,76,1687,9,76,1,76,4,76,1690,8,76,11,76,12,76,1691,1,76,1,76,3,76,
  	1696,8,76,1,77,1,77,1,77,5,77,1701,8,77,10,77,12,77,1704,9,77,1,77,3,
  	77,1707,8,77,1,77,1,77,1,77,5,77,1712,8,77,10,77,12,77,1715,9,77,1,77,
  	3,77,1718,8,77,1,77,1,77,1,77,4,77,1723,8,77,11,77,12,77,1724,1,77,3,
  	77,1728,8,77,1,77,3,77,1731,8,77,1,78,1,78,1,78,1,79,1,79,1,79,1,79,3,
  	79,1740,8,79,1,80,1,80,1,80,1,80,3,80,1746,8,80,1,81,1,81,1,81,1,81,1,
  	81,1,81,1,81,3,81,1755,8,81,1,82,1,82,3,82,1759,8,82,1,82,1,82,1,82,1,
  	82,3,82,1765,8,82,3,82,1767,8,82,1,83,1,83,3,83,1771,8,83,1,84,1,84,1,
  	84,1,85,1,85,1,85,1,86,1,86,1,86,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,
  	88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,1796,8,88,3,88,1798,8,88,1,89,1,
  	89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1811,8,89,3,89,1813,
  	8,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,3,91,1824,8,91,1,92,
  	1,92,1,92,1,92,1,92,1,92,1,92,3,92,1833,8,92,1,92,1,92,1,92,1,92,1,92,
  	1,92,1,92,1,92,3,92,1843,8,92,3,92,1845,8,92,1,93,1,93,1,93,1,93,1,93,
  	5,93,1852,8,93,10,93,12,93,1855,9,93,1,93,3,93,1858,8,93,1,93,1,93,1,
  	93,1,93,1,93,1,93,1,93,1,93,5,93,1868,8,93,10,93,12,93,1871,9,93,1,93,
  	1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,5,93,1882,8,93,10,93,12,93,1885,
  	9,93,1,93,3,93,1888,8,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
  	5,93,1899,8,93,10,93,12,93,1902,9,93,1,93,1,93,1,93,3,93,1907,8,93,1,
  	94,1,94,1,94,1,94,1,94,3,94,1914,8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,
  	95,1,95,1,95,4,95,1925,8,95,11,95,12,95,1926,1,95,3,95,1930,8,95,1,95,
  	3,95,1933,8,95,1,95,1,95,1,95,1,95,4,95,1939,8,95,11,95,12,95,1940,1,
  	95,3,95,1944,8,95,1,95,3,95,1947,8,95,3,95,1949,8,95,1,96,1,96,1,96,1,
  	96,3,96,1955,8,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1963,8,96,1,97,1,
  	97,1,97,1,97,1,97,3,97,1970,8,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,
  	99,1,99,1,99,1,99,1,99,1,99,4,99,1985,8,99,11,99,12,99,1986,1,99,1,99,
  	1,100,1,100,1,100,3,100,1994,8,100,1,100,3,100,1997,8,100,1,101,1,101,
  	1,101,3,101,2002,8,101,1,101,1,101,1,101,1,102,1,102,1,102,1,103,1,103,
  	3,103,2012,8,103,1,104,1,104,3,104,2016,8,104,1,105,1,105,1,105,1,105,
  	1,106,1,106,1,106,5,106,2025,8,106,10,106,12,106,2028,9,106,1,107,1,107,
  	1,107,1,107,1,107,1,107,1,107,1,107,3,107,2038,8,107,1,108,1,108,1,108,
  	1,108,1,108,1,108,3,108,2046,8,108,1,109,1,109,1,109,1,109,1,109,1,109,
  	3,109,2054,8,109,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,
  	2064,8,110,1,111,1,111,1,111,3,111,2069,8,111,1,112,1,112,1,112,3,112,
  	2074,8,112,1,113,1,113,1,114,1,114,1,115,1,115,1,116,1,116,1,117,1,117,
  	1,118,1,118,1,119,1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,1,120,
  	5,120,2098,8,120,10,120,12,120,2101,9,120,1,121,1,121,1,121,1,121,1,122,
  	1,122,3,122,2109,8,122,1,122,1,122,1,122,3,122,2114,8,122,1,122,3,122,
  	2117,8,122,1,123,1,123,1,123,3,123,2122,8,123,1,124,1,124,1,124,5,124,
  	2127,8,124,10,124,12,124,2130,9,124,1,124,3,124,2133,8,124,1,125,1,125,
  	3,125,2137,8,125,1,126,1,126,1,126,1,126,3,126,2143,8,126,1,127,1,127,
  	1,127,1,127,1,127,3,127,2150,8,127,1,127,1,127,1,127,1,127,1,127,1,127,
  	1,127,3,127,2159,8,127,1,127,1,127,1,127,1,127,1,127,3,127,2166,8,127,
  	1,127,1,127,3,127,2170,8,127,1,128,1,128,1,128,5,128,2175,8,128,10,128,
  	12,128,2178,9,128,1,129,1,129,3,129,2182,8,129,1,129,1,129,1,129,1,130,
  	1,130,1,130,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,2198,
  	8,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,2206,8,131,1,131,1,131,
  	1,131,1,131,1,131,1,131,1,131,1,131,3,131,2216,8,131,1,131,1,131,3,131,
  	2220,8,131,1,132,1,132,1,132,5,132,2225,8,132,10,132,12,132,2228,9,132,
  	1,133,1,133,1,133,5,133,2233,8,133,10,133,12,133,2236,9,133,1,134,1,134,
  	1,134,1,134,1,135,1,135,1,135,3,135,2245,8,135,1,135,1,135,1,135,1,136,
  	1,136,1,136,1,136,1,137,1,137,1,137,5,137,2257,8,137,10,137,12,137,2260,
  	9,137,1,137,3,137,2263,8,137,1,138,1,138,3,138,2267,8,138,1,138,1,138,
  	1,138,1,138,3,138,2273,8,138,1,139,1,139,1,139,1,140,1,140,1,140,5,140,
  	2281,8,140,10,140,12,140,2284,9,140,1,140,3,140,2287,8,140,1,141,1,141,
  	1,141,1,141,1,141,1,141,1,141,1,141,3,141,2297,8,141,1,142,1,142,1,142,
  	1,142,1,142,3,142,2304,8,142,3,142,2306,8,142,1,143,1,143,1,143,5,143,
  	2311,8,143,10,143,12,143,2314,9,143,1,143,3,143,2317,8,143,1,144,1,144,
  	1,144,1,144,3,144,2323,8,144,1,145,1,145,1,145,5,145,2328,8,145,10,145,
  	12,145,2331,9,145,1,145,3,145,2334,8,145,1,146,1,146,1,146,3,146,2339,
  	8,146,1,147,1,147,1,147,1,147,1,148,1,148,3,148,2347,8,148,1,149,1,149,
  	1,149,5,149,2352,8,149,10,149,12,149,2355,9,149,1,150,1,150,1,150,5,150,
  	2360,8,150,10,150,12,150,2363,9,150,1,151,1,151,1,151,3,151,2368,8,151,
  	1,152,1,152,5,152,2372,8,152,10,152,12,152,2375,9,152,1,153,1,153,1,153,
  	1,153,1,153,1,153,1,153,1,153,1,153,1,153,3,153,2387,8,153,1,154,1,154,
  	1,154,1,155,1,155,1,155,1,155,3,155,2396,8,155,1,156,1,156,1,156,1,157,
  	1,157,1,157,1,158,1,158,1,158,1,159,1,159,1,159,1,160,1,160,1,160,1,160,
  	1,161,1,161,1,161,1,162,1,162,1,162,1,162,1,163,1,163,1,163,1,164,1,164,
  	1,164,1,164,1,164,1,164,5,164,2430,8,164,10,164,12,164,2433,9,164,1,165,
  	1,165,1,165,1,165,1,165,1,165,5,165,2441,8,165,10,165,12,165,2444,9,165,
  	1,166,1,166,1,166,1,166,1,166,1,166,5,166,2452,8,166,10,166,12,166,2455,
  	9,166,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,5,167,2466,
  	8,167,10,167,12,167,2469,9,167,1,168,1,168,1,168,1,168,1,168,1,168,1,
  	168,1,168,1,168,5,168,2480,8,168,10,168,12,168,2483,9,168,1,169,1,169,
  	1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
  	1,169,1,169,1,169,1,169,5,169,2503,8,169,10,169,12,169,2506,9,169,1,170,
  	1,170,1,170,1,170,1,170,1,170,1,170,3,170,2515,8,170,1,171,1,171,1,171,
  	1,171,1,171,3,171,2522,8,171,1,172,1,172,1,172,3,172,2527,8,172,1,173,
  	1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,2540,
  	8,173,1,173,1,173,1,173,1,173,1,173,1,173,5,173,2548,8,173,10,173,12,
  	173,2551,9,173,1,174,1,174,3,174,2555,8,174,1,174,1,174,1,174,3,174,2560,
  	8,174,5,174,2562,8,174,10,174,12,174,2565,9,174,1,174,3,174,2568,8,174,
  	1,175,3,175,2571,8,175,1,175,1,175,3,175,2575,8,175,1,175,1,175,3,175,
  	2579,8,175,3,175,2581,8,175,1,175,3,175,2584,8,175,1,176,1,176,1,176,
  	1,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,2596,8,176,1,176,1,176,
  	3,176,2600,8,176,1,176,1,176,1,176,1,176,3,176,2606,8,176,1,176,3,176,
  	2609,8,176,1,177,1,177,1,177,3,177,2614,8,177,1,177,1,177,1,178,1,178,
  	3,178,2620,8,178,1,178,1,178,1,178,1,179,1,179,1,180,1,180,5,180,2629,
  	8,180,10,180,12,180,2632,9,180,1,180,5,180,2635,8,180,10,180,12,180,2638,
  	9,180,1,180,3,180,2641,8,180,1,180,1,180,5,180,2645,8,180,10,180,12,180,
  	2648,9,180,1,180,3,180,2651,8,180,1,180,4,180,2654,8,180,11,180,12,180,
  	2655,1,180,5,180,2659,8,180,10,180,12,180,2662,9,180,1,180,3,180,2665,
  	8,180,1,180,4,180,2668,8,180,11,180,12,180,2669,1,180,3,180,2673,8,180,
  	1,180,3,180,2676,8,180,1,181,4,181,2679,8,181,11,181,12,181,2680,1,181,
  	1,181,3,181,2685,8,181,1,182,5,182,2688,8,182,10,182,12,182,2691,9,182,
  	1,182,4,182,2694,8,182,11,182,12,182,2695,1,182,1,182,3,182,2700,8,182,
  	1,183,1,183,1,183,5,183,2705,8,183,10,183,12,183,2708,9,183,1,183,3,183,
  	2711,8,183,1,183,1,183,1,183,4,183,2716,8,183,11,183,12,183,2717,1,183,
  	3,183,2721,8,183,1,183,3,183,2724,8,183,1,184,1,184,1,184,1,185,1,185,
  	3,185,2731,8,185,1,186,1,186,1,186,3,186,2736,8,186,1,187,1,187,3,187,
  	2740,8,187,1,187,3,187,2743,8,187,1,188,1,188,1,189,1,189,3,189,2749,
  	8,189,1,190,1,190,3,190,2753,8,190,1,191,1,191,3,191,2757,8,191,1,192,
  	1,192,3,192,2761,8,192,1,193,1,193,1,193,3,193,2766,8,193,1,194,1,194,
  	1,194,3,194,2771,8,194,1,195,1,195,1,195,3,195,2776,8,195,1,196,1,196,
  	1,196,3,196,2781,8,196,1,197,1,197,1,197,3,197,2786,8,197,1,198,1,198,
  	1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
  	1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
  	1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
  	1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
  	1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
  	1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
  	1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
  	1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
  	1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,4,198,2894,8,198,11,198,
  	12,198,2895,1,199,1,199,1,199,3,199,2901,8,199,1,199,3,199,2904,8,199,
  	1,199,3,199,2907,8,199,1,199,3,199,2910,8,199,1,199,1,199,1,200,1,200,
  	1,200,1,201,1,201,5,201,2919,8,201,10,201,12,201,2922,9,201,1,202,1,202,
  	3,202,2926,8,202,1,203,1,203,5,203,2930,8,203,10,203,12,203,2933,9,203,
  	1,203,1,203,1,203,5,203,2938,8,203,10,203,12,203,2941,9,203,1,203,1,203,
  	1,203,5,203,2946,8,203,10,203,12,203,2949,9,203,1,203,1,203,1,203,5,203,
  	2954,8,203,10,203,12,203,2957,9,203,1,203,3,203,2960,8,203,1,204,1,204,
  	1,205,1,205,4,205,2966,8,205,11,205,12,205,2967,1,206,1,206,3,206,2972,
  	8,206,1,206,1,206,1,207,1,207,1,207,1,207,1,207,3,207,2981,8,207,1,207,
  	1,207,1,208,1,208,1,208,1,208,1,209,1,209,3,209,2991,8,209,1,209,1,209,
  	1,210,1,210,1,210,5,210,2998,8,210,10,210,12,210,3001,9,210,1,210,3,210,
  	3004,8,210,1,211,1,211,1,211,3,211,3009,8,211,1,212,1,212,1,212,1,212,
  	1,213,4,213,3016,8,213,11,213,12,213,3017,1,214,3,214,3021,8,214,1,214,
  	1,214,1,214,1,214,1,214,1,214,5,214,3029,8,214,10,214,12,214,3032,9,214,
  	1,215,1,215,1,215,1,215,1,215,1,216,1,216,1,216,1,216,1,216,1,217,1,217,
  	1,217,3,217,3047,8,217,1,217,1,217,1,217,1,218,1,218,1,218,1,218,1,218,
  	1,219,1,219,3,219,3059,8,219,1,220,1,220,1,220,5,220,3064,8,220,10,220,
  	12,220,3067,9,220,1,220,1,220,3,220,3071,8,220,1,220,3,220,3074,8,220,
  	1,221,1,221,1,221,1,221,3,221,3080,8,221,1,222,1,222,1,222,5,222,3085,
  	8,222,10,222,12,222,3088,9,222,1,222,1,222,1,222,1,222,5,222,3094,8,222,
  	10,222,12,222,3097,9,222,1,222,1,222,1,222,5,222,3102,8,222,10,222,12,
  	222,3105,9,222,1,222,1,222,1,222,5,222,3110,8,222,10,222,12,222,3113,
  	9,222,3,222,3115,8,222,1,223,1,223,1,223,1,224,1,224,1,224,1,224,1,224,
  	3,224,3125,8,224,1,225,1,225,1,225,1,225,1,225,1,225,3,225,3133,8,225,
  	1,226,1,226,1,226,5,226,3138,8,226,10,226,12,226,3141,9,226,1,226,3,226,
  	3144,8,226,1,227,1,227,1,227,5,227,3149,8,227,10,227,12,227,3152,9,227,
  	1,227,3,227,3155,8,227,1,228,1,228,1,228,4,228,3160,8,228,11,228,12,228,
  	3161,1,228,3,228,3165,8,228,1,228,1,228,1,228,3,228,3170,8,228,1,229,
  	1,229,1,229,3,229,3175,8,229,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
  	1,230,1,230,1,230,3,230,3187,8,230,1,231,1,231,1,231,1,231,1,231,1,231,
  	1,231,3,231,3196,8,231,1,231,1,231,1,231,3,231,3201,8,231,1,231,3,231,
  	3204,8,231,1,232,1,232,1,232,1,232,1,232,1,232,3,232,3212,8,232,1,233,
  	1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,3223,8,233,1,234,
  	1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,
  	1,234,1,234,1,234,3,234,3241,8,234,1,234,5,234,3244,8,234,10,234,12,234,
  	3247,9,234,1,235,1,235,1,235,5,235,3252,8,235,10,235,12,235,3255,9,235,
  	1,235,3,235,3258,8,235,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,
  	1,236,1,236,3,236,3270,8,236,1,237,1,237,1,237,3,237,3275,8,237,1,237,
  	1,237,1,237,3,237,3280,8,237,1,237,3,237,3283,8,237,1,238,1,238,1,238,
  	5,238,3288,8,238,10,238,12,238,3291,9,238,1,238,1,238,1,238,1,238,1,238,
  	1,238,1,238,1,238,1,238,1,238,5,238,3303,8,238,10,238,12,238,3306,9,238,
  	1,238,1,238,1,238,1,238,1,238,1,238,1,238,5,238,3315,8,238,10,238,12,
  	238,3318,9,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
  	1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,5,238,3337,8,238,10,238,
  	12,238,3340,9,238,3,238,3342,8,238,1,239,1,239,1,240,1,240,1,240,0,12,
  	28,58,132,240,328,330,332,334,336,338,346,468,241,0,2,4,6,8,10,12,14,
  	16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
  	62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
  	106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
  	142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
  	178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,
  	214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
  	250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,
  	286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,
  	322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,
  	358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,
  	394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,
  	430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,
  	466,468,470,472,474,476,478,480,0,5,2,1,82,82,124,124,1,0,100,106,1,0,
  	109,121,2,0,74,74,76,76,1,0,55,58,3771,0,482,1,0,0,0,2,488,1,0,0,0,4,
  	506,1,0,0,0,6,593,1,0,0,0,8,595,1,0,0,0,10,603,1,0,0,0,12,615,1,0,0,0,
  	14,617,1,0,0,0,16,620,1,0,0,0,18,623,1,0,0,0,20,642,1,0,0,0,22,653,1,
  	0,0,0,24,655,1,0,0,0,26,669,1,0,0,0,28,673,1,0,0,0,30,697,1,0,0,0,32,
  	767,1,0,0,0,34,775,1,0,0,0,36,782,1,0,0,0,38,992,1,0,0,0,40,1129,1,0,
  	0,0,42,1131,1,0,0,0,44,1139,1,0,0,0,46,1153,1,0,0,0,48,1155,1,0,0,0,50,
  	1167,1,0,0,0,52,1179,1,0,0,0,54,1183,1,0,0,0,56,1189,1,0,0,0,58,1191,
  	1,0,0,0,60,1216,1,0,0,0,62,1223,1,0,0,0,64,1225,1,0,0,0,66,1236,1,0,0,
  	0,68,1242,1,0,0,0,70,1272,1,0,0,0,72,1276,1,0,0,0,74,1281,1,0,0,0,76,
  	1292,1,0,0,0,78,1297,1,0,0,0,80,1299,1,0,0,0,82,1309,1,0,0,0,84,1327,
  	1,0,0,0,86,1333,1,0,0,0,88,1340,1,0,0,0,90,1342,1,0,0,0,92,1381,1,0,0,
  	0,94,1391,1,0,0,0,96,1430,1,0,0,0,98,1434,1,0,0,0,100,1436,1,0,0,0,102,
  	1438,1,0,0,0,104,1449,1,0,0,0,106,1451,1,0,0,0,108,1460,1,0,0,0,110,1469,
  	1,0,0,0,112,1472,1,0,0,0,114,1474,1,0,0,0,116,1482,1,0,0,0,118,1484,1,
  	0,0,0,120,1506,1,0,0,0,122,1517,1,0,0,0,124,1519,1,0,0,0,126,1527,1,0,
  	0,0,128,1532,1,0,0,0,130,1540,1,0,0,0,132,1545,1,0,0,0,134,1562,1,0,0,
  	0,136,1568,1,0,0,0,138,1573,1,0,0,0,140,1577,1,0,0,0,142,1593,1,0,0,0,
  	144,1598,1,0,0,0,146,1620,1,0,0,0,148,1671,1,0,0,0,150,1674,1,0,0,0,152,
  	1685,1,0,0,0,154,1730,1,0,0,0,156,1732,1,0,0,0,158,1739,1,0,0,0,160,1745,
  	1,0,0,0,162,1754,1,0,0,0,164,1766,1,0,0,0,166,1768,1,0,0,0,168,1772,1,
  	0,0,0,170,1775,1,0,0,0,172,1778,1,0,0,0,174,1781,1,0,0,0,176,1797,1,0,
  	0,0,178,1812,1,0,0,0,180,1814,1,0,0,0,182,1818,1,0,0,0,184,1844,1,0,0,
  	0,186,1906,1,0,0,0,188,1913,1,0,0,0,190,1948,1,0,0,0,192,1962,1,0,0,0,
  	194,1964,1,0,0,0,196,1974,1,0,0,0,198,1978,1,0,0,0,200,1996,1,0,0,0,202,
  	1998,1,0,0,0,204,2006,1,0,0,0,206,2011,1,0,0,0,208,2015,1,0,0,0,210,2017,
  	1,0,0,0,212,2021,1,0,0,0,214,2037,1,0,0,0,216,2045,1,0,0,0,218,2053,1,
  	0,0,0,220,2063,1,0,0,0,222,2068,1,0,0,0,224,2073,1,0,0,0,226,2075,1,0,
  	0,0,228,2077,1,0,0,0,230,2079,1,0,0,0,232,2081,1,0,0,0,234,2083,1,0,0,
  	0,236,2085,1,0,0,0,238,2087,1,0,0,0,240,2091,1,0,0,0,242,2102,1,0,0,0,
  	244,2116,1,0,0,0,246,2118,1,0,0,0,248,2123,1,0,0,0,250,2136,1,0,0,0,252,
  	2142,1,0,0,0,254,2169,1,0,0,0,256,2171,1,0,0,0,258,2181,1,0,0,0,260,2186,
  	1,0,0,0,262,2219,1,0,0,0,264,2221,1,0,0,0,266,2229,1,0,0,0,268,2237,1,
  	0,0,0,270,2241,1,0,0,0,272,2249,1,0,0,0,274,2253,1,0,0,0,276,2272,1,0,
  	0,0,278,2274,1,0,0,0,280,2277,1,0,0,0,282,2296,1,0,0,0,284,2305,1,0,0,
  	0,286,2307,1,0,0,0,288,2322,1,0,0,0,290,2324,1,0,0,0,292,2338,1,0,0,0,
  	294,2340,1,0,0,0,296,2346,1,0,0,0,298,2348,1,0,0,0,300,2356,1,0,0,0,302,
  	2367,1,0,0,0,304,2369,1,0,0,0,306,2386,1,0,0,0,308,2388,1,0,0,0,310,2395,
  	1,0,0,0,312,2397,1,0,0,0,314,2400,1,0,0,0,316,2403,1,0,0,0,318,2406,1,
  	0,0,0,320,2409,1,0,0,0,322,2413,1,0,0,0,324,2416,1,0,0,0,326,2420,1,0,
  	0,0,328,2423,1,0,0,0,330,2434,1,0,0,0,332,2445,1,0,0,0,334,2456,1,0,0,
  	0,336,2470,1,0,0,0,338,2484,1,0,0,0,340,2514,1,0,0,0,342,2521,1,0,0,0,
  	344,2526,1,0,0,0,346,2528,1,0,0,0,348,2554,1,0,0,0,350,2583,1,0,0,0,352,
  	2608,1,0,0,0,354,2610,1,0,0,0,356,2617,1,0,0,0,358,2624,1,0,0,0,360,2675,
  	1,0,0,0,362,2678,1,0,0,0,364,2689,1,0,0,0,366,2723,1,0,0,0,368,2725,1,
  	0,0,0,370,2728,1,0,0,0,372,2732,1,0,0,0,374,2737,1,0,0,0,376,2744,1,0,
  	0,0,378,2748,1,0,0,0,380,2752,1,0,0,0,382,2756,1,0,0,0,384,2760,1,0,0,
  	0,386,2765,1,0,0,0,388,2770,1,0,0,0,390,2775,1,0,0,0,392,2780,1,0,0,0,
  	394,2785,1,0,0,0,396,2893,1,0,0,0,398,2897,1,0,0,0,400,2913,1,0,0,0,402,
  	2916,1,0,0,0,404,2925,1,0,0,0,406,2959,1,0,0,0,408,2961,1,0,0,0,410,2965,
  	1,0,0,0,412,2969,1,0,0,0,414,2975,1,0,0,0,416,2984,1,0,0,0,418,2988,1,
  	0,0,0,420,2994,1,0,0,0,422,3008,1,0,0,0,424,3010,1,0,0,0,426,3015,1,0,
  	0,0,428,3020,1,0,0,0,430,3033,1,0,0,0,432,3038,1,0,0,0,434,3043,1,0,0,
  	0,436,3051,1,0,0,0,438,3056,1,0,0,0,440,3073,1,0,0,0,442,3079,1,0,0,0,
  	444,3114,1,0,0,0,446,3116,1,0,0,0,448,3124,1,0,0,0,450,3132,1,0,0,0,452,
  	3134,1,0,0,0,454,3145,1,0,0,0,456,3169,1,0,0,0,458,3174,1,0,0,0,460,3186,
  	1,0,0,0,462,3203,1,0,0,0,464,3211,1,0,0,0,466,3222,1,0,0,0,468,3224,1,
  	0,0,0,470,3248,1,0,0,0,472,3269,1,0,0,0,474,3282,1,0,0,0,476,3341,1,0,
  	0,0,478,3343,1,0,0,0,480,3345,1,0,0,0,482,483,3,2,1,0,483,484,5,0,0,1,
  	484,1,1,0,0,0,485,487,5,124,0,0,486,485,1,0,0,0,487,490,1,0,0,0,488,486,
  	1,0,0,0,488,489,1,0,0,0,489,500,1,0,0,0,490,488,1,0,0,0,491,495,3,4,2,
  	0,492,494,5,124,0,0,493,492,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,
  	496,1,0,0,0,496,499,1,0,0,0,497,495,1,0,0,0,498,491,1,0,0,0,499,502,1,
  	0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,3,1,0,0,0,502,500,1,0,0,0,503,
  	507,3,6,3,0,504,507,3,32,16,0,505,507,3,72,36,0,506,503,1,0,0,0,506,504,
  	1,0,0,0,506,505,1,0,0,0,507,5,1,0,0,0,508,510,5,1,0,0,509,508,1,0,0,0,
  	510,513,1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,514,1,0,0,0,513,511,
  	1,0,0,0,514,515,3,26,13,0,515,516,5,71,0,0,516,519,3,8,4,0,517,518,5,
  	122,0,0,518,520,3,282,141,0,519,517,1,0,0,0,519,520,1,0,0,0,520,528,1,
  	0,0,0,521,529,5,82,0,0,522,524,5,124,0,0,523,522,1,0,0,0,524,525,1,0,
  	0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,529,1,0,0,0,527,529,5,0,0,1,528,
  	521,1,0,0,0,528,523,1,0,0,0,528,527,1,0,0,0,529,533,1,0,0,0,530,532,5,
  	2,0,0,531,530,1,0,0,0,532,535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,
  	534,594,1,0,0,0,535,533,1,0,0,0,536,538,5,1,0,0,537,536,1,0,0,0,538,541,
  	1,0,0,0,539,537,1,0,0,0,539,540,1,0,0,0,540,542,1,0,0,0,541,539,1,0,0,
  	0,542,543,3,26,13,0,543,544,5,71,0,0,544,547,3,8,4,0,545,546,5,84,0,0,
  	546,548,3,282,141,0,547,545,1,0,0,0,547,548,1,0,0,0,548,556,1,0,0,0,549,
  	557,5,82,0,0,550,552,5,124,0,0,551,550,1,0,0,0,552,553,1,0,0,0,553,551,
  	1,0,0,0,553,554,1,0,0,0,554,557,1,0,0,0,555,557,5,0,0,1,556,549,1,0,0,
  	0,556,551,1,0,0,0,556,555,1,0,0,0,557,561,1,0,0,0,558,560,5,2,0,0,559,
  	558,1,0,0,0,560,563,1,0,0,0,561,559,1,0,0,0,561,562,1,0,0,0,562,594,1,
  	0,0,0,563,561,1,0,0,0,564,566,5,1,0,0,565,564,1,0,0,0,566,569,1,0,0,0,
  	567,565,1,0,0,0,567,568,1,0,0,0,568,570,1,0,0,0,569,567,1,0,0,0,570,571,
  	3,26,13,0,571,572,5,71,0,0,572,576,3,8,4,0,573,574,5,81,0,0,574,575,5,
  	81,0,0,575,577,3,282,141,0,576,573,1,0,0,0,576,577,1,0,0,0,577,585,1,
  	0,0,0,578,586,5,82,0,0,579,581,5,124,0,0,580,579,1,0,0,0,581,582,1,0,
  	0,0,582,580,1,0,0,0,582,583,1,0,0,0,583,586,1,0,0,0,584,586,5,0,0,1,585,
  	578,1,0,0,0,585,580,1,0,0,0,585,584,1,0,0,0,586,590,1,0,0,0,587,589,5,
  	2,0,0,588,587,1,0,0,0,589,592,1,0,0,0,590,588,1,0,0,0,590,591,1,0,0,0,
  	591,594,1,0,0,0,592,590,1,0,0,0,593,511,1,0,0,0,593,539,1,0,0,0,593,567,
  	1,0,0,0,594,7,1,0,0,0,595,600,3,10,5,0,596,597,5,87,0,0,597,599,3,10,
  	5,0,598,596,1,0,0,0,599,602,1,0,0,0,600,598,1,0,0,0,600,601,1,0,0,0,601,
  	9,1,0,0,0,602,600,1,0,0,0,603,607,3,12,6,0,604,606,3,12,6,0,605,604,1,
  	0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,11,1,0,0,0,
  	609,607,1,0,0,0,610,616,3,22,11,0,611,616,3,14,7,0,612,616,3,16,8,0,613,
  	616,3,18,9,0,614,616,3,20,10,0,615,610,1,0,0,0,615,611,1,0,0,0,615,612,
  	1,0,0,0,615,613,1,0,0,0,615,614,1,0,0,0,616,13,1,0,0,0,617,618,3,22,11,
  	0,618,619,5,77,0,0,619,15,1,0,0,0,620,621,3,22,11,0,621,622,5,92,0,0,
  	622,17,1,0,0,0,623,624,3,22,11,0,624,625,5,72,0,0,625,19,1,0,0,0,626,
  	627,3,22,11,0,627,628,5,98,0,0,628,629,3,282,141,0,629,630,5,99,0,0,630,
  	643,1,0,0,0,631,632,3,22,11,0,632,634,5,98,0,0,633,635,3,282,141,0,634,
  	633,1,0,0,0,634,635,1,0,0,0,635,636,1,0,0,0,636,638,5,80,0,0,637,639,
  	3,282,141,0,638,637,1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,641,5,
  	99,0,0,641,643,1,0,0,0,642,626,1,0,0,0,642,631,1,0,0,0,643,21,1,0,0,0,
  	644,654,3,24,12,0,645,654,3,408,204,0,646,654,5,8,0,0,647,654,3,28,14,
  	0,648,654,3,30,15,0,649,650,5,78,0,0,650,651,3,8,4,0,651,652,5,79,0,0,
  	652,654,1,0,0,0,653,644,1,0,0,0,653,645,1,0,0,0,653,646,1,0,0,0,653,647,
  	1,0,0,0,653,648,1,0,0,0,653,649,1,0,0,0,654,23,1,0,0,0,655,664,5,100,
  	0,0,656,657,3,480,240,0,657,658,5,81,0,0,658,660,1,0,0,0,659,656,1,0,
  	0,0,659,660,1,0,0,0,660,661,1,0,0,0,661,662,3,480,240,0,662,663,5,81,
  	0,0,663,665,1,0,0,0,664,659,1,0,0,0,664,665,1,0,0,0,665,666,1,0,0,0,666,
  	667,3,480,240,0,667,668,5,101,0,0,668,25,1,0,0,0,669,670,5,100,0,0,670,
  	671,3,480,240,0,671,672,5,101,0,0,672,27,1,0,0,0,673,674,6,14,-1,0,674,
  	675,3,480,240,0,675,694,1,0,0,0,676,677,10,4,0,0,677,678,5,76,0,0,678,
  	693,3,480,240,0,679,680,10,3,0,0,680,681,5,85,0,0,681,682,3,348,174,0,
  	682,683,5,86,0,0,683,693,1,0,0,0,684,685,10,2,0,0,685,693,3,434,217,0,
  	686,687,10,1,0,0,687,689,5,78,0,0,688,690,3,438,219,0,689,688,1,0,0,0,
  	689,690,1,0,0,0,690,691,1,0,0,0,691,693,5,79,0,0,692,676,1,0,0,0,692,
  	679,1,0,0,0,692,684,1,0,0,0,692,686,1,0,0,0,693,696,1,0,0,0,694,692,1,
  	0,0,0,694,695,1,0,0,0,695,29,1,0,0,0,696,694,1,0,0,0,697,699,5,85,0,0,
  	698,700,5,88,0,0,699,698,1,0,0,0,699,700,1,0,0,0,700,701,1,0,0,0,701,
  	702,3,408,204,0,702,703,5,86,0,0,703,31,1,0,0,0,704,706,5,1,0,0,705,704,
  	1,0,0,0,706,709,1,0,0,0,707,705,1,0,0,0,707,708,1,0,0,0,708,710,1,0,0,
  	0,709,707,1,0,0,0,710,711,5,48,0,0,711,715,3,34,17,0,712,714,5,2,0,0,
  	713,712,1,0,0,0,714,717,1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,768,
  	1,0,0,0,717,715,1,0,0,0,718,720,5,1,0,0,719,718,1,0,0,0,720,723,1,0,0,
  	0,721,719,1,0,0,0,721,722,1,0,0,0,722,724,1,0,0,0,723,721,1,0,0,0,724,
  	725,5,54,0,0,725,733,3,50,25,0,726,734,5,82,0,0,727,729,5,124,0,0,728,
  	727,1,0,0,0,729,730,1,0,0,0,730,728,1,0,0,0,730,731,1,0,0,0,731,734,1,
  	0,0,0,732,734,5,0,0,1,733,726,1,0,0,0,733,728,1,0,0,0,733,732,1,0,0,0,
  	734,738,1,0,0,0,735,737,5,2,0,0,736,735,1,0,0,0,737,740,1,0,0,0,738,736,
  	1,0,0,0,738,739,1,0,0,0,739,768,1,0,0,0,740,738,1,0,0,0,741,743,5,1,0,
  	0,742,741,1,0,0,0,743,746,1,0,0,0,744,742,1,0,0,0,744,745,1,0,0,0,745,
  	747,1,0,0,0,746,744,1,0,0,0,747,748,5,53,0,0,748,756,3,50,25,0,749,757,
  	5,82,0,0,750,752,5,124,0,0,751,750,1,0,0,0,752,753,1,0,0,0,753,751,1,
  	0,0,0,753,754,1,0,0,0,754,757,1,0,0,0,755,757,5,0,0,1,756,749,1,0,0,0,
  	756,751,1,0,0,0,756,755,1,0,0,0,757,761,1,0,0,0,758,760,5,2,0,0,759,758,
  	1,0,0,0,760,763,1,0,0,0,761,759,1,0,0,0,761,762,1,0,0,0,762,768,1,0,0,
  	0,763,761,1,0,0,0,764,765,3,34,17,0,765,766,5,82,0,0,766,768,1,0,0,0,
  	767,707,1,0,0,0,767,721,1,0,0,0,767,744,1,0,0,0,767,764,1,0,0,0,768,33,
  	1,0,0,0,769,770,3,42,21,0,770,771,5,108,0,0,771,772,3,42,21,0,772,773,
  	7,0,0,0,773,776,1,0,0,0,774,776,3,38,19,0,775,769,1,0,0,0,775,774,1,0,
  	0,0,776,35,1,0,0,0,777,778,3,42,21,0,778,779,5,108,0,0,779,780,3,42,21,
  	0,780,783,1,0,0,0,781,783,3,40,20,0,782,777,1,0,0,0,782,781,1,0,0,0,783,
  	37,1,0,0,0,784,785,5,51,0,0,785,786,3,26,13,0,786,787,5,33,0,0,787,788,
  	3,58,29,0,788,795,5,81,0,0,789,790,5,124,0,0,790,791,5,1,0,0,791,792,
  	3,38,19,0,792,793,5,2,0,0,793,796,1,0,0,0,794,796,3,38,19,0,795,789,1,
  	0,0,0,795,794,1,0,0,0,796,993,1,0,0,0,797,798,5,52,0,0,798,799,3,26,13,
  	0,799,800,5,33,0,0,800,801,3,58,29,0,801,808,5,81,0,0,802,803,5,124,0,
  	0,803,804,5,1,0,0,804,805,3,38,19,0,805,806,5,2,0,0,806,809,1,0,0,0,807,
  	809,3,38,19,0,808,802,1,0,0,0,808,807,1,0,0,0,809,993,1,0,0,0,810,811,
  	5,55,0,0,811,812,5,78,0,0,812,813,3,40,20,0,813,816,5,28,0,0,814,817,
  	3,26,13,0,815,817,3,480,240,0,816,814,1,0,0,0,816,815,1,0,0,0,817,818,
  	1,0,0,0,818,819,5,33,0,0,819,820,3,56,28,0,820,828,5,79,0,0,821,829,5,
  	82,0,0,822,824,5,124,0,0,823,822,1,0,0,0,824,825,1,0,0,0,825,823,1,0,
  	0,0,825,826,1,0,0,0,826,829,1,0,0,0,827,829,5,0,0,1,828,821,1,0,0,0,828,
  	823,1,0,0,0,828,827,1,0,0,0,829,993,1,0,0,0,830,831,5,55,0,0,831,832,
  	5,78,0,0,832,833,5,85,0,0,833,834,3,40,20,0,834,837,5,28,0,0,835,838,
  	3,26,13,0,836,838,3,480,240,0,837,835,1,0,0,0,837,836,1,0,0,0,838,839,
  	1,0,0,0,839,840,5,33,0,0,840,841,3,56,28,0,841,842,5,86,0,0,842,850,5,
  	79,0,0,843,851,5,82,0,0,844,846,5,124,0,0,845,844,1,0,0,0,846,847,1,0,
  	0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,851,1,0,0,0,849,851,5,0,0,1,850,
  	843,1,0,0,0,850,845,1,0,0,0,850,849,1,0,0,0,851,993,1,0,0,0,852,853,5,
  	55,0,0,853,854,5,78,0,0,854,855,5,78,0,0,855,856,3,40,20,0,856,859,5,
  	28,0,0,857,860,3,26,13,0,858,860,3,480,240,0,859,857,1,0,0,0,859,858,
  	1,0,0,0,860,861,1,0,0,0,861,862,5,33,0,0,862,863,3,56,28,0,863,864,5,
  	86,0,0,864,872,5,79,0,0,865,873,5,82,0,0,866,868,5,124,0,0,867,866,1,
  	0,0,0,868,869,1,0,0,0,869,867,1,0,0,0,869,870,1,0,0,0,870,873,1,0,0,0,
  	871,873,5,0,0,1,872,865,1,0,0,0,872,867,1,0,0,0,872,871,1,0,0,0,873,993,
  	1,0,0,0,874,875,5,55,0,0,875,876,5,78,0,0,876,877,5,98,0,0,877,878,3,
  	40,20,0,878,881,5,28,0,0,879,882,3,26,13,0,880,882,3,480,240,0,881,879,
  	1,0,0,0,881,880,1,0,0,0,882,883,1,0,0,0,883,884,5,33,0,0,884,885,3,56,
  	28,0,885,886,5,99,0,0,886,894,5,79,0,0,887,895,5,82,0,0,888,890,5,124,
  	0,0,889,888,1,0,0,0,890,891,1,0,0,0,891,889,1,0,0,0,891,892,1,0,0,0,892,
  	895,1,0,0,0,893,895,5,0,0,1,894,887,1,0,0,0,894,889,1,0,0,0,894,893,1,
  	0,0,0,895,993,1,0,0,0,896,897,5,56,0,0,897,898,5,78,0,0,898,899,3,40,
  	20,0,899,902,5,28,0,0,900,903,3,26,13,0,901,903,3,480,240,0,902,900,1,
  	0,0,0,902,901,1,0,0,0,903,904,1,0,0,0,904,905,5,33,0,0,905,906,3,56,28,
  	0,906,914,5,79,0,0,907,915,5,82,0,0,908,910,5,124,0,0,909,908,1,0,0,0,
  	910,911,1,0,0,0,911,909,1,0,0,0,911,912,1,0,0,0,912,915,1,0,0,0,913,915,
  	5,0,0,1,914,907,1,0,0,0,914,909,1,0,0,0,914,913,1,0,0,0,915,993,1,0,0,
  	0,916,917,5,56,0,0,917,918,5,78,0,0,918,919,5,78,0,0,919,920,3,40,20,
  	0,920,923,5,28,0,0,921,924,3,26,13,0,922,924,3,480,240,0,923,921,1,0,
  	0,0,923,922,1,0,0,0,924,925,1,0,0,0,925,926,5,33,0,0,926,927,3,56,28,
  	0,927,928,5,79,0,0,928,936,5,79,0,0,929,937,5,82,0,0,930,932,5,124,0,
  	0,931,930,1,0,0,0,932,933,1,0,0,0,933,931,1,0,0,0,933,934,1,0,0,0,934,
  	937,1,0,0,0,935,937,5,0,0,1,936,929,1,0,0,0,936,931,1,0,0,0,936,935,1,
  	0,0,0,937,993,1,0,0,0,938,939,5,56,0,0,939,940,5,78,0,0,940,941,5,85,
  	0,0,941,942,3,40,20,0,942,945,5,28,0,0,943,946,3,26,13,0,944,946,3,480,
  	240,0,945,943,1,0,0,0,945,944,1,0,0,0,946,947,1,0,0,0,947,948,5,33,0,
  	0,948,949,3,56,28,0,949,950,5,86,0,0,950,958,5,79,0,0,951,959,5,82,0,
  	0,952,954,5,124,0,0,953,952,1,0,0,0,954,955,1,0,0,0,955,953,1,0,0,0,955,
  	956,1,0,0,0,956,959,1,0,0,0,957,959,5,0,0,1,958,951,1,0,0,0,958,953,1,
  	0,0,0,958,957,1,0,0,0,959,993,1,0,0,0,960,961,5,56,0,0,961,962,5,78,0,
  	0,962,963,5,98,0,0,963,964,3,40,20,0,964,967,5,28,0,0,965,968,3,26,13,
  	0,966,968,3,480,240,0,967,965,1,0,0,0,967,966,1,0,0,0,968,969,1,0,0,0,
  	969,970,5,33,0,0,970,971,3,56,28,0,971,972,5,99,0,0,972,980,5,79,0,0,
  	973,981,5,82,0,0,974,976,5,124,0,0,975,974,1,0,0,0,976,977,1,0,0,0,977,
  	975,1,0,0,0,977,978,1,0,0,0,978,981,1,0,0,0,979,981,5,0,0,1,980,973,1,
  	0,0,0,980,975,1,0,0,0,980,979,1,0,0,0,981,993,1,0,0,0,982,990,3,42,21,
  	0,983,991,5,82,0,0,984,986,5,124,0,0,985,984,1,0,0,0,986,987,1,0,0,0,
  	987,985,1,0,0,0,987,988,1,0,0,0,988,991,1,0,0,0,989,991,5,0,0,1,990,983,
  	1,0,0,0,990,985,1,0,0,0,990,989,1,0,0,0,991,993,1,0,0,0,992,784,1,0,0,
  	0,992,797,1,0,0,0,992,810,1,0,0,0,992,830,1,0,0,0,992,852,1,0,0,0,992,
  	874,1,0,0,0,992,896,1,0,0,0,992,916,1,0,0,0,992,938,1,0,0,0,992,960,1,
  	0,0,0,992,982,1,0,0,0,993,39,1,0,0,0,994,995,5,51,0,0,995,996,3,26,13,
  	0,996,997,5,33,0,0,997,998,3,58,29,0,998,1005,5,81,0,0,999,1000,5,124,
  	0,0,1000,1001,5,1,0,0,1001,1002,3,40,20,0,1002,1003,5,2,0,0,1003,1006,
  	1,0,0,0,1004,1006,3,38,19,0,1005,999,1,0,0,0,1005,1004,1,0,0,0,1006,1130,
  	1,0,0,0,1007,1008,5,52,0,0,1008,1009,3,26,13,0,1009,1010,5,33,0,0,1010,
  	1011,3,58,29,0,1011,1018,5,81,0,0,1012,1013,5,124,0,0,1013,1014,5,1,0,
  	0,1014,1015,3,40,20,0,1015,1016,5,2,0,0,1016,1019,1,0,0,0,1017,1019,3,
  	38,19,0,1018,1012,1,0,0,0,1018,1017,1,0,0,0,1019,1130,1,0,0,0,1020,1021,
  	5,55,0,0,1021,1022,5,78,0,0,1022,1023,3,40,20,0,1023,1026,5,28,0,0,1024,
  	1027,3,26,13,0,1025,1027,3,480,240,0,1026,1024,1,0,0,0,1026,1025,1,0,
  	0,0,1027,1028,1,0,0,0,1028,1029,5,33,0,0,1029,1030,3,56,28,0,1030,1031,
  	5,79,0,0,1031,1130,1,0,0,0,1032,1033,5,55,0,0,1033,1034,5,78,0,0,1034,
  	1035,5,85,0,0,1035,1036,3,40,20,0,1036,1039,5,28,0,0,1037,1040,3,26,13,
  	0,1038,1040,3,480,240,0,1039,1037,1,0,0,0,1039,1038,1,0,0,0,1040,1041,
  	1,0,0,0,1041,1042,5,33,0,0,1042,1043,3,56,28,0,1043,1044,5,86,0,0,1044,
  	1045,5,79,0,0,1045,1130,1,0,0,0,1046,1047,5,55,0,0,1047,1048,5,78,0,0,
  	1048,1049,5,78,0,0,1049,1050,3,40,20,0,1050,1053,5,28,0,0,1051,1054,3,
  	26,13,0,1052,1054,3,480,240,0,1053,1051,1,0,0,0,1053,1052,1,0,0,0,1054,
  	1055,1,0,0,0,1055,1056,5,33,0,0,1056,1057,3,56,28,0,1057,1058,5,86,0,
  	0,1058,1059,5,79,0,0,1059,1130,1,0,0,0,1060,1061,5,55,0,0,1061,1062,5,
  	78,0,0,1062,1063,5,98,0,0,1063,1064,3,40,20,0,1064,1067,5,28,0,0,1065,
  	1068,3,26,13,0,1066,1068,3,480,240,0,1067,1065,1,0,0,0,1067,1066,1,0,
  	0,0,1068,1069,1,0,0,0,1069,1070,5,33,0,0,1070,1071,3,56,28,0,1071,1072,
  	5,99,0,0,1072,1073,5,79,0,0,1073,1130,1,0,0,0,1074,1075,5,56,0,0,1075,
  	1076,5,78,0,0,1076,1077,3,40,20,0,1077,1080,5,28,0,0,1078,1081,3,26,13,
  	0,1079,1081,3,480,240,0,1080,1078,1,0,0,0,1080,1079,1,0,0,0,1081,1082,
  	1,0,0,0,1082,1083,5,33,0,0,1083,1084,3,56,28,0,1084,1085,5,79,0,0,1085,
  	1130,1,0,0,0,1086,1087,5,56,0,0,1087,1088,5,78,0,0,1088,1089,5,78,0,0,
  	1089,1090,3,40,20,0,1090,1093,5,28,0,0,1091,1094,3,26,13,0,1092,1094,
  	3,480,240,0,1093,1091,1,0,0,0,1093,1092,1,0,0,0,1094,1095,1,0,0,0,1095,
  	1096,5,33,0,0,1096,1097,3,56,28,0,1097,1098,5,79,0,0,1098,1099,5,79,0,
  	0,1099,1130,1,0,0,0,1100,1101,5,56,0,0,1101,1102,5,78,0,0,1102,1103,5,
  	85,0,0,1103,1104,3,40,20,0,1104,1107,5,28,0,0,1105,1108,3,26,13,0,1106,
  	1108,3,480,240,0,1107,1105,1,0,0,0,1107,1106,1,0,0,0,1108,1109,1,0,0,
  	0,1109,1110,5,33,0,0,1110,1111,3,56,28,0,1111,1112,5,86,0,0,1112,1113,
  	5,79,0,0,1113,1130,1,0,0,0,1114,1115,5,56,0,0,1115,1116,5,78,0,0,1116,
  	1117,5,98,0,0,1117,1118,3,40,20,0,1118,1121,5,28,0,0,1119,1122,3,26,13,
  	0,1120,1122,3,480,240,0,1121,1119,1,0,0,0,1121,1120,1,0,0,0,1122,1123,
  	1,0,0,0,1123,1124,5,33,0,0,1124,1125,3,56,28,0,1125,1126,5,99,0,0,1126,
  	1127,5,79,0,0,1127,1130,1,0,0,0,1128,1130,3,42,21,0,1129,994,1,0,0,0,
  	1129,1007,1,0,0,0,1129,1020,1,0,0,0,1129,1032,1,0,0,0,1129,1046,1,0,0,
  	0,1129,1060,1,0,0,0,1129,1074,1,0,0,0,1129,1086,1,0,0,0,1129,1100,1,0,
  	0,0,1129,1114,1,0,0,0,1129,1128,1,0,0,0,1130,41,1,0,0,0,1131,1136,3,44,
  	22,0,1132,1133,5,40,0,0,1133,1135,3,44,22,0,1134,1132,1,0,0,0,1135,1138,
  	1,0,0,0,1136,1134,1,0,0,0,1136,1137,1,0,0,0,1137,43,1,0,0,0,1138,1136,
  	1,0,0,0,1139,1144,3,46,23,0,1140,1141,5,12,0,0,1141,1143,3,46,23,0,1142,
  	1140,1,0,0,0,1143,1146,1,0,0,0,1144,1142,1,0,0,0,1144,1145,1,0,0,0,1145,
  	45,1,0,0,0,1146,1144,1,0,0,0,1147,1154,3,48,24,0,1148,1149,5,78,0,0,1149,
  	1150,3,36,18,0,1150,1151,5,79,0,0,1151,1154,1,0,0,0,1152,1154,3,50,25,
  	0,1153,1147,1,0,0,0,1153,1148,1,0,0,0,1153,1152,1,0,0,0,1154,47,1,0,0,
  	0,1155,1156,3,50,25,0,1156,1157,7,1,0,0,1157,1158,3,50,25,0,1158,49,1,
  	0,0,0,1159,1168,3,52,26,0,1160,1168,3,302,151,0,1161,1162,3,302,151,0,
  	1162,1163,5,31,0,0,1163,1164,3,302,151,0,1164,1165,5,24,0,0,1165,1166,
  	3,302,151,0,1166,1168,1,0,0,0,1167,1159,1,0,0,0,1167,1160,1,0,0,0,1167,
  	1161,1,0,0,0,1168,51,1,0,0,0,1169,1170,5,87,0,0,1170,1171,3,58,29,0,1171,
  	1172,5,87,0,0,1172,1180,1,0,0,0,1173,1174,5,57,0,0,1174,1175,5,78,0,0,
  	1175,1176,3,56,28,0,1176,1177,5,79,0,0,1177,1180,1,0,0,0,1178,1180,3,
  	54,27,0,1179,1169,1,0,0,0,1179,1173,1,0,0,0,1179,1178,1,0,0,0,1180,53,
  	1,0,0,0,1181,1184,3,56,28,0,1182,1184,3,58,29,0,1183,1181,1,0,0,0,1183,
  	1182,1,0,0,0,1184,55,1,0,0,0,1185,1186,5,77,0,0,1186,1190,3,58,29,0,1187,
  	1188,5,83,0,0,1188,1190,3,58,29,0,1189,1185,1,0,0,0,1189,1187,1,0,0,0,
  	1190,57,1,0,0,0,1191,1192,6,29,-1,0,1192,1193,3,60,30,0,1193,1202,1,0,
  	0,0,1194,1195,10,2,0,0,1195,1196,5,76,0,0,1196,1201,3,60,30,0,1197,1198,
  	10,1,0,0,1198,1199,5,75,0,0,1199,1201,3,60,30,0,1200,1194,1,0,0,0,1200,
  	1197,1,0,0,0,1201,1204,1,0,0,0,1202,1200,1,0,0,0,1202,1203,1,0,0,0,1203,
  	59,1,0,0,0,1204,1202,1,0,0,0,1205,1206,3,62,31,0,1206,1207,5,85,0,0,1207,
  	1208,3,68,34,0,1208,1209,5,86,0,0,1209,1217,1,0,0,0,1210,1211,3,62,31,
  	0,1211,1212,5,98,0,0,1212,1213,3,64,32,0,1213,1214,5,99,0,0,1214,1217,
  	1,0,0,0,1215,1217,3,62,31,0,1216,1205,1,0,0,0,1216,1210,1,0,0,0,1216,
  	1215,1,0,0,0,1217,61,1,0,0,0,1218,1224,3,26,13,0,1219,1220,5,78,0,0,1220,
  	1221,3,58,29,0,1221,1222,5,79,0,0,1222,1224,1,0,0,0,1223,1218,1,0,0,0,
  	1223,1219,1,0,0,0,1224,63,1,0,0,0,1225,1230,3,66,33,0,1226,1227,5,80,
  	0,0,1227,1229,3,66,33,0,1228,1226,1,0,0,0,1229,1232,1,0,0,0,1230,1228,
  	1,0,0,0,1230,1231,1,0,0,0,1231,1234,1,0,0,0,1232,1230,1,0,0,0,1233,1235,
  	5,80,0,0,1234,1233,1,0,0,0,1234,1235,1,0,0,0,1235,65,1,0,0,0,1236,1237,
  	5,77,0,0,1237,1240,3,26,13,0,1238,1239,5,81,0,0,1239,1241,3,70,35,0,1240,
  	1238,1,0,0,0,1240,1241,1,0,0,0,1241,67,1,0,0,0,1242,1247,3,70,35,0,1243,
  	1244,5,80,0,0,1244,1246,3,70,35,0,1245,1243,1,0,0,0,1246,1249,1,0,0,0,
  	1247,1245,1,0,0,0,1247,1248,1,0,0,0,1248,1251,1,0,0,0,1249,1247,1,0,0,
  	0,1250,1252,5,80,0,0,1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,69,1,0,
  	0,0,1253,1273,5,8,0,0,1254,1256,5,8,0,0,1255,1254,1,0,0,0,1255,1256,1,
  	0,0,0,1256,1257,1,0,0,0,1257,1259,5,81,0,0,1258,1260,5,8,0,0,1259,1258,
  	1,0,0,0,1259,1260,1,0,0,0,1260,1273,1,0,0,0,1261,1263,5,8,0,0,1262,1261,
  	1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,0,0,0,1264,1266,5,81,0,0,1265,1267,
  	5,8,0,0,1266,1265,1,0,0,0,1266,1267,1,0,0,0,1267,1268,1,0,0,0,1268,1270,
  	5,81,0,0,1269,1271,5,8,0,0,1270,1269,1,0,0,0,1270,1271,1,0,0,0,1271,1273,
  	1,0,0,0,1272,1253,1,0,0,0,1272,1255,1,0,0,0,1272,1262,1,0,0,0,1273,71,
  	1,0,0,0,1274,1277,3,94,47,0,1275,1277,3,92,46,0,1276,1274,1,0,0,0,1276,
  	1275,1,0,0,0,1277,73,1,0,0,0,1278,1280,5,124,0,0,1279,1278,1,0,0,0,1280,
  	1283,1,0,0,0,1281,1279,1,0,0,0,1281,1282,1,0,0,0,1282,1284,1,0,0,0,1283,
  	1281,1,0,0,0,1284,1288,3,86,43,0,1285,1287,5,124,0,0,1286,1285,1,0,0,
  	0,1287,1290,1,0,0,0,1288,1286,1,0,0,0,1288,1289,1,0,0,0,1289,75,1,0,0,
  	0,1290,1288,1,0,0,0,1291,1293,3,84,42,0,1292,1291,1,0,0,0,1292,1293,1,
  	0,0,0,1293,1295,1,0,0,0,1294,1296,5,0,0,1,1295,1294,1,0,0,0,1295,1296,
  	1,0,0,0,1296,77,1,0,0,0,1297,1298,3,88,44,0,1298,79,1,0,0,0,1299,1303,
  	3,280,140,0,1300,1302,5,124,0,0,1301,1300,1,0,0,0,1302,1305,1,0,0,0,1303,
  	1301,1,0,0,0,1303,1304,1,0,0,0,1304,1307,1,0,0,0,1305,1303,1,0,0,0,1306,
  	1308,5,0,0,1,1307,1306,1,0,0,0,1307,1308,1,0,0,0,1308,81,1,0,0,0,1309,
  	1311,5,78,0,0,1310,1312,3,476,238,0,1311,1310,1,0,0,0,1311,1312,1,0,0,
  	0,1312,1313,1,0,0,0,1313,1314,5,79,0,0,1314,1315,5,108,0,0,1315,1319,
  	3,282,141,0,1316,1318,5,124,0,0,1317,1316,1,0,0,0,1318,1321,1,0,0,0,1319,
  	1317,1,0,0,0,1319,1320,1,0,0,0,1320,1323,1,0,0,0,1321,1319,1,0,0,0,1322,
  	1324,5,0,0,1,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,83,1,0,0,0,1325,
  	1328,3,86,43,0,1326,1328,5,124,0,0,1327,1325,1,0,0,0,1327,1326,1,0,0,
  	0,1328,1329,1,0,0,0,1329,1327,1,0,0,0,1329,1330,1,0,0,0,1330,85,1,0,0,
  	0,1331,1334,3,94,47,0,1332,1334,3,90,45,0,1333,1331,1,0,0,0,1333,1332,
  	1,0,0,0,1334,87,1,0,0,0,1335,1336,3,94,47,0,1336,1337,5,124,0,0,1337,
  	1341,1,0,0,0,1338,1341,3,90,45,0,1339,1341,5,124,0,0,1340,1335,1,0,0,
  	0,1340,1338,1,0,0,0,1340,1339,1,0,0,0,1341,89,1,0,0,0,1342,1347,3,92,
  	46,0,1343,1344,5,82,0,0,1344,1346,3,92,46,0,1345,1343,1,0,0,0,1346,1349,
  	1,0,0,0,1347,1345,1,0,0,0,1347,1348,1,0,0,0,1348,1351,1,0,0,0,1349,1347,
  	1,0,0,0,1350,1352,5,82,0,0,1351,1350,1,0,0,0,1351,1352,1,0,0,0,1352,1365,
  	1,0,0,0,1353,1355,5,124,0,0,1354,1353,1,0,0,0,1355,1356,1,0,0,0,1356,
  	1354,1,0,0,0,1356,1357,1,0,0,0,1357,1366,1,0,0,0,1358,1360,5,124,0,0,
  	1359,1358,1,0,0,0,1360,1363,1,0,0,0,1361,1359,1,0,0,0,1361,1362,1,0,0,
  	0,1362,1364,1,0,0,0,1363,1361,1,0,0,0,1364,1366,5,0,0,1,1365,1354,1,0,
  	0,0,1365,1361,1,0,0,0,1366,91,1,0,0,0,1367,1382,3,96,48,0,1368,1382,3,
  	270,135,0,1369,1382,3,286,143,0,1370,1382,3,102,51,0,1371,1382,3,116,
  	58,0,1372,1382,3,104,52,0,1373,1382,5,41,0,0,1374,1382,3,110,55,0,1375,
  	1382,3,112,56,0,1376,1382,3,114,57,0,1377,1382,5,17,0,0,1378,1382,5,20,
  	0,0,1379,1382,3,106,53,0,1380,1382,3,108,54,0,1381,1367,1,0,0,0,1381,
  	1368,1,0,0,0,1381,1369,1,0,0,0,1381,1370,1,0,0,0,1381,1371,1,0,0,0,1381,
  	1372,1,0,0,0,1381,1373,1,0,0,0,1381,1374,1,0,0,0,1381,1375,1,0,0,0,1381,
  	1376,1,0,0,0,1381,1377,1,0,0,0,1381,1378,1,0,0,0,1381,1379,1,0,0,0,1381,
  	1380,1,0,0,0,1382,93,1,0,0,0,1383,1392,3,142,71,0,1384,1392,3,176,88,
  	0,1385,1392,3,138,69,0,1386,1392,3,186,93,0,1387,1392,3,184,92,0,1388,
  	1392,3,190,95,0,1389,1392,3,182,91,0,1390,1392,3,198,99,0,1391,1383,1,
  	0,0,0,1391,1384,1,0,0,0,1391,1385,1,0,0,0,1391,1386,1,0,0,0,1391,1387,
  	1,0,0,0,1391,1388,1,0,0,0,1391,1389,1,0,0,0,1391,1390,1,0,0,0,1392,95,
  	1,0,0,0,1393,1394,3,480,240,0,1394,1395,5,81,0,0,1395,1398,3,282,141,
  	0,1396,1397,5,84,0,0,1397,1399,3,98,49,0,1398,1396,1,0,0,0,1398,1399,
  	1,0,0,0,1399,1431,1,0,0,0,1400,1401,5,78,0,0,1401,1402,3,464,232,0,1402,
  	1403,5,79,0,0,1403,1406,1,0,0,0,1404,1406,3,466,233,0,1405,1400,1,0,0,
  	0,1405,1404,1,0,0,0,1406,1407,1,0,0,0,1407,1408,5,81,0,0,1408,1411,3,
  	282,141,0,1409,1410,5,84,0,0,1410,1412,3,98,49,0,1411,1409,1,0,0,0,1411,
  	1412,1,0,0,0,1412,1431,1,0,0,0,1413,1414,3,452,226,0,1414,1415,5,84,0,
  	0,1415,1417,1,0,0,0,1416,1413,1,0,0,0,1417,1418,1,0,0,0,1418,1416,1,0,
  	0,0,1418,1419,1,0,0,0,1419,1422,1,0,0,0,1420,1423,3,284,142,0,1421,1423,
  	3,286,143,0,1422,1420,1,0,0,0,1422,1421,1,0,0,0,1423,1431,1,0,0,0,1424,
  	1425,3,464,232,0,1425,1428,3,100,50,0,1426,1429,3,284,142,0,1427,1429,
  	3,286,143,0,1428,1426,1,0,0,0,1428,1427,1,0,0,0,1429,1431,1,0,0,0,1430,
  	1393,1,0,0,0,1430,1405,1,0,0,0,1430,1416,1,0,0,0,1430,1424,1,0,0,0,1431,
  	97,1,0,0,0,1432,1435,3,284,142,0,1433,1435,3,286,143,0,1434,1432,1,0,
  	0,0,1434,1433,1,0,0,0,1435,99,1,0,0,0,1436,1437,7,2,0,0,1437,101,1,0,
  	0,0,1438,1440,5,43,0,0,1439,1441,3,286,143,0,1440,1439,1,0,0,0,1440,1441,
  	1,0,0,0,1441,103,1,0,0,0,1442,1443,5,42,0,0,1443,1446,3,282,141,0,1444,
  	1445,5,29,0,0,1445,1447,3,282,141,0,1446,1444,1,0,0,0,1446,1447,1,0,0,
  	0,1447,1450,1,0,0,0,1448,1450,5,42,0,0,1449,1442,1,0,0,0,1449,1448,1,
  	0,0,0,1450,105,1,0,0,0,1451,1452,5,30,0,0,1452,1457,3,480,240,0,1453,
  	1454,5,80,0,0,1454,1456,3,480,240,0,1455,1453,1,0,0,0,1456,1459,1,0,0,
  	0,1457,1455,1,0,0,0,1457,1458,1,0,0,0,1458,107,1,0,0,0,1459,1457,1,0,
  	0,0,1460,1461,5,38,0,0,1461,1466,3,480,240,0,1462,1463,5,80,0,0,1463,
  	1465,3,480,240,0,1464,1462,1,0,0,0,1465,1468,1,0,0,0,1466,1464,1,0,0,
  	0,1466,1467,1,0,0,0,1467,109,1,0,0,0,1468,1466,1,0,0,0,1469,1470,5,22,
  	0,0,1470,1471,3,470,235,0,1471,111,1,0,0,0,1472,1473,3,284,142,0,1473,
  	113,1,0,0,0,1474,1475,5,14,0,0,1475,1478,3,282,141,0,1476,1477,5,80,0,
  	0,1477,1479,3,282,141,0,1478,1476,1,0,0,0,1478,1479,1,0,0,0,1479,115,
  	1,0,0,0,1480,1483,3,118,59,0,1481,1483,3,120,60,0,1482,1480,1,0,0,0,1482,
  	1481,1,0,0,0,1483,117,1,0,0,0,1484,1485,5,32,0,0,1485,1486,3,128,64,0,
  	1486,119,1,0,0,0,1487,1491,5,29,0,0,1488,1490,7,3,0,0,1489,1488,1,0,0,
  	0,1490,1493,1,0,0,0,1491,1489,1,0,0,0,1491,1492,1,0,0,0,1492,1494,1,0,
  	0,0,1493,1491,1,0,0,0,1494,1495,3,132,66,0,1495,1496,5,32,0,0,1496,1497,
  	3,122,61,0,1497,1507,1,0,0,0,1498,1500,5,29,0,0,1499,1501,7,3,0,0,1500,
  	1499,1,0,0,0,1501,1502,1,0,0,0,1502,1500,1,0,0,0,1502,1503,1,0,0,0,1503,
  	1504,1,0,0,0,1504,1505,5,32,0,0,1505,1507,3,122,61,0,1506,1487,1,0,0,
  	0,1506,1498,1,0,0,0,1507,121,1,0,0,0,1508,1509,5,78,0,0,1509,1511,3,124,
  	62,0,1510,1512,5,80,0,0,1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,1513,
  	1,0,0,0,1513,1514,5,79,0,0,1514,1518,1,0,0,0,1515,1518,3,124,62,0,1516,
  	1518,5,77,0,0,1517,1508,1,0,0,0,1517,1515,1,0,0,0,1517,1516,1,0,0,0,1518,
  	123,1,0,0,0,1519,1524,3,126,63,0,1520,1521,5,80,0,0,1521,1523,3,126,63,
  	0,1522,1520,1,0,0,0,1523,1526,1,0,0,0,1524,1522,1,0,0,0,1524,1525,1,0,
  	0,0,1525,125,1,0,0,0,1526,1524,1,0,0,0,1527,1530,3,480,240,0,1528,1529,
  	5,13,0,0,1529,1531,3,480,240,0,1530,1528,1,0,0,0,1530,1531,1,0,0,0,1531,
  	127,1,0,0,0,1532,1537,3,130,65,0,1533,1534,5,80,0,0,1534,1536,3,130,65,
  	0,1535,1533,1,0,0,0,1536,1539,1,0,0,0,1537,1535,1,0,0,0,1537,1538,1,0,
  	0,0,1538,129,1,0,0,0,1539,1537,1,0,0,0,1540,1543,3,132,66,0,1541,1542,
  	5,13,0,0,1542,1544,3,480,240,0,1543,1541,1,0,0,0,1543,1544,1,0,0,0,1544,
  	131,1,0,0,0,1545,1546,6,66,-1,0,1546,1547,3,480,240,0,1547,1553,1,0,0,
  	0,1548,1549,10,2,0,0,1549,1550,5,76,0,0,1550,1552,3,480,240,0,1551,1548,
  	1,0,0,0,1552,1555,1,0,0,0,1553,1551,1,0,0,0,1553,1554,1,0,0,0,1554,133,
  	1,0,0,0,1555,1553,1,0,0,0,1556,1557,5,124,0,0,1557,1558,5,1,0,0,1558,
  	1559,3,84,42,0,1559,1560,5,2,0,0,1560,1563,1,0,0,0,1561,1563,3,90,45,
  	0,1562,1556,1,0,0,0,1562,1561,1,0,0,0,1563,135,1,0,0,0,1564,1565,5,107,
  	0,0,1565,1566,3,296,148,0,1566,1567,5,124,0,0,1567,1569,1,0,0,0,1568,
  	1564,1,0,0,0,1569,1570,1,0,0,0,1570,1568,1,0,0,0,1570,1571,1,0,0,0,1571,
  	137,1,0,0,0,1572,1574,3,136,68,0,1573,1572,1,0,0,0,1573,1574,1,0,0,0,
  	1574,1575,1,0,0,0,1575,1576,3,140,70,0,1576,139,1,0,0,0,1577,1578,5,19,
  	0,0,1578,1580,3,480,240,0,1579,1581,3,272,136,0,1580,1579,1,0,0,0,1580,
  	1581,1,0,0,0,1581,1587,1,0,0,0,1582,1584,5,78,0,0,1583,1585,3,438,219,
  	0,1584,1583,1,0,0,0,1584,1585,1,0,0,0,1585,1586,1,0,0,0,1586,1588,5,79,
  	0,0,1587,1582,1,0,0,0,1587,1588,1,0,0,0,1588,1589,1,0,0,0,1589,1590,5,
  	81,0,0,1590,1591,3,134,67,0,1591,141,1,0,0,0,1592,1594,3,136,68,0,1593,
  	1592,1,0,0,0,1593,1594,1,0,0,0,1594,1595,1,0,0,0,1595,1596,3,144,72,0,
  	1596,143,1,0,0,0,1597,1599,5,15,0,0,1598,1597,1,0,0,0,1598,1599,1,0,0,
  	0,1599,1600,1,0,0,0,1600,1601,5,21,0,0,1601,1603,3,480,240,0,1602,1604,
  	3,272,136,0,1603,1602,1,0,0,0,1603,1604,1,0,0,0,1604,1605,1,0,0,0,1605,
  	1607,5,78,0,0,1606,1608,3,146,73,0,1607,1606,1,0,0,0,1607,1608,1,0,0,
  	0,1608,1609,1,0,0,0,1609,1612,5,79,0,0,1610,1611,5,108,0,0,1611,1613,
  	3,282,141,0,1612,1610,1,0,0,0,1612,1613,1,0,0,0,1613,1614,1,0,0,0,1614,
  	1616,5,81,0,0,1615,1617,3,478,239,0,1616,1615,1,0,0,0,1616,1617,1,0,0,
  	0,1617,1618,1,0,0,0,1618,1619,3,134,67,0,1619,145,1,0,0,0,1620,1621,3,
  	148,74,0,1621,147,1,0,0,0,1622,1626,3,150,75,0,1623,1625,3,158,79,0,1624,
  	1623,1,0,0,0,1625,1628,1,0,0,0,1626,1624,1,0,0,0,1626,1627,1,0,0,0,1627,
  	1632,1,0,0,0,1628,1626,1,0,0,0,1629,1631,3,162,81,0,1630,1629,1,0,0,0,
  	1631,1634,1,0,0,0,1632,1630,1,0,0,0,1632,1633,1,0,0,0,1633,1636,1,0,0,
  	0,1634,1632,1,0,0,0,1635,1637,3,154,77,0,1636,1635,1,0,0,0,1636,1637,
  	1,0,0,0,1637,1672,1,0,0,0,1638,1642,3,152,76,0,1639,1641,3,162,81,0,1640,
  	1639,1,0,0,0,1641,1644,1,0,0,0,1642,1640,1,0,0,0,1642,1643,1,0,0,0,1643,
  	1646,1,0,0,0,1644,1642,1,0,0,0,1645,1647,3,154,77,0,1646,1645,1,0,0,0,
  	1646,1647,1,0,0,0,1647,1672,1,0,0,0,1648,1650,3,158,79,0,1649,1648,1,
  	0,0,0,1650,1651,1,0,0,0,1651,1649,1,0,0,0,1651,1652,1,0,0,0,1652,1656,
  	1,0,0,0,1653,1655,3,162,81,0,1654,1653,1,0,0,0,1655,1658,1,0,0,0,1656,
  	1654,1,0,0,0,1656,1657,1,0,0,0,1657,1660,1,0,0,0,1658,1656,1,0,0,0,1659,
  	1661,3,154,77,0,1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,1672,1,0,0,0,
  	1662,1664,3,162,81,0,1663,1662,1,0,0,0,1664,1665,1,0,0,0,1665,1663,1,
  	0,0,0,1665,1666,1,0,0,0,1666,1668,1,0,0,0,1667,1669,3,154,77,0,1668,1667,
  	1,0,0,0,1668,1669,1,0,0,0,1669,1672,1,0,0,0,1670,1672,3,154,77,0,1671,
  	1622,1,0,0,0,1671,1638,1,0,0,0,1671,1649,1,0,0,0,1671,1663,1,0,0,0,1671,
  	1670,1,0,0,0,1672,149,1,0,0,0,1673,1675,3,158,79,0,1674,1673,1,0,0,0,
  	1675,1676,1,0,0,0,1676,1674,1,0,0,0,1676,1677,1,0,0,0,1677,1678,1,0,0,
  	0,1678,1680,5,94,0,0,1679,1681,5,80,0,0,1680,1679,1,0,0,0,1680,1681,1,
  	0,0,0,1681,151,1,0,0,0,1682,1684,3,158,79,0,1683,1682,1,0,0,0,1684,1687,
  	1,0,0,0,1685,1683,1,0,0,0,1685,1686,1,0,0,0,1686,1689,1,0,0,0,1687,1685,
  	1,0,0,0,1688,1690,3,162,81,0,1689,1688,1,0,0,0,1690,1691,1,0,0,0,1691,
  	1689,1,0,0,0,1691,1692,1,0,0,0,1692,1693,1,0,0,0,1693,1695,5,94,0,0,1694,
  	1696,5,80,0,0,1695,1694,1,0,0,0,1695,1696,1,0,0,0,1696,153,1,0,0,0,1697,
  	1698,5,77,0,0,1698,1702,3,158,79,0,1699,1701,3,164,82,0,1700,1699,1,0,
  	0,0,1701,1704,1,0,0,0,1702,1700,1,0,0,0,1702,1703,1,0,0,0,1703,1706,1,
  	0,0,0,1704,1702,1,0,0,0,1705,1707,3,156,78,0,1706,1705,1,0,0,0,1706,1707,
  	1,0,0,0,1707,1731,1,0,0,0,1708,1709,5,77,0,0,1709,1713,3,160,80,0,1710,
  	1712,3,164,82,0,1711,1710,1,0,0,0,1712,1715,1,0,0,0,1713,1711,1,0,0,0,
  	1713,1714,1,0,0,0,1714,1717,1,0,0,0,1715,1713,1,0,0,0,1716,1718,3,156,
  	78,0,1717,1716,1,0,0,0,1717,1718,1,0,0,0,1718,1731,1,0,0,0,1719,1720,
  	5,77,0,0,1720,1722,5,80,0,0,1721,1723,3,164,82,0,1722,1721,1,0,0,0,1723,
  	1724,1,0,0,0,1724,1722,1,0,0,0,1724,1725,1,0,0,0,1725,1727,1,0,0,0,1726,
  	1728,3,156,78,0,1727,1726,1,0,0,0,1727,1728,1,0,0,0,1728,1731,1,0,0,0,
  	1729,1731,3,156,78,0,1730,1697,1,0,0,0,1730,1708,1,0,0,0,1730,1719,1,
  	0,0,0,1730,1729,1,0,0,0,1731,155,1,0,0,0,1732,1733,5,83,0,0,1733,1734,
  	3,158,79,0,1734,157,1,0,0,0,1735,1736,3,166,83,0,1736,1737,5,80,0,0,1737,
  	1740,1,0,0,0,1738,1740,3,166,83,0,1739,1735,1,0,0,0,1739,1738,1,0,0,0,
  	1740,159,1,0,0,0,1741,1742,3,168,84,0,1742,1743,5,80,0,0,1743,1746,1,
  	0,0,0,1744,1746,3,168,84,0,1745,1741,1,0,0,0,1745,1744,1,0,0,0,1746,161,
  	1,0,0,0,1747,1748,3,166,83,0,1748,1749,3,174,87,0,1749,1750,5,80,0,0,
  	1750,1755,1,0,0,0,1751,1752,3,166,83,0,1752,1753,3,174,87,0,1753,1755,
  	1,0,0,0,1754,1747,1,0,0,0,1754,1751,1,0,0,0,1755,163,1,0,0,0,1756,1758,
  	3,166,83,0,1757,1759,3,174,87,0,1758,1757,1,0,0,0,1758,1759,1,0,0,0,1759,
  	1760,1,0,0,0,1760,1761,5,80,0,0,1761,1767,1,0,0,0,1762,1764,3,166,83,
  	0,1763,1765,3,174,87,0,1764,1763,1,0,0,0,1764,1765,1,0,0,0,1765,1767,
  	1,0,0,0,1766,1756,1,0,0,0,1766,1762,1,0,0,0,1767,165,1,0,0,0,1768,1770,
  	3,480,240,0,1769,1771,3,170,85,0,1770,1769,1,0,0,0,1770,1771,1,0,0,0,
  	1771,167,1,0,0,0,1772,1773,3,480,240,0,1773,1774,3,172,86,0,1774,169,
  	1,0,0,0,1775,1776,5,81,0,0,1776,1777,3,282,141,0,1777,171,1,0,0,0,1778,
  	1779,5,81,0,0,1779,1780,3,288,144,0,1780,173,1,0,0,0,1781,1782,5,84,0,
  	0,1782,1783,3,282,141,0,1783,175,1,0,0,0,1784,1785,5,31,0,0,1785,1786,
  	3,296,148,0,1786,1787,5,81,0,0,1787,1788,3,134,67,0,1788,1789,3,178,89,
  	0,1789,1798,1,0,0,0,1790,1791,5,31,0,0,1791,1792,3,296,148,0,1792,1793,
  	5,81,0,0,1793,1795,3,134,67,0,1794,1796,3,180,90,0,1795,1794,1,0,0,0,
  	1795,1796,1,0,0,0,1796,1798,1,0,0,0,1797,1784,1,0,0,0,1797,1790,1,0,0,
  	0,1798,177,1,0,0,0,1799,1800,5,23,0,0,1800,1801,3,296,148,0,1801,1802,
  	5,81,0,0,1802,1803,3,134,67,0,1803,1804,3,178,89,0,1804,1813,1,0,0,0,
  	1805,1806,5,23,0,0,1806,1807,3,296,148,0,1807,1808,5,81,0,0,1808,1810,
  	3,134,67,0,1809,1811,3,180,90,0,1810,1809,1,0,0,0,1810,1811,1,0,0,0,1811,
  	1813,1,0,0,0,1812,1799,1,0,0,0,1812,1805,1,0,0,0,1813,179,1,0,0,0,1814,
  	1815,5,24,0,0,1815,1816,5,81,0,0,1816,1817,3,134,67,0,1817,181,1,0,0,
  	0,1818,1819,5,47,0,0,1819,1820,3,296,148,0,1820,1821,5,81,0,0,1821,1823,
  	3,134,67,0,1822,1824,3,180,90,0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,
  	183,1,0,0,0,1825,1826,5,28,0,0,1826,1827,3,452,226,0,1827,1828,5,33,0,
  	0,1828,1829,3,286,143,0,1829,1830,5,81,0,0,1830,1832,3,134,67,0,1831,
  	1833,3,180,90,0,1832,1831,1,0,0,0,1832,1833,1,0,0,0,1833,1845,1,0,0,0,
  	1834,1835,5,15,0,0,1835,1836,5,28,0,0,1836,1837,3,452,226,0,1837,1838,
  	5,33,0,0,1838,1839,3,286,143,0,1839,1840,5,81,0,0,1840,1842,3,134,67,
  	0,1841,1843,3,180,90,0,1842,1841,1,0,0,0,1842,1843,1,0,0,0,1843,1845,
  	1,0,0,0,1844,1825,1,0,0,0,1844,1834,1,0,0,0,1845,185,1,0,0,0,1846,1847,
  	5,49,0,0,1847,1848,5,78,0,0,1848,1853,3,188,94,0,1849,1850,5,80,0,0,1850,
  	1852,3,188,94,0,1851,1849,1,0,0,0,1852,1855,1,0,0,0,1853,1851,1,0,0,0,
  	1853,1854,1,0,0,0,1854,1857,1,0,0,0,1855,1853,1,0,0,0,1856,1858,5,80,
  	0,0,1857,1856,1,0,0,0,1857,1858,1,0,0,0,1858,1859,1,0,0,0,1859,1860,5,
  	79,0,0,1860,1861,5,81,0,0,1861,1862,3,134,67,0,1862,1907,1,0,0,0,1863,
  	1864,5,49,0,0,1864,1869,3,188,94,0,1865,1866,5,80,0,0,1866,1868,3,188,
  	94,0,1867,1865,1,0,0,0,1868,1871,1,0,0,0,1869,1867,1,0,0,0,1869,1870,
  	1,0,0,0,1870,1872,1,0,0,0,1871,1869,1,0,0,0,1872,1873,5,81,0,0,1873,1874,
  	3,134,67,0,1874,1907,1,0,0,0,1875,1876,5,15,0,0,1876,1877,5,49,0,0,1877,
  	1878,5,78,0,0,1878,1883,3,188,94,0,1879,1880,5,80,0,0,1880,1882,3,188,
  	94,0,1881,1879,1,0,0,0,1882,1885,1,0,0,0,1883,1881,1,0,0,0,1883,1884,
  	1,0,0,0,1884,1887,1,0,0,0,1885,1883,1,0,0,0,1886,1888,5,80,0,0,1887,1886,
  	1,0,0,0,1887,1888,1,0,0,0,1888,1889,1,0,0,0,1889,1890,5,79,0,0,1890,1891,
  	5,81,0,0,1891,1892,3,134,67,0,1892,1907,1,0,0,0,1893,1894,5,15,0,0,1894,
  	1895,5,49,0,0,1895,1900,3,188,94,0,1896,1897,5,80,0,0,1897,1899,3,188,
  	94,0,1898,1896,1,0,0,0,1899,1902,1,0,0,0,1900,1898,1,0,0,0,1900,1901,
  	1,0,0,0,1901,1903,1,0,0,0,1902,1900,1,0,0,0,1903,1904,5,81,0,0,1904,1905,
  	3,134,67,0,1905,1907,1,0,0,0,1906,1846,1,0,0,0,1906,1863,1,0,0,0,1906,
  	1875,1,0,0,0,1906,1893,1,0,0,0,1907,187,1,0,0,0,1908,1909,3,282,141,0,
  	1909,1910,5,13,0,0,1910,1911,3,458,229,0,1911,1914,1,0,0,0,1912,1914,
  	3,282,141,0,1913,1908,1,0,0,0,1913,1912,1,0,0,0,1914,189,1,0,0,0,1915,
  	1916,5,45,0,0,1916,1917,5,81,0,0,1917,1918,3,134,67,0,1918,1919,3,196,
  	98,0,1919,1949,1,0,0,0,1920,1921,5,45,0,0,1921,1922,5,81,0,0,1922,1924,
  	3,134,67,0,1923,1925,3,192,96,0,1924,1923,1,0,0,0,1925,1926,1,0,0,0,1926,
  	1924,1,0,0,0,1926,1927,1,0,0,0,1927,1929,1,0,0,0,1928,1930,3,180,90,0,
  	1929,1928,1,0,0,0,1929,1930,1,0,0,0,1930,1932,1,0,0,0,1931,1933,3,196,
  	98,0,1932,1931,1,0,0,0,1932,1933,1,0,0,0,1933,1949,1,0,0,0,1934,1935,
  	5,45,0,0,1935,1936,5,81,0,0,1936,1938,3,134,67,0,1937,1939,3,194,97,0,
  	1938,1937,1,0,0,0,1939,1940,1,0,0,0,1940,1938,1,0,0,0,1940,1941,1,0,0,
  	0,1941,1943,1,0,0,0,1942,1944,3,180,90,0,1943,1942,1,0,0,0,1943,1944,
  	1,0,0,0,1944,1946,1,0,0,0,1945,1947,3,196,98,0,1946,1945,1,0,0,0,1946,
  	1947,1,0,0,0,1947,1949,1,0,0,0,1948,1915,1,0,0,0,1948,1920,1,0,0,0,1948,
  	1934,1,0,0,0,1949,191,1,0,0,0,1950,1951,5,25,0,0,1951,1954,3,282,141,
  	0,1952,1953,5,13,0,0,1953,1955,3,480,240,0,1954,1952,1,0,0,0,1954,1955,
  	1,0,0,0,1955,1956,1,0,0,0,1956,1957,5,81,0,0,1957,1958,3,134,67,0,1958,
  	1963,1,0,0,0,1959,1960,5,25,0,0,1960,1961,5,81,0,0,1961,1963,3,134,67,
  	0,1962,1950,1,0,0,0,1962,1959,1,0,0,0,1963,193,1,0,0,0,1964,1965,5,25,
  	0,0,1965,1966,5,77,0,0,1966,1969,3,282,141,0,1967,1968,5,13,0,0,1968,
  	1970,3,480,240,0,1969,1967,1,0,0,0,1969,1970,1,0,0,0,1970,1971,1,0,0,
  	0,1971,1972,5,81,0,0,1972,1973,3,134,67,0,1973,195,1,0,0,0,1974,1975,
  	5,27,0,0,1975,1976,5,81,0,0,1976,1977,3,134,67,0,1977,197,1,0,0,0,1978,
  	1979,5,36,0,0,1979,1980,3,200,100,0,1980,1981,5,81,0,0,1981,1982,5,124,
  	0,0,1982,1984,5,1,0,0,1983,1985,3,202,101,0,1984,1983,1,0,0,0,1985,1986,
  	1,0,0,0,1986,1984,1,0,0,0,1986,1987,1,0,0,0,1987,1988,1,0,0,0,1988,1989,
  	5,2,0,0,1989,199,1,0,0,0,1990,1991,3,292,146,0,1991,1993,5,80,0,0,1992,
  	1994,3,290,145,0,1993,1992,1,0,0,0,1993,1994,1,0,0,0,1994,1997,1,0,0,
  	0,1995,1997,3,296,148,0,1996,1990,1,0,0,0,1996,1995,1,0,0,0,1997,201,
  	1,0,0,0,1998,1999,5,18,0,0,1999,2001,3,206,103,0,2000,2002,3,204,102,
  	0,2001,2000,1,0,0,0,2001,2002,1,0,0,0,2002,2003,1,0,0,0,2003,2004,5,81,
  	0,0,2004,2005,3,134,67,0,2005,203,1,0,0,0,2006,2007,5,31,0,0,2007,2008,
  	3,296,148,0,2008,205,1,0,0,0,2009,2012,3,246,123,0,2010,2012,3,208,104,
  	0,2011,2009,1,0,0,0,2011,2010,1,0,0,0,2012,207,1,0,0,0,2013,2016,3,210,
  	105,0,2014,2016,3,212,106,0,2015,2013,1,0,0,0,2015,2014,1,0,0,0,2016,
  	209,1,0,0,0,2017,2018,3,212,106,0,2018,2019,5,13,0,0,2019,2020,3,232,
  	116,0,2020,211,1,0,0,0,2021,2026,3,214,107,0,2022,2023,5,87,0,0,2023,
  	2025,3,214,107,0,2024,2022,1,0,0,0,2025,2028,1,0,0,0,2026,2024,1,0,0,
  	0,2026,2027,1,0,0,0,2027,213,1,0,0,0,2028,2026,1,0,0,0,2029,2038,3,216,
  	108,0,2030,2038,3,230,115,0,2031,2038,3,234,117,0,2032,2038,3,236,118,
  	0,2033,2038,3,242,121,0,2034,2038,3,244,122,0,2035,2038,3,254,127,0,2036,
  	2038,3,262,131,0,2037,2029,1,0,0,0,2037,2030,1,0,0,0,2037,2031,1,0,0,
  	0,2037,2032,1,0,0,0,2037,2033,1,0,0,0,2037,2034,1,0,0,0,2037,2035,1,0,
  	0,0,2037,2036,1,0,0,0,2038,215,1,0,0,0,2039,2046,3,222,111,0,2040,2046,
  	3,220,110,0,2041,2046,3,410,205,0,2042,2046,5,37,0,0,2043,2046,5,44,0,
  	0,2044,2046,5,26,0,0,2045,2039,1,0,0,0,2045,2040,1,0,0,0,2045,2041,1,
  	0,0,0,2045,2042,1,0,0,0,2045,2043,1,0,0,0,2045,2044,1,0,0,0,2046,217,
  	1,0,0,0,2047,2054,3,222,111,0,2048,2054,3,220,110,0,2049,2054,3,410,205,
  	0,2050,2054,5,37,0,0,2051,2054,5,44,0,0,2052,2054,5,26,0,0,2053,2047,
  	1,0,0,0,2053,2048,1,0,0,0,2053,2049,1,0,0,0,2053,2050,1,0,0,0,2053,2051,
  	1,0,0,0,2053,2052,1,0,0,0,2054,219,1,0,0,0,2055,2056,3,224,112,0,2056,
  	2057,5,92,0,0,2057,2058,3,228,114,0,2058,2064,1,0,0,0,2059,2060,3,224,
  	112,0,2060,2061,5,93,0,0,2061,2062,3,228,114,0,2062,2064,1,0,0,0,2063,
  	2055,1,0,0,0,2063,2059,1,0,0,0,2064,221,1,0,0,0,2065,2069,5,8,0,0,2066,
  	2067,5,93,0,0,2067,2069,5,8,0,0,2068,2065,1,0,0,0,2068,2066,1,0,0,0,2069,
  	223,1,0,0,0,2070,2074,3,226,113,0,2071,2072,5,93,0,0,2072,2074,3,226,
  	113,0,2073,2070,1,0,0,0,2073,2071,1,0,0,0,2074,225,1,0,0,0,2075,2076,
  	5,8,0,0,2076,227,1,0,0,0,2077,2078,5,8,0,0,2078,229,1,0,0,0,2079,2080,
  	3,232,116,0,2080,231,1,0,0,0,2081,2082,3,480,240,0,2082,233,1,0,0,0,2083,
  	2084,5,127,0,0,2084,235,1,0,0,0,2085,2086,3,238,119,0,2086,237,1,0,0,
  	0,2087,2088,3,240,120,0,2088,2089,5,76,0,0,2089,2090,3,480,240,0,2090,
  	239,1,0,0,0,2091,2092,6,120,-1,0,2092,2093,3,480,240,0,2093,2099,1,0,
  	0,0,2094,2095,10,2,0,0,2095,2096,5,76,0,0,2096,2098,3,480,240,0,2097,
  	2094,1,0,0,0,2098,2101,1,0,0,0,2099,2097,1,0,0,0,2099,2100,1,0,0,0,2100,
  	241,1,0,0,0,2101,2099,1,0,0,0,2102,2103,5,78,0,0,2103,2104,3,208,104,
  	0,2104,2105,5,79,0,0,2105,243,1,0,0,0,2106,2108,5,85,0,0,2107,2109,3,
  	248,124,0,2108,2107,1,0,0,0,2108,2109,1,0,0,0,2109,2110,1,0,0,0,2110,
  	2117,5,86,0,0,2111,2113,5,78,0,0,2112,2114,3,246,123,0,2113,2112,1,0,
  	0,0,2113,2114,1,0,0,0,2114,2115,1,0,0,0,2115,2117,5,79,0,0,2116,2106,
  	1,0,0,0,2116,2111,1,0,0,0,2117,245,1,0,0,0,2118,2119,3,250,125,0,2119,
  	2121,5,80,0,0,2120,2122,3,248,124,0,2121,2120,1,0,0,0,2121,2122,1,0,0,
  	0,2122,247,1,0,0,0,2123,2128,3,250,125,0,2124,2125,5,80,0,0,2125,2127,
  	3,250,125,0,2126,2124,1,0,0,0,2127,2130,1,0,0,0,2128,2126,1,0,0,0,2128,
  	2129,1,0,0,0,2129,2132,1,0,0,0,2130,2128,1,0,0,0,2131,2133,5,80,0,0,2132,
  	2131,1,0,0,0,2132,2133,1,0,0,0,2133,249,1,0,0,0,2134,2137,3,252,126,0,
  	2135,2137,3,208,104,0,2136,2134,1,0,0,0,2136,2135,1,0,0,0,2137,251,1,
  	0,0,0,2138,2139,5,77,0,0,2139,2143,3,232,116,0,2140,2141,5,77,0,0,2141,
  	2143,3,234,117,0,2142,2138,1,0,0,0,2142,2140,1,0,0,0,2143,253,1,0,0,0,
  	2144,2145,5,98,0,0,2145,2170,5,99,0,0,2146,2147,5,98,0,0,2147,2149,3,
  	260,130,0,2148,2150,5,80,0,0,2149,2148,1,0,0,0,2149,2150,1,0,0,0,2150,
  	2151,1,0,0,0,2151,2152,5,99,0,0,2152,2170,1,0,0,0,2153,2154,5,98,0,0,
  	2154,2155,3,256,128,0,2155,2156,5,80,0,0,2156,2158,3,260,130,0,2157,2159,
  	5,80,0,0,2158,2157,1,0,0,0,2158,2159,1,0,0,0,2159,2160,1,0,0,0,2160,2161,
  	5,99,0,0,2161,2170,1,0,0,0,2162,2163,5,98,0,0,2163,2165,3,256,128,0,2164,
  	2166,5,80,0,0,2165,2164,1,0,0,0,2165,2166,1,0,0,0,2166,2167,1,0,0,0,2167,
  	2168,5,99,0,0,2168,2170,1,0,0,0,2169,2144,1,0,0,0,2169,2146,1,0,0,0,2169,
  	2153,1,0,0,0,2169,2162,1,0,0,0,2170,255,1,0,0,0,2171,2176,3,258,129,0,
  	2172,2173,5,80,0,0,2173,2175,3,258,129,0,2174,2172,1,0,0,0,2175,2178,
  	1,0,0,0,2176,2174,1,0,0,0,2176,2177,1,0,0,0,2177,257,1,0,0,0,2178,2176,
  	1,0,0,0,2179,2182,3,218,109,0,2180,2182,3,238,119,0,2181,2179,1,0,0,0,
  	2181,2180,1,0,0,0,2182,2183,1,0,0,0,2183,2184,5,81,0,0,2184,2185,3,208,
  	104,0,2185,259,1,0,0,0,2186,2187,5,83,0,0,2187,2188,3,232,116,0,2188,
  	261,1,0,0,0,2189,2190,3,240,120,0,2190,2191,5,78,0,0,2191,2192,5,79,0,
  	0,2192,2220,1,0,0,0,2193,2194,3,240,120,0,2194,2195,5,78,0,0,2195,2197,
  	3,264,132,0,2196,2198,5,80,0,0,2197,2196,1,0,0,0,2197,2198,1,0,0,0,2198,
  	2199,1,0,0,0,2199,2200,5,79,0,0,2200,2220,1,0,0,0,2201,2202,3,240,120,
  	0,2202,2203,5,78,0,0,2203,2205,3,266,133,0,2204,2206,5,80,0,0,2205,2204,
  	1,0,0,0,2205,2206,1,0,0,0,2206,2207,1,0,0,0,2207,2208,5,79,0,0,2208,2220,
  	1,0,0,0,2209,2210,3,240,120,0,2210,2211,5,78,0,0,2211,2212,3,264,132,
  	0,2212,2213,5,80,0,0,2213,2215,3,266,133,0,2214,2216,5,80,0,0,2215,2214,
  	1,0,0,0,2215,2216,1,0,0,0,2216,2217,1,0,0,0,2217,2218,5,79,0,0,2218,2220,
  	1,0,0,0,2219,2189,1,0,0,0,2219,2193,1,0,0,0,2219,2201,1,0,0,0,2219,2209,
  	1,0,0,0,2220,263,1,0,0,0,2221,2226,3,208,104,0,2222,2223,5,80,0,0,2223,
  	2225,3,208,104,0,2224,2222,1,0,0,0,2225,2228,1,0,0,0,2226,2224,1,0,0,
  	0,2226,2227,1,0,0,0,2227,265,1,0,0,0,2228,2226,1,0,0,0,2229,2234,3,268,
  	134,0,2230,2231,5,80,0,0,2231,2233,3,268,134,0,2232,2230,1,0,0,0,2233,
  	2236,1,0,0,0,2234,2232,1,0,0,0,2234,2235,1,0,0,0,2235,267,1,0,0,0,2236,
  	2234,1,0,0,0,2237,2238,3,480,240,0,2238,2239,5,84,0,0,2239,2240,3,208,
  	104,0,2240,269,1,0,0,0,2241,2242,5,46,0,0,2242,2244,3,480,240,0,2243,
  	2245,3,272,136,0,2244,2243,1,0,0,0,2244,2245,1,0,0,0,2245,2246,1,0,0,
  	0,2246,2247,5,84,0,0,2247,2248,3,282,141,0,2248,271,1,0,0,0,2249,2250,
  	5,85,0,0,2250,2251,3,274,137,0,2251,2252,5,86,0,0,2252,273,1,0,0,0,2253,
  	2258,3,276,138,0,2254,2255,5,80,0,0,2255,2257,3,276,138,0,2256,2254,1,
  	0,0,0,2257,2260,1,0,0,0,2258,2256,1,0,0,0,2258,2259,1,0,0,0,2259,2262,
  	1,0,0,0,2260,2258,1,0,0,0,2261,2263,5,80,0,0,2262,2261,1,0,0,0,2262,2263,
  	1,0,0,0,2263,275,1,0,0,0,2264,2266,3,480,240,0,2265,2267,3,278,139,0,
  	2266,2265,1,0,0,0,2266,2267,1,0,0,0,2267,2273,1,0,0,0,2268,2269,5,77,
  	0,0,2269,2273,3,480,240,0,2270,2271,5,83,0,0,2271,2273,3,480,240,0,2272,
  	2264,1,0,0,0,2272,2268,1,0,0,0,2272,2270,1,0,0,0,2273,277,1,0,0,0,2274,
  	2275,5,81,0,0,2275,2276,3,282,141,0,2276,279,1,0,0,0,2277,2282,3,282,
  	141,0,2278,2279,5,80,0,0,2279,2281,3,282,141,0,2280,2278,1,0,0,0,2281,
  	2284,1,0,0,0,2282,2280,1,0,0,0,2282,2283,1,0,0,0,2283,2286,1,0,0,0,2284,
  	2282,1,0,0,0,2285,2287,5,80,0,0,2286,2285,1,0,0,0,2286,2287,1,0,0,0,2287,
  	281,1,0,0,0,2288,2289,3,298,149,0,2289,2290,5,31,0,0,2290,2291,3,298,
  	149,0,2291,2292,5,24,0,0,2292,2293,3,282,141,0,2293,2297,1,0,0,0,2294,
  	2297,3,298,149,0,2295,2297,3,356,178,0,2296,2288,1,0,0,0,2296,2294,1,
  	0,0,0,2296,2295,1,0,0,0,2297,283,1,0,0,0,2298,2299,5,50,0,0,2299,2300,
  	5,29,0,0,2300,2306,3,282,141,0,2301,2303,5,50,0,0,2302,2304,3,286,143,
  	0,2303,2302,1,0,0,0,2303,2304,1,0,0,0,2304,2306,1,0,0,0,2305,2298,1,0,
  	0,0,2305,2301,1,0,0,0,2306,285,1,0,0,0,2307,2312,3,288,144,0,2308,2309,
  	5,80,0,0,2309,2311,3,288,144,0,2310,2308,1,0,0,0,2311,2314,1,0,0,0,2312,
  	2310,1,0,0,0,2312,2313,1,0,0,0,2313,2316,1,0,0,0,2314,2312,1,0,0,0,2315,
  	2317,5,80,0,0,2316,2315,1,0,0,0,2316,2317,1,0,0,0,2317,287,1,0,0,0,2318,
  	2323,3,56,28,0,2319,2320,5,77,0,0,2320,2323,3,328,164,0,2321,2323,3,282,
  	141,0,2322,2318,1,0,0,0,2322,2319,1,0,0,0,2322,2321,1,0,0,0,2323,289,
  	1,0,0,0,2324,2329,3,292,146,0,2325,2326,5,80,0,0,2326,2328,3,292,146,
  	0,2327,2325,1,0,0,0,2328,2331,1,0,0,0,2329,2327,1,0,0,0,2329,2330,1,0,
  	0,0,2330,2333,1,0,0,0,2331,2329,1,0,0,0,2332,2334,5,80,0,0,2333,2332,
  	1,0,0,0,2333,2334,1,0,0,0,2334,291,1,0,0,0,2335,2336,5,77,0,0,2336,2339,
  	3,328,164,0,2337,2339,3,296,148,0,2338,2335,1,0,0,0,2338,2337,1,0,0,0,
  	2339,293,1,0,0,0,2340,2341,3,480,240,0,2341,2342,5,122,0,0,2342,2343,
  	3,282,141,0,2343,295,1,0,0,0,2344,2347,3,294,147,0,2345,2347,3,282,141,
  	0,2346,2344,1,0,0,0,2346,2345,1,0,0,0,2347,297,1,0,0,0,2348,2353,3,300,
  	150,0,2349,2350,5,40,0,0,2350,2352,3,300,150,0,2351,2349,1,0,0,0,2352,
  	2355,1,0,0,0,2353,2351,1,0,0,0,2353,2354,1,0,0,0,2354,299,1,0,0,0,2355,
  	2353,1,0,0,0,2356,2361,3,302,151,0,2357,2358,5,12,0,0,2358,2360,3,302,
  	151,0,2359,2357,1,0,0,0,2360,2363,1,0,0,0,2361,2359,1,0,0,0,2361,2362,
  	1,0,0,0,2362,301,1,0,0,0,2363,2361,1,0,0,0,2364,2365,5,39,0,0,2365,2368,
  	3,302,151,0,2366,2368,3,304,152,0,2367,2364,1,0,0,0,2367,2366,1,0,0,0,
  	2368,303,1,0,0,0,2369,2373,3,328,164,0,2370,2372,3,306,153,0,2371,2370,
  	1,0,0,0,2372,2375,1,0,0,0,2373,2371,1,0,0,0,2373,2374,1,0,0,0,2374,305,
  	1,0,0,0,2375,2373,1,0,0,0,2376,2387,3,308,154,0,2377,2387,3,310,155,0,
  	2378,2387,3,312,156,0,2379,2387,3,314,157,0,2380,2387,3,316,158,0,2381,
  	2387,3,318,159,0,2382,2387,3,320,160,0,2383,2387,3,322,161,0,2384,2387,
  	3,324,162,0,2385,2387,3,326,163,0,2386,2376,1,0,0,0,2386,2377,1,0,0,0,
  	2386,2378,1,0,0,0,2386,2379,1,0,0,0,2386,2380,1,0,0,0,2386,2381,1,0,0,
  	0,2386,2382,1,0,0,0,2386,2383,1,0,0,0,2386,2384,1,0,0,0,2386,2385,1,0,
  	0,0,2387,307,1,0,0,0,2388,2389,5,102,0,0,2389,2390,3,328,164,0,2390,309,
  	1,0,0,0,2391,2392,5,106,0,0,2392,2396,3,328,164,0,2393,2394,5,105,0,0,
  	2394,2396,3,328,164,0,2395,2391,1,0,0,0,2395,2393,1,0,0,0,2396,311,1,
  	0,0,0,2397,2398,5,104,0,0,2398,2399,3,328,164,0,2399,313,1,0,0,0,2400,
  	2401,5,100,0,0,2401,2402,3,328,164,0,2402,315,1,0,0,0,2403,2404,5,103,
  	0,0,2404,2405,3,328,164,0,2405,317,1,0,0,0,2406,2407,5,101,0,0,2407,2408,
  	3,328,164,0,2408,319,1,0,0,0,2409,2410,5,39,0,0,2410,2411,5,33,0,0,2411,
  	2412,3,328,164,0,2412,321,1,0,0,0,2413,2414,5,33,0,0,2414,2415,3,328,
  	164,0,2415,323,1,0,0,0,2416,2417,5,34,0,0,2417,2418,5,39,0,0,2418,2419,
  	3,328,164,0,2419,325,1,0,0,0,2420,2421,5,34,0,0,2421,2422,3,328,164,0,
  	2422,327,1,0,0,0,2423,2424,6,164,-1,0,2424,2425,3,330,165,0,2425,2431,
  	1,0,0,0,2426,2427,10,2,0,0,2427,2428,5,87,0,0,2428,2430,3,330,165,0,2429,
  	2426,1,0,0,0,2430,2433,1,0,0,0,2431,2429,1,0,0,0,2431,2432,1,0,0,0,2432,
  	329,1,0,0,0,2433,2431,1,0,0,0,2434,2435,6,165,-1,0,2435,2436,3,332,166,
  	0,2436,2442,1,0,0,0,2437,2438,10,2,0,0,2438,2439,5,88,0,0,2439,2441,3,
  	332,166,0,2440,2437,1,0,0,0,2441,2444,1,0,0,0,2442,2440,1,0,0,0,2442,
  	2443,1,0,0,0,2443,331,1,0,0,0,2444,2442,1,0,0,0,2445,2446,6,166,-1,0,
  	2446,2447,3,334,167,0,2447,2453,1,0,0,0,2448,2449,10,2,0,0,2449,2450,
  	5,89,0,0,2450,2452,3,334,167,0,2451,2448,1,0,0,0,2452,2455,1,0,0,0,2453,
  	2451,1,0,0,0,2453,2454,1,0,0,0,2454,333,1,0,0,0,2455,2453,1,0,0,0,2456,
  	2457,6,167,-1,0,2457,2458,3,336,168,0,2458,2467,1,0,0,0,2459,2460,10,
  	3,0,0,2460,2461,5,90,0,0,2461,2466,3,336,168,0,2462,2463,10,2,0,0,2463,
  	2464,5,91,0,0,2464,2466,3,336,168,0,2465,2459,1,0,0,0,2465,2462,1,0,0,
  	0,2466,2469,1,0,0,0,2467,2465,1,0,0,0,2467,2468,1,0,0,0,2468,335,1,0,
  	0,0,2469,2467,1,0,0,0,2470,2471,6,168,-1,0,2471,2472,3,338,169,0,2472,
  	2481,1,0,0,0,2473,2474,10,3,0,0,2474,2475,5,92,0,0,2475,2480,3,338,169,
  	0,2476,2477,10,2,0,0,2477,2478,5,93,0,0,2478,2480,3,338,169,0,2479,2473,
  	1,0,0,0,2479,2476,1,0,0,0,2480,2483,1,0,0,0,2481,2479,1,0,0,0,2481,2482,
  	1,0,0,0,2482,337,1,0,0,0,2483,2481,1,0,0,0,2484,2485,6,169,-1,0,2485,
  	2486,3,340,170,0,2486,2504,1,0,0,0,2487,2488,10,6,0,0,2488,2489,5,77,
  	0,0,2489,2503,3,340,170,0,2490,2491,10,5,0,0,2491,2492,5,94,0,0,2492,
  	2503,3,340,170,0,2493,2494,10,4,0,0,2494,2495,5,96,0,0,2495,2503,3,340,
  	170,0,2496,2497,10,3,0,0,2497,2498,5,95,0,0,2498,2503,3,340,170,0,2499,
  	2500,10,2,0,0,2500,2501,5,107,0,0,2501,2503,3,340,170,0,2502,2487,1,0,
  	0,0,2502,2490,1,0,0,0,2502,2493,1,0,0,0,2502,2496,1,0,0,0,2502,2499,1,
  	0,0,0,2503,2506,1,0,0,0,2504,2502,1,0,0,0,2504,2505,1,0,0,0,2505,339,
  	1,0,0,0,2506,2504,1,0,0,0,2507,2508,5,92,0,0,2508,2515,3,340,170,0,2509,
  	2510,5,93,0,0,2510,2515,3,340,170,0,2511,2512,5,97,0,0,2512,2515,3,340,
  	170,0,2513,2515,3,342,171,0,2514,2507,1,0,0,0,2514,2509,1,0,0,0,2514,
  	2511,1,0,0,0,2514,2513,1,0,0,0,2515,341,1,0,0,0,2516,2517,3,344,172,0,
  	2517,2518,5,83,0,0,2518,2519,3,340,170,0,2519,2522,1,0,0,0,2520,2522,
  	3,344,172,0,2521,2516,1,0,0,0,2521,2520,1,0,0,0,2522,343,1,0,0,0,2523,
  	2524,5,16,0,0,2524,2527,3,346,173,0,2525,2527,3,346,173,0,2526,2523,1,
  	0,0,0,2526,2525,1,0,0,0,2527,345,1,0,0,0,2528,2529,6,173,-1,0,2529,2530,
  	3,352,176,0,2530,2549,1,0,0,0,2531,2532,10,5,0,0,2532,2533,5,76,0,0,2533,
  	2548,3,480,240,0,2534,2535,10,4,0,0,2535,2548,3,434,217,0,2536,2537,10,
  	3,0,0,2537,2539,5,78,0,0,2538,2540,3,438,219,0,2539,2538,1,0,0,0,2539,
  	2540,1,0,0,0,2540,2541,1,0,0,0,2541,2548,5,79,0,0,2542,2543,10,2,0,0,
  	2543,2544,5,85,0,0,2544,2545,3,348,174,0,2545,2546,5,86,0,0,2546,2548,
  	1,0,0,0,2547,2531,1,0,0,0,2547,2534,1,0,0,0,2547,2536,1,0,0,0,2547,2542,
  	1,0,0,0,2548,2551,1,0,0,0,2549,2547,1,0,0,0,2549,2550,1,0,0,0,2550,347,
  	1,0,0,0,2551,2549,1,0,0,0,2552,2555,3,350,175,0,2553,2555,3,446,223,0,
  	2554,2552,1,0,0,0,2554,2553,1,0,0,0,2555,2563,1,0,0,0,2556,2559,5,80,
  	0,0,2557,2560,3,350,175,0,2558,2560,3,446,223,0,2559,2557,1,0,0,0,2559,
  	2558,1,0,0,0,2560,2562,1,0,0,0,2561,2556,1,0,0,0,2562,2565,1,0,0,0,2563,
  	2561,1,0,0,0,2563,2564,1,0,0,0,2564,2567,1,0,0,0,2565,2563,1,0,0,0,2566,
  	2568,5,80,0,0,2567,2566,1,0,0,0,2567,2568,1,0,0,0,2568,349,1,0,0,0,2569,
  	2571,3,282,141,0,2570,2569,1,0,0,0,2570,2571,1,0,0,0,2571,2572,1,0,0,
  	0,2572,2574,5,81,0,0,2573,2575,3,282,141,0,2574,2573,1,0,0,0,2574,2575,
  	1,0,0,0,2575,2580,1,0,0,0,2576,2578,5,81,0,0,2577,2579,3,282,141,0,2578,
  	2577,1,0,0,0,2578,2579,1,0,0,0,2579,2581,1,0,0,0,2580,2576,1,0,0,0,2580,
  	2581,1,0,0,0,2581,2584,1,0,0,0,2582,2584,3,296,148,0,2583,2570,1,0,0,
  	0,2583,2582,1,0,0,0,2584,351,1,0,0,0,2585,2609,3,52,26,0,2586,2609,3,
  	480,240,0,2587,2609,5,44,0,0,2588,2609,5,26,0,0,2589,2609,5,37,0,0,2590,
  	2609,3,410,205,0,2591,2609,5,8,0,0,2592,2596,3,414,207,0,2593,2596,3,
  	354,177,0,2594,2596,3,434,217,0,2595,2592,1,0,0,0,2595,2593,1,0,0,0,2595,
  	2594,1,0,0,0,2596,2609,1,0,0,0,2597,2600,3,412,206,0,2598,2600,3,430,
  	215,0,2599,2597,1,0,0,0,2599,2598,1,0,0,0,2600,2609,1,0,0,0,2601,2606,
  	3,418,209,0,2602,2606,3,416,208,0,2603,2606,3,436,218,0,2604,2606,3,432,
  	216,0,2605,2601,1,0,0,0,2605,2602,1,0,0,0,2605,2603,1,0,0,0,2605,2604,
  	1,0,0,0,2606,2609,1,0,0,0,2607,2609,5,74,0,0,2608,2585,1,0,0,0,2608,2586,
  	1,0,0,0,2608,2587,1,0,0,0,2608,2588,1,0,0,0,2608,2589,1,0,0,0,2608,2590,
  	1,0,0,0,2608,2591,1,0,0,0,2608,2595,1,0,0,0,2608,2599,1,0,0,0,2608,2605,
  	1,0,0,0,2608,2607,1,0,0,0,2609,353,1,0,0,0,2610,2613,5,78,0,0,2611,2614,
  	3,284,142,0,2612,2614,3,296,148,0,2613,2611,1,0,0,0,2613,2612,1,0,0,0,
  	2614,2615,1,0,0,0,2615,2616,5,79,0,0,2616,355,1,0,0,0,2617,2619,5,35,
  	0,0,2618,2620,3,358,179,0,2619,2618,1,0,0,0,2619,2620,1,0,0,0,2620,2621,
  	1,0,0,0,2621,2622,5,81,0,0,2622,2623,3,282,141,0,2623,357,1,0,0,0,2624,
  	2625,3,360,180,0,2625,359,1,0,0,0,2626,2630,3,362,181,0,2627,2629,3,370,
  	185,0,2628,2627,1,0,0,0,2629,2632,1,0,0,0,2630,2628,1,0,0,0,2630,2631,
  	1,0,0,0,2631,2636,1,0,0,0,2632,2630,1,0,0,0,2633,2635,3,372,186,0,2634,
  	2633,1,0,0,0,2635,2638,1,0,0,0,2636,2634,1,0,0,0,2636,2637,1,0,0,0,2637,
  	2640,1,0,0,0,2638,2636,1,0,0,0,2639,2641,3,366,183,0,2640,2639,1,0,0,
  	0,2640,2641,1,0,0,0,2641,2676,1,0,0,0,2642,2646,3,364,182,0,2643,2645,
  	3,372,186,0,2644,2643,1,0,0,0,2645,2648,1,0,0,0,2646,2644,1,0,0,0,2646,
  	2647,1,0,0,0,2647,2650,1,0,0,0,2648,2646,1,0,0,0,2649,2651,3,366,183,
  	0,2650,2649,1,0,0,0,2650,2651,1,0,0,0,2651,2676,1,0,0,0,2652,2654,3,370,
  	185,0,2653,2652,1,0,0,0,2654,2655,1,0,0,0,2655,2653,1,0,0,0,2655,2656,
  	1,0,0,0,2656,2660,1,0,0,0,2657,2659,3,372,186,0,2658,2657,1,0,0,0,2659,
  	2662,1,0,0,0,2660,2658,1,0,0,0,2660,2661,1,0,0,0,2661,2664,1,0,0,0,2662,
  	2660,1,0,0,0,2663,2665,3,366,183,0,2664,2663,1,0,0,0,2664,2665,1,0,0,
  	0,2665,2676,1,0,0,0,2666,2668,3,372,186,0,2667,2666,1,0,0,0,2668,2669,
  	1,0,0,0,2669,2667,1,0,0,0,2669,2670,1,0,0,0,2670,2672,1,0,0,0,2671,2673,
  	3,366,183,0,2672,2671,1,0,0,0,2672,2673,1,0,0,0,2673,2676,1,0,0,0,2674,
  	2676,3,366,183,0,2675,2626,1,0,0,0,2675,2642,1,0,0,0,2675,2653,1,0,0,
  	0,2675,2667,1,0,0,0,2675,2674,1,0,0,0,2676,361,1,0,0,0,2677,2679,3,370,
  	185,0,2678,2677,1,0,0,0,2679,2680,1,0,0,0,2680,2678,1,0,0,0,2680,2681,
  	1,0,0,0,2681,2682,1,0,0,0,2682,2684,5,94,0,0,2683,2685,5,80,0,0,2684,
  	2683,1,0,0,0,2684,2685,1,0,0,0,2685,363,1,0,0,0,2686,2688,3,370,185,0,
  	2687,2686,1,0,0,0,2688,2691,1,0,0,0,2689,2687,1,0,0,0,2689,2690,1,0,0,
  	0,2690,2693,1,0,0,0,2691,2689,1,0,0,0,2692,2694,3,372,186,0,2693,2692,
  	1,0,0,0,2694,2695,1,0,0,0,2695,2693,1,0,0,0,2695,2696,1,0,0,0,2696,2697,
  	1,0,0,0,2697,2699,5,94,0,0,2698,2700,5,80,0,0,2699,2698,1,0,0,0,2699,
  	2700,1,0,0,0,2700,365,1,0,0,0,2701,2702,5,77,0,0,2702,2706,3,370,185,
  	0,2703,2705,3,374,187,0,2704,2703,1,0,0,0,2705,2708,1,0,0,0,2706,2704,
  	1,0,0,0,2706,2707,1,0,0,0,2707,2710,1,0,0,0,2708,2706,1,0,0,0,2709,2711,
  	3,368,184,0,2710,2709,1,0,0,0,2710,2711,1,0,0,0,2711,2724,1,0,0,0,2712,
  	2713,5,77,0,0,2713,2715,5,80,0,0,2714,2716,3,374,187,0,2715,2714,1,0,
  	0,0,2716,2717,1,0,0,0,2717,2715,1,0,0,0,2717,2718,1,0,0,0,2718,2720,1,
  	0,0,0,2719,2721,3,368,184,0,2720,2719,1,0,0,0,2720,2721,1,0,0,0,2721,
  	2724,1,0,0,0,2722,2724,3,368,184,0,2723,2701,1,0,0,0,2723,2712,1,0,0,
  	0,2723,2722,1,0,0,0,2724,367,1,0,0,0,2725,2726,5,83,0,0,2726,2727,3,370,
  	185,0,2727,369,1,0,0,0,2728,2730,3,376,188,0,2729,2731,5,80,0,0,2730,
  	2729,1,0,0,0,2730,2731,1,0,0,0,2731,371,1,0,0,0,2732,2733,3,376,188,0,
  	2733,2735,3,174,87,0,2734,2736,5,80,0,0,2735,2734,1,0,0,0,2735,2736,1,
  	0,0,0,2736,373,1,0,0,0,2737,2739,3,376,188,0,2738,2740,3,174,87,0,2739,
  	2738,1,0,0,0,2739,2740,1,0,0,0,2740,2742,1,0,0,0,2741,2743,5,80,0,0,2742,
  	2741,1,0,0,0,2742,2743,1,0,0,0,2743,375,1,0,0,0,2744,2745,3,480,240,0,
  	2745,377,1,0,0,0,2746,2749,3,398,199,0,2747,2749,3,386,193,0,2748,2746,
  	1,0,0,0,2748,2747,1,0,0,0,2749,379,1,0,0,0,2750,2753,3,398,199,0,2751,
  	2753,3,388,194,0,2752,2750,1,0,0,0,2752,2751,1,0,0,0,2753,381,1,0,0,0,
  	2754,2757,3,398,199,0,2755,2757,3,392,196,0,2756,2754,1,0,0,0,2756,2755,
  	1,0,0,0,2757,383,1,0,0,0,2758,2761,3,398,199,0,2759,2761,3,394,197,0,
  	2760,2758,1,0,0,0,2760,2759,1,0,0,0,2761,385,1,0,0,0,2762,2766,3,396,
  	198,0,2763,2766,5,63,0,0,2764,2766,5,61,0,0,2765,2762,1,0,0,0,2765,2763,
  	1,0,0,0,2765,2764,1,0,0,0,2766,387,1,0,0,0,2767,2771,3,396,198,0,2768,
  	2771,5,62,0,0,2769,2771,5,60,0,0,2770,2767,1,0,0,0,2770,2768,1,0,0,0,
  	2770,2769,1,0,0,0,2771,389,1,0,0,0,2772,2776,3,396,198,0,2773,2776,5,
  	63,0,0,2774,2776,5,62,0,0,2775,2772,1,0,0,0,2775,2773,1,0,0,0,2775,2774,
  	1,0,0,0,2776,391,1,0,0,0,2777,2781,3,396,198,0,2778,2781,5,124,0,0,2779,
  	2781,5,63,0,0,2780,2777,1,0,0,0,2780,2778,1,0,0,0,2780,2779,1,0,0,0,2781,
  	393,1,0,0,0,2782,2786,3,396,198,0,2783,2786,5,124,0,0,2784,2786,5,62,
  	0,0,2785,2782,1,0,0,0,2785,2783,1,0,0,0,2785,2784,1,0,0,0,2786,395,1,
  	0,0,0,2787,2894,5,8,0,0,2788,2894,5,10,0,0,2789,2894,5,11,0,0,2790,2894,
  	5,12,0,0,2791,2894,5,13,0,0,2792,2894,5,14,0,0,2793,2894,5,15,0,0,2794,
  	2894,5,16,0,0,2795,2894,5,17,0,0,2796,2894,5,18,0,0,2797,2894,5,19,0,
  	0,2798,2894,5,20,0,0,2799,2894,5,21,0,0,2800,2894,5,22,0,0,2801,2894,
  	5,23,0,0,2802,2894,5,24,0,0,2803,2894,5,25,0,0,2804,2894,5,26,0,0,2805,
  	2894,5,27,0,0,2806,2894,5,28,0,0,2807,2894,5,29,0,0,2808,2894,5,30,0,
  	0,2809,2894,5,31,0,0,2810,2894,5,32,0,0,2811,2894,5,33,0,0,2812,2894,
  	5,34,0,0,2813,2894,5,35,0,0,2814,2894,5,36,0,0,2815,2894,5,37,0,0,2816,
  	2894,5,38,0,0,2817,2894,5,39,0,0,2818,2894,5,40,0,0,2819,2894,5,41,0,
  	0,2820,2894,5,42,0,0,2821,2894,5,43,0,0,2822,2894,5,44,0,0,2823,2894,
  	5,45,0,0,2824,2894,5,46,0,0,2825,2894,5,47,0,0,2826,2894,5,48,0,0,2827,
  	2894,5,49,0,0,2828,2894,5,50,0,0,2829,2894,5,51,0,0,2830,2894,5,52,0,
  	0,2831,2894,5,53,0,0,2832,2894,5,54,0,0,2833,2894,5,55,0,0,2834,2894,
  	5,56,0,0,2835,2894,5,57,0,0,2836,2894,5,58,0,0,2837,2894,5,71,0,0,2838,
  	2894,5,72,0,0,2839,2894,5,76,0,0,2840,2894,5,75,0,0,2841,2894,5,74,0,
  	0,2842,2894,5,77,0,0,2843,2894,5,78,0,0,2844,2894,5,79,0,0,2845,2894,
  	5,80,0,0,2846,2894,5,81,0,0,2847,2894,5,82,0,0,2848,2894,5,83,0,0,2849,
  	2894,5,84,0,0,2850,2894,5,85,0,0,2851,2894,5,86,0,0,2852,2894,5,87,0,
  	0,2853,2894,5,88,0,0,2854,2894,5,89,0,0,2855,2894,5,90,0,0,2856,2894,
  	5,91,0,0,2857,2894,5,92,0,0,2858,2894,5,93,0,0,2859,2894,5,94,0,0,2860,
  	2894,5,95,0,0,2861,2894,5,96,0,0,2862,2894,5,97,0,0,2863,2864,5,98,0,
  	0,2864,2894,5,98,0,0,2865,2866,5,99,0,0,2866,2894,5,99,0,0,2867,2894,
  	5,100,0,0,2868,2894,5,101,0,0,2869,2894,5,102,0,0,2870,2894,5,103,0,0,
  	2871,2894,5,104,0,0,2872,2894,5,105,0,0,2873,2894,5,106,0,0,2874,2894,
  	5,107,0,0,2875,2894,5,108,0,0,2876,2894,5,109,0,0,2877,2894,5,110,0,0,
  	2878,2894,5,111,0,0,2879,2894,5,112,0,0,2880,2894,5,113,0,0,2881,2894,
  	5,114,0,0,2882,2894,5,115,0,0,2883,2894,5,116,0,0,2884,2894,5,117,0,0,
  	2885,2894,5,118,0,0,2886,2894,5,119,0,0,2887,2894,5,120,0,0,2888,2894,
  	5,121,0,0,2889,2894,5,122,0,0,2890,2894,5,123,0,0,2891,2894,5,125,0,0,
  	2892,2894,5,126,0,0,2893,2787,1,0,0,0,2893,2788,1,0,0,0,2893,2789,1,0,
  	0,0,2893,2790,1,0,0,0,2893,2791,1,0,0,0,2893,2792,1,0,0,0,2893,2793,1,
  	0,0,0,2893,2794,1,0,0,0,2893,2795,1,0,0,0,2893,2796,1,0,0,0,2893,2797,
  	1,0,0,0,2893,2798,1,0,0,0,2893,2799,1,0,0,0,2893,2800,1,0,0,0,2893,2801,
  	1,0,0,0,2893,2802,1,0,0,0,2893,2803,1,0,0,0,2893,2804,1,0,0,0,2893,2805,
  	1,0,0,0,2893,2806,1,0,0,0,2893,2807,1,0,0,0,2893,2808,1,0,0,0,2893,2809,
  	1,0,0,0,2893,2810,1,0,0,0,2893,2811,1,0,0,0,2893,2812,1,0,0,0,2893,2813,
  	1,0,0,0,2893,2814,1,0,0,0,2893,2815,1,0,0,0,2893,2816,1,0,0,0,2893,2817,
  	1,0,0,0,2893,2818,1,0,0,0,2893,2819,1,0,0,0,2893,2820,1,0,0,0,2893,2821,
  	1,0,0,0,2893,2822,1,0,0,0,2893,2823,1,0,0,0,2893,2824,1,0,0,0,2893,2825,
  	1,0,0,0,2893,2826,1,0,0,0,2893,2827,1,0,0,0,2893,2828,1,0,0,0,2893,2829,
  	1,0,0,0,2893,2830,1,0,0,0,2893,2831,1,0,0,0,2893,2832,1,0,0,0,2893,2833,
  	1,0,0,0,2893,2834,1,0,0,0,2893,2835,1,0,0,0,2893,2836,1,0,0,0,2893,2837,
  	1,0,0,0,2893,2838,1,0,0,0,2893,2839,1,0,0,0,2893,2840,1,0,0,0,2893,2841,
  	1,0,0,0,2893,2842,1,0,0,0,2893,2843,1,0,0,0,2893,2844,1,0,0,0,2893,2845,
  	1,0,0,0,2893,2846,1,0,0,0,2893,2847,1,0,0,0,2893,2848,1,0,0,0,2893,2849,
  	1,0,0,0,2893,2850,1,0,0,0,2893,2851,1,0,0,0,2893,2852,1,0,0,0,2893,2853,
  	1,0,0,0,2893,2854,1,0,0,0,2893,2855,1,0,0,0,2893,2856,1,0,0,0,2893,2857,
  	1,0,0,0,2893,2858,1,0,0,0,2893,2859,1,0,0,0,2893,2860,1,0,0,0,2893,2861,
  	1,0,0,0,2893,2862,1,0,0,0,2893,2863,1,0,0,0,2893,2865,1,0,0,0,2893,2867,
  	1,0,0,0,2893,2868,1,0,0,0,2893,2869,1,0,0,0,2893,2870,1,0,0,0,2893,2871,
  	1,0,0,0,2893,2872,1,0,0,0,2893,2873,1,0,0,0,2893,2874,1,0,0,0,2893,2875,
  	1,0,0,0,2893,2876,1,0,0,0,2893,2877,1,0,0,0,2893,2878,1,0,0,0,2893,2879,
  	1,0,0,0,2893,2880,1,0,0,0,2893,2881,1,0,0,0,2893,2882,1,0,0,0,2893,2883,
  	1,0,0,0,2893,2884,1,0,0,0,2893,2885,1,0,0,0,2893,2886,1,0,0,0,2893,2887,
  	1,0,0,0,2893,2888,1,0,0,0,2893,2889,1,0,0,0,2893,2890,1,0,0,0,2893,2891,
  	1,0,0,0,2893,2892,1,0,0,0,2894,2895,1,0,0,0,2895,2893,1,0,0,0,2895,2896,
  	1,0,0,0,2896,397,1,0,0,0,2897,2900,5,98,0,0,2898,2901,3,284,142,0,2899,
  	2901,3,286,143,0,2900,2898,1,0,0,0,2900,2899,1,0,0,0,2901,2903,1,0,0,
  	0,2902,2904,5,84,0,0,2903,2902,1,0,0,0,2903,2904,1,0,0,0,2904,2906,1,
  	0,0,0,2905,2907,3,400,200,0,2906,2905,1,0,0,0,2906,2907,1,0,0,0,2907,
  	2909,1,0,0,0,2908,2910,3,402,201,0,2909,2908,1,0,0,0,2909,2910,1,0,0,
  	0,2910,2911,1,0,0,0,2911,2912,5,99,0,0,2912,399,1,0,0,0,2913,2914,5,123,
  	0,0,2914,2915,3,480,240,0,2915,401,1,0,0,0,2916,2920,5,81,0,0,2917,2919,
  	3,404,202,0,2918,2917,1,0,0,0,2919,2922,1,0,0,0,2920,2918,1,0,0,0,2920,
  	2921,1,0,0,0,2921,403,1,0,0,0,2922,2920,1,0,0,0,2923,2926,3,398,199,0,
  	2924,2926,3,390,195,0,2925,2923,1,0,0,0,2925,2924,1,0,0,0,2926,405,1,
  	0,0,0,2927,2931,5,3,0,0,2928,2930,3,378,189,0,2929,2928,1,0,0,0,2930,
  	2933,1,0,0,0,2931,2929,1,0,0,0,2931,2932,1,0,0,0,2932,2934,1,0,0,0,2933,
  	2931,1,0,0,0,2934,2960,5,62,0,0,2935,2939,5,4,0,0,2936,2938,3,380,190,
  	0,2937,2936,1,0,0,0,2938,2941,1,0,0,0,2939,2937,1,0,0,0,2939,2940,1,0,
  	0,0,2940,2942,1,0,0,0,2941,2939,1,0,0,0,2942,2960,5,63,0,0,2943,2947,
  	5,5,0,0,2944,2946,3,382,191,0,2945,2944,1,0,0,0,2946,2949,1,0,0,0,2947,
  	2945,1,0,0,0,2947,2948,1,0,0,0,2948,2950,1,0,0,0,2949,2947,1,0,0,0,2950,
  	2960,5,60,0,0,2951,2955,5,6,0,0,2952,2954,3,384,192,0,2953,2952,1,0,0,
  	0,2954,2957,1,0,0,0,2955,2953,1,0,0,0,2955,2956,1,0,0,0,2956,2958,1,0,
  	0,0,2957,2955,1,0,0,0,2958,2960,5,61,0,0,2959,2927,1,0,0,0,2959,2935,
  	1,0,0,0,2959,2943,1,0,0,0,2959,2951,1,0,0,0,2960,407,1,0,0,0,2961,2962,
  	5,7,0,0,2962,409,1,0,0,0,2963,2966,3,406,203,0,2964,2966,3,408,204,0,
  	2965,2963,1,0,0,0,2965,2964,1,0,0,0,2966,2967,1,0,0,0,2967,2965,1,0,0,
  	0,2967,2968,1,0,0,0,2968,411,1,0,0,0,2969,2971,5,85,0,0,2970,2972,3,290,
  	145,0,2971,2970,1,0,0,0,2971,2972,1,0,0,0,2972,2973,1,0,0,0,2973,2974,
  	5,86,0,0,2974,413,1,0,0,0,2975,2980,5,78,0,0,2976,2977,3,292,146,0,2977,
  	2978,5,80,0,0,2978,2979,3,290,145,0,2979,2981,1,0,0,0,2980,2976,1,0,0,
  	0,2980,2981,1,0,0,0,2981,2982,1,0,0,0,2982,2983,5,79,0,0,2983,415,1,0,
  	0,0,2984,2985,5,98,0,0,2985,2986,3,290,145,0,2986,2987,5,99,0,0,2987,
  	417,1,0,0,0,2988,2990,5,98,0,0,2989,2991,3,420,210,0,2990,2989,1,0,0,
  	0,2990,2991,1,0,0,0,2991,2992,1,0,0,0,2992,2993,5,99,0,0,2993,419,1,0,
  	0,0,2994,2999,3,422,211,0,2995,2996,5,80,0,0,2996,2998,3,422,211,0,2997,
  	2995,1,0,0,0,2998,3001,1,0,0,0,2999,2997,1,0,0,0,2999,3000,1,0,0,0,3000,
  	3003,1,0,0,0,3001,2999,1,0,0,0,3002,3004,5,80,0,0,3003,3002,1,0,0,0,3003,
  	3004,1,0,0,0,3004,421,1,0,0,0,3005,3006,5,83,0,0,3006,3009,3,328,164,
  	0,3007,3009,3,424,212,0,3008,3005,1,0,0,0,3008,3007,1,0,0,0,3009,423,
  	1,0,0,0,3010,3011,3,282,141,0,3011,3012,5,81,0,0,3012,3013,3,282,141,
  	0,3013,425,1,0,0,0,3014,3016,3,428,214,0,3015,3014,1,0,0,0,3016,3017,
  	1,0,0,0,3017,3015,1,0,0,0,3017,3018,1,0,0,0,3018,427,1,0,0,0,3019,3021,
  	5,15,0,0,3020,3019,1,0,0,0,3020,3021,1,0,0,0,3021,3022,1,0,0,0,3022,3023,
  	5,28,0,0,3023,3024,3,452,226,0,3024,3025,5,33,0,0,3025,3030,3,298,149,
  	0,3026,3027,5,31,0,0,3027,3029,3,298,149,0,3028,3026,1,0,0,0,3029,3032,
  	1,0,0,0,3030,3028,1,0,0,0,3030,3031,1,0,0,0,3031,429,1,0,0,0,3032,3030,
  	1,0,0,0,3033,3034,5,85,0,0,3034,3035,3,296,148,0,3035,3036,3,426,213,
  	0,3036,3037,5,86,0,0,3037,431,1,0,0,0,3038,3039,5,98,0,0,3039,3040,3,
  	296,148,0,3040,3041,3,426,213,0,3041,3042,5,99,0,0,3042,433,1,0,0,0,3043,
  	3046,5,78,0,0,3044,3047,3,294,147,0,3045,3047,3,282,141,0,3046,3044,1,
  	0,0,0,3046,3045,1,0,0,0,3047,3048,1,0,0,0,3048,3049,3,426,213,0,3049,
  	3050,5,79,0,0,3050,435,1,0,0,0,3051,3052,5,98,0,0,3052,3053,3,424,212,
  	0,3053,3054,3,426,213,0,3054,3055,5,99,0,0,3055,437,1,0,0,0,3056,3058,
  	3,440,220,0,3057,3059,5,80,0,0,3058,3057,1,0,0,0,3058,3059,1,0,0,0,3059,
  	439,1,0,0,0,3060,3065,3,442,221,0,3061,3062,5,80,0,0,3062,3064,3,442,
  	221,0,3063,3061,1,0,0,0,3064,3067,1,0,0,0,3065,3063,1,0,0,0,3065,3066,
  	1,0,0,0,3066,3070,1,0,0,0,3067,3065,1,0,0,0,3068,3069,5,80,0,0,3069,3071,
  	3,444,222,0,3070,3068,1,0,0,0,3070,3071,1,0,0,0,3071,3074,1,0,0,0,3072,
  	3074,3,444,222,0,3073,3060,1,0,0,0,3073,3072,1,0,0,0,3074,441,1,0,0,0,
  	3075,3080,3,56,28,0,3076,3080,3,446,223,0,3077,3080,3,294,147,0,3078,
  	3080,3,282,141,0,3079,3075,1,0,0,0,3079,3076,1,0,0,0,3079,3077,1,0,0,
  	0,3079,3078,1,0,0,0,3080,443,1,0,0,0,3081,3086,3,448,224,0,3082,3083,
  	5,80,0,0,3083,3085,3,448,224,0,3084,3082,1,0,0,0,3085,3088,1,0,0,0,3086,
  	3084,1,0,0,0,3086,3087,1,0,0,0,3087,3089,1,0,0,0,3088,3086,1,0,0,0,3089,
  	3090,5,80,0,0,3090,3095,3,450,225,0,3091,3092,5,80,0,0,3092,3094,3,450,
  	225,0,3093,3091,1,0,0,0,3094,3097,1,0,0,0,3095,3093,1,0,0,0,3095,3096,
  	1,0,0,0,3096,3115,1,0,0,0,3097,3095,1,0,0,0,3098,3103,3,448,224,0,3099,
  	3100,5,80,0,0,3100,3102,3,448,224,0,3101,3099,1,0,0,0,3102,3105,1,0,0,
  	0,3103,3101,1,0,0,0,3103,3104,1,0,0,0,3104,3115,1,0,0,0,3105,3103,1,0,
  	0,0,3106,3111,3,450,225,0,3107,3108,5,80,0,0,3108,3110,3,450,225,0,3109,
  	3107,1,0,0,0,3110,3113,1,0,0,0,3111,3109,1,0,0,0,3111,3112,1,0,0,0,3112,
  	3115,1,0,0,0,3113,3111,1,0,0,0,3114,3081,1,0,0,0,3114,3098,1,0,0,0,3114,
  	3106,1,0,0,0,3115,445,1,0,0,0,3116,3117,5,77,0,0,3117,3118,3,282,141,
  	0,3118,447,1,0,0,0,3119,3120,3,480,240,0,3120,3121,5,84,0,0,3121,3122,
  	3,282,141,0,3122,3125,1,0,0,0,3123,3125,3,446,223,0,3124,3119,1,0,0,0,
  	3124,3123,1,0,0,0,3125,449,1,0,0,0,3126,3127,3,480,240,0,3127,3128,5,
  	84,0,0,3128,3129,3,282,141,0,3129,3133,1,0,0,0,3130,3131,5,83,0,0,3131,
  	3133,3,282,141,0,3132,3126,1,0,0,0,3132,3130,1,0,0,0,3133,451,1,0,0,0,
  	3134,3139,3,458,229,0,3135,3136,5,80,0,0,3136,3138,3,458,229,0,3137,3135,
  	1,0,0,0,3138,3141,1,0,0,0,3139,3137,1,0,0,0,3139,3140,1,0,0,0,3140,3143,
  	1,0,0,0,3141,3139,1,0,0,0,3142,3144,5,80,0,0,3143,3142,1,0,0,0,3143,3144,
  	1,0,0,0,3144,453,1,0,0,0,3145,3150,3,458,229,0,3146,3147,5,80,0,0,3147,
  	3149,3,458,229,0,3148,3146,1,0,0,0,3149,3152,1,0,0,0,3150,3148,1,0,0,
  	0,3150,3151,1,0,0,0,3151,3154,1,0,0,0,3152,3150,1,0,0,0,3153,3155,5,80,
  	0,0,3154,3153,1,0,0,0,3154,3155,1,0,0,0,3155,455,1,0,0,0,3156,3159,3,
  	458,229,0,3157,3158,5,80,0,0,3158,3160,3,458,229,0,3159,3157,1,0,0,0,
  	3160,3161,1,0,0,0,3161,3159,1,0,0,0,3161,3162,1,0,0,0,3162,3164,1,0,0,
  	0,3163,3165,5,80,0,0,3164,3163,1,0,0,0,3164,3165,1,0,0,0,3165,3170,1,
  	0,0,0,3166,3167,3,458,229,0,3167,3168,5,80,0,0,3168,3170,1,0,0,0,3169,
  	3156,1,0,0,0,3169,3166,1,0,0,0,3170,457,1,0,0,0,3171,3172,5,77,0,0,3172,
  	3175,3,458,229,0,3173,3175,3,460,230,0,3174,3171,1,0,0,0,3174,3173,1,
  	0,0,0,3175,459,1,0,0,0,3176,3177,3,468,234,0,3177,3178,5,76,0,0,3178,
  	3179,3,480,240,0,3179,3187,1,0,0,0,3180,3181,3,468,234,0,3181,3182,5,
  	85,0,0,3182,3183,3,348,174,0,3183,3184,5,86,0,0,3184,3187,1,0,0,0,3185,
  	3187,3,462,231,0,3186,3176,1,0,0,0,3186,3180,1,0,0,0,3186,3185,1,0,0,
  	0,3187,461,1,0,0,0,3188,3204,3,480,240,0,3189,3190,5,78,0,0,3190,3191,
  	3,460,230,0,3191,3192,5,79,0,0,3192,3204,1,0,0,0,3193,3195,5,78,0,0,3194,
  	3196,3,456,228,0,3195,3194,1,0,0,0,3195,3196,1,0,0,0,3196,3197,1,0,0,
  	0,3197,3204,5,79,0,0,3198,3200,5,85,0,0,3199,3201,3,454,227,0,3200,3199,
  	1,0,0,0,3200,3201,1,0,0,0,3201,3202,1,0,0,0,3202,3204,5,86,0,0,3203,3188,
  	1,0,0,0,3203,3189,1,0,0,0,3203,3193,1,0,0,0,3203,3198,1,0,0,0,3204,463,
  	1,0,0,0,3205,3212,3,466,233,0,3206,3212,3,480,240,0,3207,3208,5,78,0,
  	0,3208,3209,3,464,232,0,3209,3210,5,79,0,0,3210,3212,1,0,0,0,3211,3205,
  	1,0,0,0,3211,3206,1,0,0,0,3211,3207,1,0,0,0,3212,465,1,0,0,0,3213,3214,
  	3,468,234,0,3214,3215,5,76,0,0,3215,3216,3,480,240,0,3216,3223,1,0,0,
  	0,3217,3218,3,468,234,0,3218,3219,5,85,0,0,3219,3220,3,348,174,0,3220,
  	3221,5,86,0,0,3221,3223,1,0,0,0,3222,3213,1,0,0,0,3222,3217,1,0,0,0,3223,
  	467,1,0,0,0,3224,3225,6,234,-1,0,3225,3226,3,352,176,0,3226,3245,1,0,
  	0,0,3227,3228,10,5,0,0,3228,3229,5,76,0,0,3229,3244,3,480,240,0,3230,
  	3231,10,4,0,0,3231,3232,5,85,0,0,3232,3233,3,348,174,0,3233,3234,5,86,
  	0,0,3234,3244,1,0,0,0,3235,3236,10,3,0,0,3236,3244,3,434,217,0,3237,3238,
  	10,2,0,0,3238,3240,5,78,0,0,3239,3241,3,438,219,0,3240,3239,1,0,0,0,3240,
  	3241,1,0,0,0,3241,3242,1,0,0,0,3242,3244,5,79,0,0,3243,3227,1,0,0,0,3243,
  	3230,1,0,0,0,3243,3235,1,0,0,0,3243,3237,1,0,0,0,3244,3247,1,0,0,0,3245,
  	3243,1,0,0,0,3245,3246,1,0,0,0,3246,469,1,0,0,0,3247,3245,1,0,0,0,3248,
  	3253,3,472,236,0,3249,3250,5,80,0,0,3250,3252,3,472,236,0,3251,3249,1,
  	0,0,0,3252,3255,1,0,0,0,3253,3251,1,0,0,0,3253,3254,1,0,0,0,3254,3257,
  	1,0,0,0,3255,3253,1,0,0,0,3256,3258,5,80,0,0,3257,3256,1,0,0,0,3257,3258,
  	1,0,0,0,3258,471,1,0,0,0,3259,3260,3,468,234,0,3260,3261,5,76,0,0,3261,
  	3262,3,480,240,0,3262,3270,1,0,0,0,3263,3264,3,468,234,0,3264,3265,5,
  	85,0,0,3265,3266,3,348,174,0,3266,3267,5,86,0,0,3267,3270,1,0,0,0,3268,
  	3270,3,474,237,0,3269,3259,1,0,0,0,3269,3263,1,0,0,0,3269,3268,1,0,0,
  	0,3270,473,1,0,0,0,3271,3283,3,480,240,0,3272,3274,5,78,0,0,3273,3275,
  	3,470,235,0,3274,3273,1,0,0,0,3274,3275,1,0,0,0,3275,3276,1,0,0,0,3276,
  	3283,5,79,0,0,3277,3279,5,85,0,0,3278,3280,3,470,235,0,3279,3278,1,0,
  	0,0,3279,3280,1,0,0,0,3280,3281,1,0,0,0,3281,3283,5,86,0,0,3282,3271,
  	1,0,0,0,3282,3272,1,0,0,0,3282,3277,1,0,0,0,3283,475,1,0,0,0,3284,3289,
  	3,282,141,0,3285,3286,5,80,0,0,3286,3288,3,282,141,0,3287,3285,1,0,0,
  	0,3288,3291,1,0,0,0,3289,3287,1,0,0,0,3289,3290,1,0,0,0,3290,3292,1,0,
  	0,0,3291,3289,1,0,0,0,3292,3293,5,80,0,0,3293,3294,5,77,0,0,3294,3295,
  	3,282,141,0,3295,3296,5,80,0,0,3296,3297,5,83,0,0,3297,3298,3,282,141,
  	0,3298,3342,1,0,0,0,3299,3304,3,282,141,0,3300,3301,5,80,0,0,3301,3303,
  	3,282,141,0,3302,3300,1,0,0,0,3303,3306,1,0,0,0,3304,3302,1,0,0,0,3304,
  	3305,1,0,0,0,3305,3307,1,0,0,0,3306,3304,1,0,0,0,3307,3308,5,80,0,0,3308,
  	3309,5,77,0,0,3309,3310,3,282,141,0,3310,3342,1,0,0,0,3311,3316,3,282,
  	141,0,3312,3313,5,80,0,0,3313,3315,3,282,141,0,3314,3312,1,0,0,0,3315,
  	3318,1,0,0,0,3316,3314,1,0,0,0,3316,3317,1,0,0,0,3317,3319,1,0,0,0,3318,
  	3316,1,0,0,0,3319,3320,5,80,0,0,3320,3321,5,83,0,0,3321,3322,3,282,141,
  	0,3322,3342,1,0,0,0,3323,3324,5,77,0,0,3324,3325,3,282,141,0,3325,3326,
  	5,80,0,0,3326,3327,5,83,0,0,3327,3328,3,282,141,0,3328,3342,1,0,0,0,3329,
  	3330,5,77,0,0,3330,3342,3,282,141,0,3331,3332,5,83,0,0,3332,3342,3,282,
  	141,0,3333,3338,3,282,141,0,3334,3335,5,80,0,0,3335,3337,3,282,141,0,
  	3336,3334,1,0,0,0,3337,3340,1,0,0,0,3338,3336,1,0,0,0,3338,3339,1,0,0,
  	0,3339,3342,1,0,0,0,3340,3338,1,0,0,0,3341,3284,1,0,0,0,3341,3299,1,0,
  	0,0,3341,3311,1,0,0,0,3341,3323,1,0,0,0,3341,3329,1,0,0,0,3341,3331,1,
  	0,0,0,3341,3333,1,0,0,0,3342,477,1,0,0,0,3343,3344,5,124,0,0,3344,479,
  	1,0,0,0,3345,3346,7,4,0,0,3346,481,1,0,0,0,408,488,495,500,506,511,519,
  	525,528,533,539,547,553,556,561,567,576,582,585,590,593,600,607,615,634,
  	638,642,653,659,664,689,692,694,699,707,715,721,730,733,738,744,753,756,
  	761,767,775,782,795,808,816,825,828,837,847,850,859,869,872,881,891,894,
  	902,911,914,923,933,936,945,955,958,967,977,980,987,990,992,1005,1018,
  	1026,1039,1053,1067,1080,1093,1107,1121,1129,1136,1144,1153,1167,1179,
  	1183,1189,1200,1202,1216,1223,1230,1234,1240,1247,1251,1255,1259,1262,
  	1266,1270,1272,1276,1281,1288,1292,1295,1303,1307,1311,1319,1323,1327,
  	1329,1333,1340,1347,1351,1356,1361,1365,1381,1391,1398,1405,1411,1418,
  	1422,1428,1430,1434,1440,1446,1449,1457,1466,1478,1482,1491,1502,1506,
  	1511,1517,1524,1530,1537,1543,1553,1562,1570,1573,1580,1584,1587,1593,
  	1598,1603,1607,1612,1616,1626,1632,1636,1642,1646,1651,1656,1660,1665,
  	1668,1671,1676,1680,1685,1691,1695,1702,1706,1713,1717,1724,1727,1730,
  	1739,1745,1754,1758,1764,1766,1770,1795,1797,1810,1812,1823,1832,1842,
  	1844,1853,1857,1869,1883,1887,1900,1906,1913,1926,1929,1932,1940,1943,
  	1946,1948,1954,1962,1969,1986,1993,1996,2001,2011,2015,2026,2037,2045,
  	2053,2063,2068,2073,2099,2108,2113,2116,2121,2128,2132,2136,2142,2149,
  	2158,2165,2169,2176,2181,2197,2205,2215,2219,2226,2234,2244,2258,2262,
  	2266,2272,2282,2286,2296,2303,2305,2312,2316,2322,2329,2333,2338,2346,
  	2353,2361,2367,2373,2386,2395,2431,2442,2453,2465,2467,2479,2481,2502,
  	2504,2514,2521,2526,2539,2547,2549,2554,2559,2563,2567,2570,2574,2578,
  	2580,2583,2595,2599,2605,2608,2613,2619,2630,2636,2640,2646,2650,2655,
  	2660,2664,2669,2672,2675,2680,2684,2689,2695,2699,2706,2710,2717,2720,
  	2723,2730,2735,2739,2742,2748,2752,2756,2760,2765,2770,2775,2780,2785,
  	2893,2895,2900,2903,2906,2909,2920,2925,2931,2939,2947,2955,2959,2965,
  	2967,2971,2980,2990,2999,3003,3008,3017,3020,3030,3046,3058,3065,3070,
  	3073,3079,3086,3095,3103,3111,3114,3124,3132,3139,3143,3150,3154,3161,
  	3164,3169,3174,3186,3195,3200,3203,3211,3222,3240,3243,3245,3253,3257,
  	3269,3274,3279,3282,3289,3304,3316,3338,3341
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  fandangoparserParserStaticData = std::move(staticData);
}

}

FandangoParser::FandangoParser(TokenStream *input) : FandangoParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

FandangoParser::FandangoParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  FandangoParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *fandangoparserParserStaticData->atn, fandangoparserParserStaticData->decisionToDFA, fandangoparserParserStaticData->sharedContextCache, options);
}

FandangoParser::~FandangoParser() {
  delete _interpreter;
}

const atn::ATN& FandangoParser::getATN() const {
  return *fandangoparserParserStaticData->atn;
}

std::string FandangoParser::getGrammarFileName() const {
  return "FandangoParser.g4";
}

const std::vector<std::string>& FandangoParser::getRuleNames() const {
  return fandangoparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& FandangoParser::getVocabulary() const {
  return fandangoparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView FandangoParser::getSerializedATN() const {
  return fandangoparserParserStaticData->serializedATN;
}


//----------------- FandangoContext ------------------------------------------------------------------

FandangoParser::FandangoContext::FandangoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ProgramContext* FandangoParser::FandangoContext::program() {
  return getRuleContext<FandangoParser::ProgramContext>(0);
}

tree::TerminalNode* FandangoParser::FandangoContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::FandangoContext::getRuleIndex() const {
  return FandangoParser::RuleFandango;
}


std::any FandangoParser::FandangoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFandango(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::FandangoContext* FandangoParser::fandango() {
  FandangoContext *_localctx = _tracker.createInstance<FandangoContext>(_ctx, getState());
  enterRule(_localctx, 0, FandangoParser::RuleFandango);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(482);
    program();
    setState(483);
    match(FandangoParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

FandangoParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::ProgramContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::ProgramContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

std::vector<FandangoParser::StatementContext *> FandangoParser::ProgramContext::statement() {
  return getRuleContexts<FandangoParser::StatementContext>();
}

FandangoParser::StatementContext* FandangoParser::ProgramContext::statement(size_t i) {
  return getRuleContext<FandangoParser::StatementContext>(i);
}


size_t FandangoParser::ProgramContext::getRuleIndex() const {
  return FandangoParser::RuleProgram;
}


std::any FandangoParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ProgramContext* FandangoParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 2, FandangoParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(488);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(485);
      match(FandangoParser::NEWLINE);
      setState(490);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(500);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 576459626828775930) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 8683006489) != 0)) {
      setState(491);
      statement();
      setState(495);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NEWLINE) {
        setState(492);
        match(FandangoParser::NEWLINE);
        setState(497);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(502);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

FandangoParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ProductionContext* FandangoParser::StatementContext::production() {
  return getRuleContext<FandangoParser::ProductionContext>(0);
}

FandangoParser::ConstraintContext* FandangoParser::StatementContext::constraint() {
  return getRuleContext<FandangoParser::ConstraintContext>(0);
}

FandangoParser::PythonContext* FandangoParser::StatementContext::python() {
  return getRuleContext<FandangoParser::PythonContext>(0);
}


size_t FandangoParser::StatementContext::getRuleIndex() const {
  return FandangoParser::RuleStatement;
}


std::any FandangoParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StatementContext* FandangoParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, FandangoParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(506);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(503);
      production();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(504);
      constraint();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(505);
      python();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProductionContext ------------------------------------------------------------------

FandangoParser::ProductionContext::ProductionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::NonterminalContext* FandangoParser::ProductionContext::nonterminal() {
  return getRuleContext<FandangoParser::NonterminalContext>(0);
}

tree::TerminalNode* FandangoParser::ProductionContext::GRAMMAR_ASSIGN() {
  return getToken(FandangoParser::GRAMMAR_ASSIGN, 0);
}

FandangoParser::AlternativeContext* FandangoParser::ProductionContext::alternative() {
  return getRuleContext<FandangoParser::AlternativeContext>(0);
}

tree::TerminalNode* FandangoParser::ProductionContext::SEMI_COLON() {
  return getToken(FandangoParser::SEMI_COLON, 0);
}

tree::TerminalNode* FandangoParser::ProductionContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::ProductionContext::INDENT() {
  return getTokens(FandangoParser::INDENT);
}

tree::TerminalNode* FandangoParser::ProductionContext::INDENT(size_t i) {
  return getToken(FandangoParser::INDENT, i);
}

tree::TerminalNode* FandangoParser::ProductionContext::EXPR_ASSIGN() {
  return getToken(FandangoParser::EXPR_ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::ProductionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::ProductionContext::DEDENT() {
  return getTokens(FandangoParser::DEDENT);
}

tree::TerminalNode* FandangoParser::ProductionContext::DEDENT(size_t i) {
  return getToken(FandangoParser::DEDENT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::ProductionContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::ProductionContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

tree::TerminalNode* FandangoParser::ProductionContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::ProductionContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::ProductionContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}


size_t FandangoParser::ProductionContext::getRuleIndex() const {
  return FandangoParser::RuleProduction;
}


std::any FandangoParser::ProductionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitProduction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ProductionContext* FandangoParser::production() {
  ProductionContext *_localctx = _tracker.createInstance<ProductionContext>(_ctx, getState());
  enterRule(_localctx, 6, FandangoParser::RuleProduction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(593);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(511);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::INDENT) {
        setState(508);
        match(FandangoParser::INDENT);
        setState(513);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(514);
      nonterminal();
      setState(515);
      match(FandangoParser::GRAMMAR_ASSIGN);
      setState(516);
      alternative();
      setState(519);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::EXPR_ASSIGN) {
        setState(517);
        match(FandangoParser::EXPR_ASSIGN);
        setState(518);
        expression();
      }
      setState(528);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(521);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(523); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(522);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(525); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(527);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(533);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::DEDENT) {
        setState(530);
        match(FandangoParser::DEDENT);
        setState(535);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(539);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::INDENT) {
        setState(536);
        match(FandangoParser::INDENT);
        setState(541);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(542);
      nonterminal();
      setState(543);
      match(FandangoParser::GRAMMAR_ASSIGN);
      setState(544);
      alternative();
      setState(547);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(545);
        match(FandangoParser::ASSIGN);
        setState(546);
        expression();
      }
      setState(556);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(549);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(551); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(550);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(553); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(555);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(561);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::DEDENT) {
        setState(558);
        match(FandangoParser::DEDENT);
        setState(563);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(567);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::INDENT) {
        setState(564);
        match(FandangoParser::INDENT);
        setState(569);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(570);
      nonterminal();
      setState(571);
      match(FandangoParser::GRAMMAR_ASSIGN);
      setState(572);
      alternative();
      setState(576);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COLON) {
        setState(573);
        match(FandangoParser::COLON);
        setState(574);
        match(FandangoParser::COLON);
        setState(575);
        expression();
      }
      setState(585);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(578);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(580); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(579);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(582); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(584);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(590);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::DEDENT) {
        setState(587);
        match(FandangoParser::DEDENT);
        setState(592);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlternativeContext ------------------------------------------------------------------

FandangoParser::AlternativeContext::AlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ConcatenationContext *> FandangoParser::AlternativeContext::concatenation() {
  return getRuleContexts<FandangoParser::ConcatenationContext>();
}

FandangoParser::ConcatenationContext* FandangoParser::AlternativeContext::concatenation(size_t i) {
  return getRuleContext<FandangoParser::ConcatenationContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::AlternativeContext::OR_OP() {
  return getTokens(FandangoParser::OR_OP);
}

tree::TerminalNode* FandangoParser::AlternativeContext::OR_OP(size_t i) {
  return getToken(FandangoParser::OR_OP, i);
}


size_t FandangoParser::AlternativeContext::getRuleIndex() const {
  return FandangoParser::RuleAlternative;
}


std::any FandangoParser::AlternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAlternative(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AlternativeContext* FandangoParser::alternative() {
  AlternativeContext *_localctx = _tracker.createInstance<AlternativeContext>(_ctx, getState());
  enterRule(_localctx, 8, FandangoParser::RuleAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(595);
    concatenation();
    setState(600);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR_OP) {
      setState(596);
      match(FandangoParser::OR_OP);
      setState(597);
      concatenation();
      setState(602);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConcatenationContext ------------------------------------------------------------------

FandangoParser::ConcatenationContext::ConcatenationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::OperatorContext *> FandangoParser::ConcatenationContext::operator_() {
  return getRuleContexts<FandangoParser::OperatorContext>();
}

FandangoParser::OperatorContext* FandangoParser::ConcatenationContext::operator_(size_t i) {
  return getRuleContext<FandangoParser::OperatorContext>(i);
}


size_t FandangoParser::ConcatenationContext::getRuleIndex() const {
  return FandangoParser::RuleConcatenation;
}


std::any FandangoParser::ConcatenationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitConcatenation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ConcatenationContext* FandangoParser::concatenation() {
  ConcatenationContext *_localctx = _tracker.createInstance<ConcatenationContext>(_ctx, getState());
  enterRule(_localctx, 10, FandangoParser::RuleConcatenation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(603);
    operator_();
    setState(607);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540431955284459904) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 4194433) != 0)) {
      setState(604);
      operator_();
      setState(609);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperatorContext ------------------------------------------------------------------

FandangoParser::OperatorContext::OperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::OperatorContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

FandangoParser::KleeneContext* FandangoParser::OperatorContext::kleene() {
  return getRuleContext<FandangoParser::KleeneContext>(0);
}

FandangoParser::PlusContext* FandangoParser::OperatorContext::plus() {
  return getRuleContext<FandangoParser::PlusContext>(0);
}

FandangoParser::OptionContext* FandangoParser::OperatorContext::option() {
  return getRuleContext<FandangoParser::OptionContext>(0);
}

FandangoParser::RepeatContext* FandangoParser::OperatorContext::repeat() {
  return getRuleContext<FandangoParser::RepeatContext>(0);
}


size_t FandangoParser::OperatorContext::getRuleIndex() const {
  return FandangoParser::RuleOperator;
}


std::any FandangoParser::OperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOperator(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::OperatorContext* FandangoParser::operator_() {
  OperatorContext *_localctx = _tracker.createInstance<OperatorContext>(_ctx, getState());
  enterRule(_localctx, 12, FandangoParser::RuleOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(615);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(610);
      symbol();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(611);
      kleene();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(612);
      plus();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(613);
      option();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(614);
      repeat();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KleeneContext ------------------------------------------------------------------

FandangoParser::KleeneContext::KleeneContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::KleeneContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::KleeneContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}


size_t FandangoParser::KleeneContext::getRuleIndex() const {
  return FandangoParser::RuleKleene;
}


std::any FandangoParser::KleeneContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKleene(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KleeneContext* FandangoParser::kleene() {
  KleeneContext *_localctx = _tracker.createInstance<KleeneContext>(_ctx, getState());
  enterRule(_localctx, 14, FandangoParser::RuleKleene);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(617);
    symbol();
    setState(618);
    match(FandangoParser::STAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PlusContext ------------------------------------------------------------------

FandangoParser::PlusContext::PlusContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::PlusContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::PlusContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}


size_t FandangoParser::PlusContext::getRuleIndex() const {
  return FandangoParser::RulePlus;
}


std::any FandangoParser::PlusContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPlus(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PlusContext* FandangoParser::plus() {
  PlusContext *_localctx = _tracker.createInstance<PlusContext>(_ctx, getState());
  enterRule(_localctx, 16, FandangoParser::RulePlus);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(620);
    symbol();
    setState(621);
    match(FandangoParser::ADD);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionContext ------------------------------------------------------------------

FandangoParser::OptionContext::OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::OptionContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::OptionContext::QUESTION() {
  return getToken(FandangoParser::QUESTION, 0);
}


size_t FandangoParser::OptionContext::getRuleIndex() const {
  return FandangoParser::RuleOption;
}


std::any FandangoParser::OptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOption(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::OptionContext* FandangoParser::option() {
  OptionContext *_localctx = _tracker.createInstance<OptionContext>(_ctx, getState());
  enterRule(_localctx, 18, FandangoParser::RuleOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(623);
    symbol();
    setState(624);
    match(FandangoParser::QUESTION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepeatContext ------------------------------------------------------------------

FandangoParser::RepeatContext::RepeatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::RepeatContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::RepeatContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::RepeatContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::RepeatContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::RepeatContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::RepeatContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::RepeatContext::getRuleIndex() const {
  return FandangoParser::RuleRepeat;
}


std::any FandangoParser::RepeatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRepeat(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::RepeatContext* FandangoParser::repeat() {
  RepeatContext *_localctx = _tracker.createInstance<RepeatContext>(_ctx, getState());
  enterRule(_localctx, 20, FandangoParser::RuleRepeat);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(642);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(626);
      symbol();
      setState(627);
      match(FandangoParser::OPEN_BRACE);

      setState(628);
      expression();
      setState(629);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(631);
      symbol();
      setState(632);
      match(FandangoParser::OPEN_BRACE);
      setState(634);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 93071897) != 0)) {
        setState(633);
        expression();
      }
      setState(636);
      match(FandangoParser::COMMA);
      setState(638);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 93071897) != 0)) {
        setState(637);
        expression();
      }
      setState(640);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SymbolContext ------------------------------------------------------------------

FandangoParser::SymbolContext::SymbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Nonterminal_rightContext* FandangoParser::SymbolContext::nonterminal_right() {
  return getRuleContext<FandangoParser::Nonterminal_rightContext>(0);
}

FandangoParser::StringContext* FandangoParser::SymbolContext::string() {
  return getRuleContext<FandangoParser::StringContext>(0);
}

tree::TerminalNode* FandangoParser::SymbolContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}

FandangoParser::Generator_callContext* FandangoParser::SymbolContext::generator_call() {
  return getRuleContext<FandangoParser::Generator_callContext>(0);
}

FandangoParser::Char_setContext* FandangoParser::SymbolContext::char_set() {
  return getRuleContext<FandangoParser::Char_setContext>(0);
}

tree::TerminalNode* FandangoParser::SymbolContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::AlternativeContext* FandangoParser::SymbolContext::alternative() {
  return getRuleContext<FandangoParser::AlternativeContext>(0);
}

tree::TerminalNode* FandangoParser::SymbolContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}


size_t FandangoParser::SymbolContext::getRuleIndex() const {
  return FandangoParser::RuleSymbol;
}


std::any FandangoParser::SymbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSymbol(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SymbolContext* FandangoParser::symbol() {
  SymbolContext *_localctx = _tracker.createInstance<SymbolContext>(_ctx, getState());
  enterRule(_localctx, 22, FandangoParser::RuleSymbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(653);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 1);
        setState(644);
        nonterminal_right();
        break;
      }

      case FandangoParser::STRING: {
        enterOuterAlt(_localctx, 2);
        setState(645);
        string();
        break;
      }

      case FandangoParser::NUMBER: {
        enterOuterAlt(_localctx, 3);
        setState(646);
        match(FandangoParser::NUMBER);
        break;
      }

      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 4);
        setState(647);
        generator_call(0);
        break;
      }

      case FandangoParser::OPEN_BRACK: {
        enterOuterAlt(_localctx, 5);
        setState(648);
        char_set();
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 6);
        setState(649);
        match(FandangoParser::OPEN_PAREN);
        setState(650);
        alternative();
        setState(651);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nonterminal_rightContext ------------------------------------------------------------------

FandangoParser::Nonterminal_rightContext::Nonterminal_rightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Nonterminal_rightContext::LESS_THAN() {
  return getToken(FandangoParser::LESS_THAN, 0);
}

std::vector<FandangoParser::IdentifierContext *> FandangoParser::Nonterminal_rightContext::identifier() {
  return getRuleContexts<FandangoParser::IdentifierContext>();
}

FandangoParser::IdentifierContext* FandangoParser::Nonterminal_rightContext::identifier(size_t i) {
  return getRuleContext<FandangoParser::IdentifierContext>(i);
}

tree::TerminalNode* FandangoParser::Nonterminal_rightContext::GREATER_THAN() {
  return getToken(FandangoParser::GREATER_THAN, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::Nonterminal_rightContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::Nonterminal_rightContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}


size_t FandangoParser::Nonterminal_rightContext::getRuleIndex() const {
  return FandangoParser::RuleNonterminal_right;
}


std::any FandangoParser::Nonterminal_rightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNonterminal_right(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Nonterminal_rightContext* FandangoParser::nonterminal_right() {
  Nonterminal_rightContext *_localctx = _tracker.createInstance<Nonterminal_rightContext>(_ctx, getState());
  enterRule(_localctx, 24, FandangoParser::RuleNonterminal_right);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(655);
    match(FandangoParser::LESS_THAN);
    setState(664);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      setState(659);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
      case 1: {
        setState(656);
        identifier();
        setState(657);
        match(FandangoParser::COLON);
        break;
      }

      default:
        break;
      }
      setState(661);
      identifier();
      setState(662);
      match(FandangoParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(666);
    identifier();
    setState(667);
    match(FandangoParser::GREATER_THAN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonterminalContext ------------------------------------------------------------------

FandangoParser::NonterminalContext::NonterminalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::NonterminalContext::LESS_THAN() {
  return getToken(FandangoParser::LESS_THAN, 0);
}

FandangoParser::IdentifierContext* FandangoParser::NonterminalContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::NonterminalContext::GREATER_THAN() {
  return getToken(FandangoParser::GREATER_THAN, 0);
}


size_t FandangoParser::NonterminalContext::getRuleIndex() const {
  return FandangoParser::RuleNonterminal;
}


std::any FandangoParser::NonterminalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNonterminal(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::NonterminalContext* FandangoParser::nonterminal() {
  NonterminalContext *_localctx = _tracker.createInstance<NonterminalContext>(_ctx, getState());
  enterRule(_localctx, 26, FandangoParser::RuleNonterminal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(669);
    match(FandangoParser::LESS_THAN);
    setState(670);
    identifier();
    setState(671);
    match(FandangoParser::GREATER_THAN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generator_callContext ------------------------------------------------------------------

FandangoParser::Generator_callContext::Generator_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Generator_callContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

FandangoParser::Generator_callContext* FandangoParser::Generator_callContext::generator_call() {
  return getRuleContext<FandangoParser::Generator_callContext>(0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Generator_callContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::GenexpContext* FandangoParser::Generator_callContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::Generator_callContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}


size_t FandangoParser::Generator_callContext::getRuleIndex() const {
  return FandangoParser::RuleGenerator_call;
}


std::any FandangoParser::Generator_callContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGenerator_call(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Generator_callContext* FandangoParser::generator_call() {
   return generator_call(0);
}

FandangoParser::Generator_callContext* FandangoParser::generator_call(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Generator_callContext *_localctx = _tracker.createInstance<Generator_callContext>(_ctx, parentState);
  FandangoParser::Generator_callContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 28;
  enterRecursionRule(_localctx, 28, FandangoParser::RuleGenerator_call, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(674);
    identifier();
    _ctx->stop = _input->LT(-1);
    setState(694);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(692);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(676);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(677);
          match(FandangoParser::DOT);
          setState(678);
          identifier();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(679);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(680);
          match(FandangoParser::OPEN_BRACK);
          setState(681);
          slices();
          setState(682);
          match(FandangoParser::CLOSE_BRACK);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(684);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(685);
          genexp();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(686);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(687);
          match(FandangoParser::OPEN_PAREN);
          setState(689);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 74)) & 93071897) != 0)) {
            setState(688);
            arguments();
          }
          setState(691);
          match(FandangoParser::CLOSE_PAREN);
          break;
        }

        default:
          break;
        } 
      }
      setState(696);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Char_setContext ------------------------------------------------------------------

FandangoParser::Char_setContext::Char_setContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Char_setContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::StringContext* FandangoParser::Char_setContext::string() {
  return getRuleContext<FandangoParser::StringContext>(0);
}

tree::TerminalNode* FandangoParser::Char_setContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Char_setContext::XOR() {
  return getToken(FandangoParser::XOR, 0);
}


size_t FandangoParser::Char_setContext::getRuleIndex() const {
  return FandangoParser::RuleChar_set;
}


std::any FandangoParser::Char_setContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitChar_set(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Char_setContext* FandangoParser::char_set() {
  Char_setContext *_localctx = _tracker.createInstance<Char_setContext>(_ctx, getState());
  enterRule(_localctx, 30, FandangoParser::RuleChar_set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(697);
    match(FandangoParser::OPEN_BRACK);
    setState(699);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::XOR) {
      setState(698);
      match(FandangoParser::XOR);
    }
    setState(701);
    string();
    setState(702);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstraintContext ------------------------------------------------------------------

FandangoParser::ConstraintContext::ConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::ConstraintContext::WHERE() {
  return getToken(FandangoParser::WHERE, 0);
}

FandangoParser::ImpliesContext* FandangoParser::ConstraintContext::implies() {
  return getRuleContext<FandangoParser::ImpliesContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::ConstraintContext::INDENT() {
  return getTokens(FandangoParser::INDENT);
}

tree::TerminalNode* FandangoParser::ConstraintContext::INDENT(size_t i) {
  return getToken(FandangoParser::INDENT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::ConstraintContext::DEDENT() {
  return getTokens(FandangoParser::DEDENT);
}

tree::TerminalNode* FandangoParser::ConstraintContext::DEDENT(size_t i) {
  return getToken(FandangoParser::DEDENT, i);
}

tree::TerminalNode* FandangoParser::ConstraintContext::MINIMIZING() {
  return getToken(FandangoParser::MINIMIZING, 0);
}

FandangoParser::ExprContext* FandangoParser::ConstraintContext::expr() {
  return getRuleContext<FandangoParser::ExprContext>(0);
}

tree::TerminalNode* FandangoParser::ConstraintContext::SEMI_COLON() {
  return getToken(FandangoParser::SEMI_COLON, 0);
}

tree::TerminalNode* FandangoParser::ConstraintContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::ConstraintContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::ConstraintContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

tree::TerminalNode* FandangoParser::ConstraintContext::MAXIMIZING() {
  return getToken(FandangoParser::MAXIMIZING, 0);
}


size_t FandangoParser::ConstraintContext::getRuleIndex() const {
  return FandangoParser::RuleConstraint;
}


std::any FandangoParser::ConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitConstraint(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ConstraintContext* FandangoParser::constraint() {
  ConstraintContext *_localctx = _tracker.createInstance<ConstraintContext>(_ctx, getState());
  enterRule(_localctx, 32, FandangoParser::RuleConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(767);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(707);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::INDENT) {
        setState(704);
        match(FandangoParser::INDENT);
        setState(709);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(710);
      match(FandangoParser::WHERE);
      setState(711);
      implies();
      setState(715);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::DEDENT) {
        setState(712);
        match(FandangoParser::DEDENT);
        setState(717);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(721);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::INDENT) {
        setState(718);
        match(FandangoParser::INDENT);
        setState(723);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(724);
      match(FandangoParser::MINIMIZING);
      setState(725);
      expr();
      setState(733);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(726);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(728); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(727);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(730); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(732);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(738);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::DEDENT) {
        setState(735);
        match(FandangoParser::DEDENT);
        setState(740);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(744);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::INDENT) {
        setState(741);
        match(FandangoParser::INDENT);
        setState(746);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(747);
      match(FandangoParser::MAXIMIZING);
      setState(748);
      expr();
      setState(756);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(749);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(751); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(750);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(753); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(755);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(761);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::DEDENT) {
        setState(758);
        match(FandangoParser::DEDENT);
        setState(763);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(764);
      implies();
      setState(765);
      match(FandangoParser::SEMI_COLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImpliesContext ------------------------------------------------------------------

FandangoParser::ImpliesContext::ImpliesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Formula_disjunctionContext *> FandangoParser::ImpliesContext::formula_disjunction() {
  return getRuleContexts<FandangoParser::Formula_disjunctionContext>();
}

FandangoParser::Formula_disjunctionContext* FandangoParser::ImpliesContext::formula_disjunction(size_t i) {
  return getRuleContext<FandangoParser::Formula_disjunctionContext>(i);
}

tree::TerminalNode* FandangoParser::ImpliesContext::ARROW() {
  return getToken(FandangoParser::ARROW, 0);
}

tree::TerminalNode* FandangoParser::ImpliesContext::SEMI_COLON() {
  return getToken(FandangoParser::SEMI_COLON, 0);
}

tree::TerminalNode* FandangoParser::ImpliesContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::ImpliesContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

FandangoParser::QuantifierContext* FandangoParser::ImpliesContext::quantifier() {
  return getRuleContext<FandangoParser::QuantifierContext>(0);
}


size_t FandangoParser::ImpliesContext::getRuleIndex() const {
  return FandangoParser::RuleImplies;
}


std::any FandangoParser::ImpliesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImplies(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ImpliesContext* FandangoParser::implies() {
  ImpliesContext *_localctx = _tracker.createInstance<ImpliesContext>(_ctx, getState());
  enterRule(_localctx, 34, FandangoParser::RuleImplies);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(775);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(769);
      formula_disjunction();
      setState(770);
      match(FandangoParser::ARROW);
      setState(771);
      formula_disjunction();
      setState(772);
      _la = _input->LA(1);
      if (!(_la == FandangoParser::EOF || _la == FandangoParser::SEMI_COLON

      || _la == FandangoParser::NEWLINE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(774);
      quantifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Implies_in_lineContext ------------------------------------------------------------------

FandangoParser::Implies_in_lineContext::Implies_in_lineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Formula_disjunctionContext *> FandangoParser::Implies_in_lineContext::formula_disjunction() {
  return getRuleContexts<FandangoParser::Formula_disjunctionContext>();
}

FandangoParser::Formula_disjunctionContext* FandangoParser::Implies_in_lineContext::formula_disjunction(size_t i) {
  return getRuleContext<FandangoParser::Formula_disjunctionContext>(i);
}

tree::TerminalNode* FandangoParser::Implies_in_lineContext::ARROW() {
  return getToken(FandangoParser::ARROW, 0);
}

FandangoParser::Quantifier_in_lineContext* FandangoParser::Implies_in_lineContext::quantifier_in_line() {
  return getRuleContext<FandangoParser::Quantifier_in_lineContext>(0);
}


size_t FandangoParser::Implies_in_lineContext::getRuleIndex() const {
  return FandangoParser::RuleImplies_in_line;
}


std::any FandangoParser::Implies_in_lineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImplies_in_line(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Implies_in_lineContext* FandangoParser::implies_in_line() {
  Implies_in_lineContext *_localctx = _tracker.createInstance<Implies_in_lineContext>(_ctx, getState());
  enterRule(_localctx, 36, FandangoParser::RuleImplies_in_line);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(782);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(777);
      formula_disjunction();
      setState(778);
      match(FandangoParser::ARROW);
      setState(779);
      formula_disjunction();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(781);
      quantifier_in_line();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantifierContext ------------------------------------------------------------------

FandangoParser::QuantifierContext::QuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::QuantifierContext::FORALL() {
  return getToken(FandangoParser::FORALL, 0);
}

FandangoParser::NonterminalContext* FandangoParser::QuantifierContext::nonterminal() {
  return getRuleContext<FandangoParser::NonterminalContext>(0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Dot_selectionContext* FandangoParser::QuantifierContext::dot_selection() {
  return getRuleContext<FandangoParser::Dot_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::QuantifierContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::QuantifierContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

tree::TerminalNode* FandangoParser::QuantifierContext::INDENT() {
  return getToken(FandangoParser::INDENT, 0);
}

FandangoParser::QuantifierContext* FandangoParser::QuantifierContext::quantifier() {
  return getRuleContext<FandangoParser::QuantifierContext>(0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::DEDENT() {
  return getToken(FandangoParser::DEDENT, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::EXISTS() {
  return getToken(FandangoParser::EXISTS, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::ANY() {
  return getToken(FandangoParser::ANY, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::QuantifierContext::OPEN_PAREN() {
  return getTokens(FandangoParser::OPEN_PAREN);
}

tree::TerminalNode* FandangoParser::QuantifierContext::OPEN_PAREN(size_t i) {
  return getToken(FandangoParser::OPEN_PAREN, i);
}

FandangoParser::Quantifier_in_lineContext* FandangoParser::QuantifierContext::quantifier_in_line() {
  return getRuleContext<FandangoParser::Quantifier_in_lineContext>(0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::FOR() {
  return getToken(FandangoParser::FOR, 0);
}

FandangoParser::Star_selectionContext* FandangoParser::QuantifierContext::star_selection() {
  return getRuleContext<FandangoParser::Star_selectionContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::QuantifierContext::CLOSE_PAREN() {
  return getTokens(FandangoParser::CLOSE_PAREN);
}

tree::TerminalNode* FandangoParser::QuantifierContext::CLOSE_PAREN(size_t i) {
  return getToken(FandangoParser::CLOSE_PAREN, i);
}

FandangoParser::IdentifierContext* FandangoParser::QuantifierContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::SEMI_COLON() {
  return getToken(FandangoParser::SEMI_COLON, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::ALL() {
  return getToken(FandangoParser::ALL, 0);
}

FandangoParser::Formula_disjunctionContext* FandangoParser::QuantifierContext::formula_disjunction() {
  return getRuleContext<FandangoParser::Formula_disjunctionContext>(0);
}


size_t FandangoParser::QuantifierContext::getRuleIndex() const {
  return FandangoParser::RuleQuantifier;
}


std::any FandangoParser::QuantifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitQuantifier(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::QuantifierContext* FandangoParser::quantifier() {
  QuantifierContext *_localctx = _tracker.createInstance<QuantifierContext>(_ctx, getState());
  enterRule(_localctx, 38, FandangoParser::RuleQuantifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(992);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(784);
      match(FandangoParser::FORALL);
      setState(785);
      nonterminal();
      setState(786);
      match(FandangoParser::IN);
      setState(787);
      dot_selection(0);
      setState(788);
      match(FandangoParser::COLON);
      setState(795);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::NEWLINE: {
          setState(789);
          match(FandangoParser::NEWLINE);
          setState(790);
          match(FandangoParser::INDENT);
          setState(791);
          quantifier();
          setState(792);
          match(FandangoParser::DEDENT);
          break;
        }

        case FandangoParser::FSTRING_START_QUOTE:
        case FandangoParser::FSTRING_START_SINGLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::AWAIT:
        case FandangoParser::FALSE:
        case FandangoParser::NONE:
        case FandangoParser::NOT:
        case FandangoParser::TRUE:
        case FandangoParser::FORALL:
        case FandangoParser::EXISTS:
        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::POWER:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::LESS_THAN: {
          setState(794);
          quantifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(797);
      match(FandangoParser::EXISTS);
      setState(798);
      nonterminal();
      setState(799);
      match(FandangoParser::IN);
      setState(800);
      dot_selection(0);
      setState(801);
      match(FandangoParser::COLON);
      setState(808);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::NEWLINE: {
          setState(802);
          match(FandangoParser::NEWLINE);
          setState(803);
          match(FandangoParser::INDENT);
          setState(804);
          quantifier();
          setState(805);
          match(FandangoParser::DEDENT);
          break;
        }

        case FandangoParser::FSTRING_START_QUOTE:
        case FandangoParser::FSTRING_START_SINGLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::AWAIT:
        case FandangoParser::FALSE:
        case FandangoParser::NONE:
        case FandangoParser::NOT:
        case FandangoParser::TRUE:
        case FandangoParser::FORALL:
        case FandangoParser::EXISTS:
        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::POWER:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::LESS_THAN: {
          setState(807);
          quantifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(810);
      match(FandangoParser::ANY);
      setState(811);
      match(FandangoParser::OPEN_PAREN);
      setState(812);
      quantifier_in_line();
      setState(813);
      match(FandangoParser::FOR);
      setState(816);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(814);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(815);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(818);
      match(FandangoParser::IN);
      setState(819);
      star_selection();
      setState(820);
      match(FandangoParser::CLOSE_PAREN);
      setState(828);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(821);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(823); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(822);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(825); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(827);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(830);
      match(FandangoParser::ANY);
      setState(831);
      match(FandangoParser::OPEN_PAREN);
      setState(832);
      match(FandangoParser::OPEN_BRACK);
      setState(833);
      quantifier_in_line();
      setState(834);
      match(FandangoParser::FOR);
      setState(837);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(835);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(836);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(839);
      match(FandangoParser::IN);
      setState(840);
      star_selection();
      setState(841);
      match(FandangoParser::CLOSE_BRACK);
      setState(842);
      match(FandangoParser::CLOSE_PAREN);
      setState(850);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(843);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(845); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(844);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(847); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(849);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(852);
      match(FandangoParser::ANY);
      setState(853);
      match(FandangoParser::OPEN_PAREN);
      setState(854);
      match(FandangoParser::OPEN_PAREN);
      setState(855);
      quantifier_in_line();
      setState(856);
      match(FandangoParser::FOR);
      setState(859);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(857);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(858);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(861);
      match(FandangoParser::IN);
      setState(862);
      star_selection();
      setState(863);
      match(FandangoParser::CLOSE_BRACK);
      setState(864);
      match(FandangoParser::CLOSE_PAREN);
      setState(872);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(865);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(867); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(866);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(869); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(871);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(874);
      match(FandangoParser::ANY);
      setState(875);
      match(FandangoParser::OPEN_PAREN);
      setState(876);
      match(FandangoParser::OPEN_BRACE);
      setState(877);
      quantifier_in_line();
      setState(878);
      match(FandangoParser::FOR);
      setState(881);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(879);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(880);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(883);
      match(FandangoParser::IN);
      setState(884);
      star_selection();
      setState(885);
      match(FandangoParser::CLOSE_BRACE);
      setState(886);
      match(FandangoParser::CLOSE_PAREN);
      setState(894);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(887);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(889); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(888);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(891); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(893);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(896);
      match(FandangoParser::ALL);
      setState(897);
      match(FandangoParser::OPEN_PAREN);
      setState(898);
      quantifier_in_line();
      setState(899);
      match(FandangoParser::FOR);
      setState(902);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(900);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(901);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(904);
      match(FandangoParser::IN);
      setState(905);
      star_selection();
      setState(906);
      match(FandangoParser::CLOSE_PAREN);
      setState(914);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(907);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(909); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(908);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(911); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(913);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(916);
      match(FandangoParser::ALL);
      setState(917);
      match(FandangoParser::OPEN_PAREN);
      setState(918);
      match(FandangoParser::OPEN_PAREN);
      setState(919);
      quantifier_in_line();
      setState(920);
      match(FandangoParser::FOR);
      setState(923);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(921);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(922);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(925);
      match(FandangoParser::IN);
      setState(926);
      star_selection();
      setState(927);
      match(FandangoParser::CLOSE_PAREN);
      setState(928);
      match(FandangoParser::CLOSE_PAREN);
      setState(936);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(929);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(931); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(930);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(933); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(935);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(938);
      match(FandangoParser::ALL);
      setState(939);
      match(FandangoParser::OPEN_PAREN);
      setState(940);
      match(FandangoParser::OPEN_BRACK);
      setState(941);
      quantifier_in_line();
      setState(942);
      match(FandangoParser::FOR);
      setState(945);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(943);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(944);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(947);
      match(FandangoParser::IN);
      setState(948);
      star_selection();
      setState(949);
      match(FandangoParser::CLOSE_BRACK);
      setState(950);
      match(FandangoParser::CLOSE_PAREN);
      setState(958);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(951);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(953); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(952);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(955); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(957);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(960);
      match(FandangoParser::ALL);
      setState(961);
      match(FandangoParser::OPEN_PAREN);
      setState(962);
      match(FandangoParser::OPEN_BRACE);
      setState(963);
      quantifier_in_line();
      setState(964);
      match(FandangoParser::FOR);
      setState(967);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(965);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(966);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(969);
      match(FandangoParser::IN);
      setState(970);
      star_selection();
      setState(971);
      match(FandangoParser::CLOSE_BRACE);
      setState(972);
      match(FandangoParser::CLOSE_PAREN);
      setState(980);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(973);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(975); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(974);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(977); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(979);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(982);
      formula_disjunction();
      setState(990);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(983);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(985); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(984);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(987); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(989);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Quantifier_in_lineContext ------------------------------------------------------------------

FandangoParser::Quantifier_in_lineContext::Quantifier_in_lineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::FORALL() {
  return getToken(FandangoParser::FORALL, 0);
}

FandangoParser::NonterminalContext* FandangoParser::Quantifier_in_lineContext::nonterminal() {
  return getRuleContext<FandangoParser::NonterminalContext>(0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Dot_selectionContext* FandangoParser::Quantifier_in_lineContext::dot_selection() {
  return getRuleContext<FandangoParser::Dot_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::INDENT() {
  return getToken(FandangoParser::INDENT, 0);
}

FandangoParser::Quantifier_in_lineContext* FandangoParser::Quantifier_in_lineContext::quantifier_in_line() {
  return getRuleContext<FandangoParser::Quantifier_in_lineContext>(0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::DEDENT() {
  return getToken(FandangoParser::DEDENT, 0);
}

FandangoParser::QuantifierContext* FandangoParser::Quantifier_in_lineContext::quantifier() {
  return getRuleContext<FandangoParser::QuantifierContext>(0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::EXISTS() {
  return getToken(FandangoParser::EXISTS, 0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::ANY() {
  return getToken(FandangoParser::ANY, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::Quantifier_in_lineContext::OPEN_PAREN() {
  return getTokens(FandangoParser::OPEN_PAREN);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::OPEN_PAREN(size_t i) {
  return getToken(FandangoParser::OPEN_PAREN, i);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::FOR() {
  return getToken(FandangoParser::FOR, 0);
}

FandangoParser::Star_selectionContext* FandangoParser::Quantifier_in_lineContext::star_selection() {
  return getRuleContext<FandangoParser::Star_selectionContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Quantifier_in_lineContext::CLOSE_PAREN() {
  return getTokens(FandangoParser::CLOSE_PAREN);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::CLOSE_PAREN(size_t i) {
  return getToken(FandangoParser::CLOSE_PAREN, i);
}

FandangoParser::IdentifierContext* FandangoParser::Quantifier_in_lineContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::ALL() {
  return getToken(FandangoParser::ALL, 0);
}

FandangoParser::Formula_disjunctionContext* FandangoParser::Quantifier_in_lineContext::formula_disjunction() {
  return getRuleContext<FandangoParser::Formula_disjunctionContext>(0);
}


size_t FandangoParser::Quantifier_in_lineContext::getRuleIndex() const {
  return FandangoParser::RuleQuantifier_in_line;
}


std::any FandangoParser::Quantifier_in_lineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitQuantifier_in_line(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Quantifier_in_lineContext* FandangoParser::quantifier_in_line() {
  Quantifier_in_lineContext *_localctx = _tracker.createInstance<Quantifier_in_lineContext>(_ctx, getState());
  enterRule(_localctx, 40, FandangoParser::RuleQuantifier_in_line);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1129);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(994);
      match(FandangoParser::FORALL);
      setState(995);
      nonterminal();
      setState(996);
      match(FandangoParser::IN);
      setState(997);
      dot_selection(0);
      setState(998);
      match(FandangoParser::COLON);
      setState(1005);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::NEWLINE: {
          setState(999);
          match(FandangoParser::NEWLINE);
          setState(1000);
          match(FandangoParser::INDENT);
          setState(1001);
          quantifier_in_line();
          setState(1002);
          match(FandangoParser::DEDENT);
          break;
        }

        case FandangoParser::FSTRING_START_QUOTE:
        case FandangoParser::FSTRING_START_SINGLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::AWAIT:
        case FandangoParser::FALSE:
        case FandangoParser::NONE:
        case FandangoParser::NOT:
        case FandangoParser::TRUE:
        case FandangoParser::FORALL:
        case FandangoParser::EXISTS:
        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::POWER:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::LESS_THAN: {
          setState(1004);
          quantifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1007);
      match(FandangoParser::EXISTS);
      setState(1008);
      nonterminal();
      setState(1009);
      match(FandangoParser::IN);
      setState(1010);
      dot_selection(0);
      setState(1011);
      match(FandangoParser::COLON);
      setState(1018);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::NEWLINE: {
          setState(1012);
          match(FandangoParser::NEWLINE);
          setState(1013);
          match(FandangoParser::INDENT);
          setState(1014);
          quantifier_in_line();
          setState(1015);
          match(FandangoParser::DEDENT);
          break;
        }

        case FandangoParser::FSTRING_START_QUOTE:
        case FandangoParser::FSTRING_START_SINGLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::AWAIT:
        case FandangoParser::FALSE:
        case FandangoParser::NONE:
        case FandangoParser::NOT:
        case FandangoParser::TRUE:
        case FandangoParser::FORALL:
        case FandangoParser::EXISTS:
        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::POWER:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::LESS_THAN: {
          setState(1017);
          quantifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1020);
      match(FandangoParser::ANY);
      setState(1021);
      match(FandangoParser::OPEN_PAREN);
      setState(1022);
      quantifier_in_line();
      setState(1023);
      match(FandangoParser::FOR);
      setState(1026);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(1024);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(1025);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1028);
      match(FandangoParser::IN);
      setState(1029);
      star_selection();
      setState(1030);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1032);
      match(FandangoParser::ANY);
      setState(1033);
      match(FandangoParser::OPEN_PAREN);
      setState(1034);
      match(FandangoParser::OPEN_BRACK);
      setState(1035);
      quantifier_in_line();
      setState(1036);
      match(FandangoParser::FOR);
      setState(1039);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(1037);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(1038);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1041);
      match(FandangoParser::IN);
      setState(1042);
      star_selection();
      setState(1043);
      match(FandangoParser::CLOSE_BRACK);
      setState(1044);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1046);
      match(FandangoParser::ANY);
      setState(1047);
      match(FandangoParser::OPEN_PAREN);
      setState(1048);
      match(FandangoParser::OPEN_PAREN);
      setState(1049);
      quantifier_in_line();
      setState(1050);
      match(FandangoParser::FOR);
      setState(1053);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(1051);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(1052);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1055);
      match(FandangoParser::IN);
      setState(1056);
      star_selection();
      setState(1057);
      match(FandangoParser::CLOSE_BRACK);
      setState(1058);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1060);
      match(FandangoParser::ANY);
      setState(1061);
      match(FandangoParser::OPEN_PAREN);
      setState(1062);
      match(FandangoParser::OPEN_BRACE);
      setState(1063);
      quantifier_in_line();
      setState(1064);
      match(FandangoParser::FOR);
      setState(1067);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(1065);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(1066);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1069);
      match(FandangoParser::IN);
      setState(1070);
      star_selection();
      setState(1071);
      match(FandangoParser::CLOSE_BRACE);
      setState(1072);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1074);
      match(FandangoParser::ALL);
      setState(1075);
      match(FandangoParser::OPEN_PAREN);
      setState(1076);
      quantifier_in_line();
      setState(1077);
      match(FandangoParser::FOR);
      setState(1080);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(1078);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(1079);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1082);
      match(FandangoParser::IN);
      setState(1083);
      star_selection();
      setState(1084);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1086);
      match(FandangoParser::ALL);
      setState(1087);
      match(FandangoParser::OPEN_PAREN);
      setState(1088);
      match(FandangoParser::OPEN_PAREN);
      setState(1089);
      quantifier_in_line();
      setState(1090);
      match(FandangoParser::FOR);
      setState(1093);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(1091);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(1092);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1095);
      match(FandangoParser::IN);
      setState(1096);
      star_selection();
      setState(1097);
      match(FandangoParser::CLOSE_PAREN);
      setState(1098);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1100);
      match(FandangoParser::ALL);
      setState(1101);
      match(FandangoParser::OPEN_PAREN);
      setState(1102);
      match(FandangoParser::OPEN_BRACK);
      setState(1103);
      quantifier_in_line();
      setState(1104);
      match(FandangoParser::FOR);
      setState(1107);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(1105);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(1106);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1109);
      match(FandangoParser::IN);
      setState(1110);
      star_selection();
      setState(1111);
      match(FandangoParser::CLOSE_BRACK);
      setState(1112);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1114);
      match(FandangoParser::ALL);
      setState(1115);
      match(FandangoParser::OPEN_PAREN);
      setState(1116);
      match(FandangoParser::OPEN_BRACE);
      setState(1117);
      quantifier_in_line();
      setState(1118);
      match(FandangoParser::FOR);
      setState(1121);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(1119);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(1120);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1123);
      match(FandangoParser::IN);
      setState(1124);
      star_selection();
      setState(1125);
      match(FandangoParser::CLOSE_BRACE);
      setState(1126);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1128);
      formula_disjunction();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_disjunctionContext ------------------------------------------------------------------

FandangoParser::Formula_disjunctionContext::Formula_disjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Formula_conjunctionContext *> FandangoParser::Formula_disjunctionContext::formula_conjunction() {
  return getRuleContexts<FandangoParser::Formula_conjunctionContext>();
}

FandangoParser::Formula_conjunctionContext* FandangoParser::Formula_disjunctionContext::formula_conjunction(size_t i) {
  return getRuleContext<FandangoParser::Formula_conjunctionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Formula_disjunctionContext::OR() {
  return getTokens(FandangoParser::OR);
}

tree::TerminalNode* FandangoParser::Formula_disjunctionContext::OR(size_t i) {
  return getToken(FandangoParser::OR, i);
}


size_t FandangoParser::Formula_disjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_disjunction;
}


std::any FandangoParser::Formula_disjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_disjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_disjunctionContext* FandangoParser::formula_disjunction() {
  Formula_disjunctionContext *_localctx = _tracker.createInstance<Formula_disjunctionContext>(_ctx, getState());
  enterRule(_localctx, 42, FandangoParser::RuleFormula_disjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1131);
    formula_conjunction();
    setState(1136);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR) {
      setState(1132);
      match(FandangoParser::OR);
      setState(1133);
      formula_conjunction();
      setState(1138);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_conjunctionContext ------------------------------------------------------------------

FandangoParser::Formula_conjunctionContext::Formula_conjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Formula_atomContext *> FandangoParser::Formula_conjunctionContext::formula_atom() {
  return getRuleContexts<FandangoParser::Formula_atomContext>();
}

FandangoParser::Formula_atomContext* FandangoParser::Formula_conjunctionContext::formula_atom(size_t i) {
  return getRuleContext<FandangoParser::Formula_atomContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Formula_conjunctionContext::AND() {
  return getTokens(FandangoParser::AND);
}

tree::TerminalNode* FandangoParser::Formula_conjunctionContext::AND(size_t i) {
  return getToken(FandangoParser::AND, i);
}


size_t FandangoParser::Formula_conjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_conjunction;
}


std::any FandangoParser::Formula_conjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_conjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_conjunctionContext* FandangoParser::formula_conjunction() {
  Formula_conjunctionContext *_localctx = _tracker.createInstance<Formula_conjunctionContext>(_ctx, getState());
  enterRule(_localctx, 44, FandangoParser::RuleFormula_conjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1139);
    formula_atom();
    setState(1144);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::AND) {
      setState(1140);
      match(FandangoParser::AND);
      setState(1141);
      formula_atom();
      setState(1146);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_atomContext ------------------------------------------------------------------

FandangoParser::Formula_atomContext::Formula_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Formula_comparisonContext* FandangoParser::Formula_atomContext::formula_comparison() {
  return getRuleContext<FandangoParser::Formula_comparisonContext>(0);
}

tree::TerminalNode* FandangoParser::Formula_atomContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Implies_in_lineContext* FandangoParser::Formula_atomContext::implies_in_line() {
  return getRuleContext<FandangoParser::Implies_in_lineContext>(0);
}

tree::TerminalNode* FandangoParser::Formula_atomContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ExprContext* FandangoParser::Formula_atomContext::expr() {
  return getRuleContext<FandangoParser::ExprContext>(0);
}


size_t FandangoParser::Formula_atomContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_atom;
}


std::any FandangoParser::Formula_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_atomContext* FandangoParser::formula_atom() {
  Formula_atomContext *_localctx = _tracker.createInstance<Formula_atomContext>(_ctx, getState());
  enterRule(_localctx, 46, FandangoParser::RuleFormula_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1153);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1147);
      formula_comparison();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1148);
      match(FandangoParser::OPEN_PAREN);
      setState(1149);
      implies_in_line();
      setState(1150);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1152);
      expr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_comparisonContext ------------------------------------------------------------------

FandangoParser::Formula_comparisonContext::Formula_comparisonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExprContext *> FandangoParser::Formula_comparisonContext::expr() {
  return getRuleContexts<FandangoParser::ExprContext>();
}

FandangoParser::ExprContext* FandangoParser::Formula_comparisonContext::expr(size_t i) {
  return getRuleContext<FandangoParser::ExprContext>(i);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::LESS_THAN() {
  return getToken(FandangoParser::LESS_THAN, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::GREATER_THAN() {
  return getToken(FandangoParser::GREATER_THAN, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::EQUALS() {
  return getToken(FandangoParser::EQUALS, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::GT_EQ() {
  return getToken(FandangoParser::GT_EQ, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::LT_EQ() {
  return getToken(FandangoParser::LT_EQ, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::NOT_EQ_1() {
  return getToken(FandangoParser::NOT_EQ_1, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::NOT_EQ_2() {
  return getToken(FandangoParser::NOT_EQ_2, 0);
}


size_t FandangoParser::Formula_comparisonContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_comparison;
}


std::any FandangoParser::Formula_comparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_comparison(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_comparisonContext* FandangoParser::formula_comparison() {
  Formula_comparisonContext *_localctx = _tracker.createInstance<Formula_comparisonContext>(_ctx, getState());
  enterRule(_localctx, 48, FandangoParser::RuleFormula_comparison);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1155);
    expr();
    setState(1156);
    _la = _input->LA(1);
    if (!(((((_la - 100) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 100)) & 127) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1157);
    expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

FandangoParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Selector_lengthContext* FandangoParser::ExprContext::selector_length() {
  return getRuleContext<FandangoParser::Selector_lengthContext>(0);
}

std::vector<FandangoParser::InversionContext *> FandangoParser::ExprContext::inversion() {
  return getRuleContexts<FandangoParser::InversionContext>();
}

FandangoParser::InversionContext* FandangoParser::ExprContext::inversion(size_t i) {
  return getRuleContext<FandangoParser::InversionContext>(i);
}

tree::TerminalNode* FandangoParser::ExprContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

tree::TerminalNode* FandangoParser::ExprContext::ELSE() {
  return getToken(FandangoParser::ELSE, 0);
}


size_t FandangoParser::ExprContext::getRuleIndex() const {
  return FandangoParser::RuleExpr;
}


std::any FandangoParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExpr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ExprContext* FandangoParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 50, FandangoParser::RuleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1167);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1159);
      selector_length();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1160);
      inversion();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1161);
      inversion();
      setState(1162);
      match(FandangoParser::IF);
      setState(1163);
      inversion();
      setState(1164);
      match(FandangoParser::ELSE);
      setState(1165);
      inversion();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Selector_lengthContext ------------------------------------------------------------------

FandangoParser::Selector_lengthContext::Selector_lengthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::Selector_lengthContext::OR_OP() {
  return getTokens(FandangoParser::OR_OP);
}

tree::TerminalNode* FandangoParser::Selector_lengthContext::OR_OP(size_t i) {
  return getToken(FandangoParser::OR_OP, i);
}

FandangoParser::Dot_selectionContext* FandangoParser::Selector_lengthContext::dot_selection() {
  return getRuleContext<FandangoParser::Dot_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::Selector_lengthContext::LEN() {
  return getToken(FandangoParser::LEN, 0);
}

tree::TerminalNode* FandangoParser::Selector_lengthContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Star_selectionContext* FandangoParser::Selector_lengthContext::star_selection() {
  return getRuleContext<FandangoParser::Star_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::Selector_lengthContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Star_selection_or_dot_selectionContext* FandangoParser::Selector_lengthContext::star_selection_or_dot_selection() {
  return getRuleContext<FandangoParser::Star_selection_or_dot_selectionContext>(0);
}


size_t FandangoParser::Selector_lengthContext::getRuleIndex() const {
  return FandangoParser::RuleSelector_length;
}


std::any FandangoParser::Selector_lengthContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSelector_length(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Selector_lengthContext* FandangoParser::selector_length() {
  Selector_lengthContext *_localctx = _tracker.createInstance<Selector_lengthContext>(_ctx, getState());
  enterRule(_localctx, 52, FandangoParser::RuleSelector_length);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1179);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::OR_OP: {
        enterOuterAlt(_localctx, 1);
        setState(1169);
        match(FandangoParser::OR_OP);
        setState(1170);
        dot_selection(0);
        setState(1171);
        match(FandangoParser::OR_OP);
        break;
      }

      case FandangoParser::LEN: {
        enterOuterAlt(_localctx, 2);
        setState(1173);
        match(FandangoParser::LEN);
        setState(1174);
        match(FandangoParser::OPEN_PAREN);
        setState(1175);
        star_selection();
        setState(1176);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 3);
        setState(1178);
        star_selection_or_dot_selection();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_selection_or_dot_selectionContext ------------------------------------------------------------------

FandangoParser::Star_selection_or_dot_selectionContext::Star_selection_or_dot_selectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Star_selectionContext* FandangoParser::Star_selection_or_dot_selectionContext::star_selection() {
  return getRuleContext<FandangoParser::Star_selectionContext>(0);
}

FandangoParser::Dot_selectionContext* FandangoParser::Star_selection_or_dot_selectionContext::dot_selection() {
  return getRuleContext<FandangoParser::Dot_selectionContext>(0);
}


size_t FandangoParser::Star_selection_or_dot_selectionContext::getRuleIndex() const {
  return FandangoParser::RuleStar_selection_or_dot_selection;
}


std::any FandangoParser::Star_selection_or_dot_selectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_selection_or_dot_selection(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_selection_or_dot_selectionContext* FandangoParser::star_selection_or_dot_selection() {
  Star_selection_or_dot_selectionContext *_localctx = _tracker.createInstance<Star_selection_or_dot_selectionContext>(_ctx, getState());
  enterRule(_localctx, 54, FandangoParser::RuleStar_selection_or_dot_selection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1183);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STAR:
      case FandangoParser::POWER: {
        enterOuterAlt(_localctx, 1);
        setState(1181);
        star_selection();
        break;
      }

      case FandangoParser::OPEN_PAREN:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(1182);
        dot_selection(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_selectionContext ------------------------------------------------------------------

FandangoParser::Star_selectionContext::Star_selectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_selectionContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Dot_selectionContext* FandangoParser::Star_selectionContext::dot_selection() {
  return getRuleContext<FandangoParser::Dot_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::Star_selectionContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}


size_t FandangoParser::Star_selectionContext::getRuleIndex() const {
  return FandangoParser::RuleStar_selection;
}


std::any FandangoParser::Star_selectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_selection(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_selectionContext* FandangoParser::star_selection() {
  Star_selectionContext *_localctx = _tracker.createInstance<Star_selectionContext>(_ctx, getState());
  enterRule(_localctx, 56, FandangoParser::RuleStar_selection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1189);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1185);
        match(FandangoParser::STAR);
        setState(1186);
        dot_selection(0);
        break;
      }

      case FandangoParser::POWER: {
        enterOuterAlt(_localctx, 2);
        setState(1187);
        match(FandangoParser::POWER);
        setState(1188);
        dot_selection(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dot_selectionContext ------------------------------------------------------------------

FandangoParser::Dot_selectionContext::Dot_selectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SelectionContext* FandangoParser::Dot_selectionContext::selection() {
  return getRuleContext<FandangoParser::SelectionContext>(0);
}

FandangoParser::Dot_selectionContext* FandangoParser::Dot_selectionContext::dot_selection() {
  return getRuleContext<FandangoParser::Dot_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::Dot_selectionContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::Dot_selectionContext::DOTDOT() {
  return getToken(FandangoParser::DOTDOT, 0);
}


size_t FandangoParser::Dot_selectionContext::getRuleIndex() const {
  return FandangoParser::RuleDot_selection;
}


std::any FandangoParser::Dot_selectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDot_selection(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Dot_selectionContext* FandangoParser::dot_selection() {
   return dot_selection(0);
}

FandangoParser::Dot_selectionContext* FandangoParser::dot_selection(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Dot_selectionContext *_localctx = _tracker.createInstance<Dot_selectionContext>(_ctx, parentState);
  FandangoParser::Dot_selectionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 58;
  enterRecursionRule(_localctx, 58, FandangoParser::RuleDot_selection, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1192);
    selection();
    _ctx->stop = _input->LT(-1);
    setState(1202);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1200);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Dot_selectionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleDot_selection);
          setState(1194);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1195);
          match(FandangoParser::DOT);
          setState(1196);
          selection();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Dot_selectionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleDot_selection);
          setState(1197);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1198);
          match(FandangoParser::DOTDOT);
          setState(1199);
          selection();
          break;
        }

        default:
          break;
        } 
      }
      setState(1204);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SelectionContext ------------------------------------------------------------------

FandangoParser::SelectionContext::SelectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Base_selectionContext* FandangoParser::SelectionContext::base_selection() {
  return getRuleContext<FandangoParser::Base_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::SelectionContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::Rs_slicesContext* FandangoParser::SelectionContext::rs_slices() {
  return getRuleContext<FandangoParser::Rs_slicesContext>(0);
}

tree::TerminalNode* FandangoParser::SelectionContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

tree::TerminalNode* FandangoParser::SelectionContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::Rs_pairsContext* FandangoParser::SelectionContext::rs_pairs() {
  return getRuleContext<FandangoParser::Rs_pairsContext>(0);
}

tree::TerminalNode* FandangoParser::SelectionContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::SelectionContext::getRuleIndex() const {
  return FandangoParser::RuleSelection;
}


std::any FandangoParser::SelectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSelection(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SelectionContext* FandangoParser::selection() {
  SelectionContext *_localctx = _tracker.createInstance<SelectionContext>(_ctx, getState());
  enterRule(_localctx, 60, FandangoParser::RuleSelection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1216);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1205);
      base_selection();
      setState(1206);
      match(FandangoParser::OPEN_BRACK);
      setState(1207);
      rs_slices();
      setState(1208);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1210);
      base_selection();
      setState(1211);
      match(FandangoParser::OPEN_BRACE);
      setState(1212);
      rs_pairs();
      setState(1213);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1215);
      base_selection();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Base_selectionContext ------------------------------------------------------------------

FandangoParser::Base_selectionContext::Base_selectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::NonterminalContext* FandangoParser::Base_selectionContext::nonterminal() {
  return getRuleContext<FandangoParser::NonterminalContext>(0);
}

tree::TerminalNode* FandangoParser::Base_selectionContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Dot_selectionContext* FandangoParser::Base_selectionContext::dot_selection() {
  return getRuleContext<FandangoParser::Dot_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::Base_selectionContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}


size_t FandangoParser::Base_selectionContext::getRuleIndex() const {
  return FandangoParser::RuleBase_selection;
}


std::any FandangoParser::Base_selectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBase_selection(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Base_selectionContext* FandangoParser::base_selection() {
  Base_selectionContext *_localctx = _tracker.createInstance<Base_selectionContext>(_ctx, getState());
  enterRule(_localctx, 62, FandangoParser::RuleBase_selection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1223);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 1);
        setState(1218);
        nonterminal();
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(1219);
        match(FandangoParser::OPEN_PAREN);
        setState(1220);
        dot_selection(0);
        setState(1221);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_pairsContext ------------------------------------------------------------------

FandangoParser::Rs_pairsContext::Rs_pairsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Rs_pairContext *> FandangoParser::Rs_pairsContext::rs_pair() {
  return getRuleContexts<FandangoParser::Rs_pairContext>();
}

FandangoParser::Rs_pairContext* FandangoParser::Rs_pairsContext::rs_pair(size_t i) {
  return getRuleContext<FandangoParser::Rs_pairContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_pairsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Rs_pairsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Rs_pairsContext::getRuleIndex() const {
  return FandangoParser::RuleRs_pairs;
}


std::any FandangoParser::Rs_pairsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_pairs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_pairsContext* FandangoParser::rs_pairs() {
  Rs_pairsContext *_localctx = _tracker.createInstance<Rs_pairsContext>(_ctx, getState());
  enterRule(_localctx, 64, FandangoParser::RuleRs_pairs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1225);
    rs_pair();
    setState(1230);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1226);
        match(FandangoParser::COMMA);
        setState(1227);
        rs_pair(); 
      }
      setState(1232);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    }
    setState(1234);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1233);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_pairContext ------------------------------------------------------------------

FandangoParser::Rs_pairContext::Rs_pairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Rs_pairContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::NonterminalContext* FandangoParser::Rs_pairContext::nonterminal() {
  return getRuleContext<FandangoParser::NonterminalContext>(0);
}

tree::TerminalNode* FandangoParser::Rs_pairContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::Rs_sliceContext* FandangoParser::Rs_pairContext::rs_slice() {
  return getRuleContext<FandangoParser::Rs_sliceContext>(0);
}


size_t FandangoParser::Rs_pairContext::getRuleIndex() const {
  return FandangoParser::RuleRs_pair;
}


std::any FandangoParser::Rs_pairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_pair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_pairContext* FandangoParser::rs_pair() {
  Rs_pairContext *_localctx = _tracker.createInstance<Rs_pairContext>(_ctx, getState());
  enterRule(_localctx, 66, FandangoParser::RuleRs_pair);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1236);
    match(FandangoParser::STAR);
    setState(1237);
    nonterminal();
    setState(1240);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COLON) {
      setState(1238);
      match(FandangoParser::COLON);
      setState(1239);
      rs_slice();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_slicesContext ------------------------------------------------------------------

FandangoParser::Rs_slicesContext::Rs_slicesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Rs_sliceContext *> FandangoParser::Rs_slicesContext::rs_slice() {
  return getRuleContexts<FandangoParser::Rs_sliceContext>();
}

FandangoParser::Rs_sliceContext* FandangoParser::Rs_slicesContext::rs_slice(size_t i) {
  return getRuleContext<FandangoParser::Rs_sliceContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_slicesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Rs_slicesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Rs_slicesContext::getRuleIndex() const {
  return FandangoParser::RuleRs_slices;
}


std::any FandangoParser::Rs_slicesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_slices(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_slicesContext* FandangoParser::rs_slices() {
  Rs_slicesContext *_localctx = _tracker.createInstance<Rs_slicesContext>(_ctx, getState());
  enterRule(_localctx, 68, FandangoParser::RuleRs_slices);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1242);
    rs_slice();
    setState(1247);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1243);
        match(FandangoParser::COMMA);
        setState(1244);
        rs_slice(); 
      }
      setState(1249);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    }
    setState(1251);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1250);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_sliceContext ------------------------------------------------------------------

FandangoParser::Rs_sliceContext::Rs_sliceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_sliceContext::NUMBER() {
  return getTokens(FandangoParser::NUMBER);
}

tree::TerminalNode* FandangoParser::Rs_sliceContext::NUMBER(size_t i) {
  return getToken(FandangoParser::NUMBER, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_sliceContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::Rs_sliceContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}


size_t FandangoParser::Rs_sliceContext::getRuleIndex() const {
  return FandangoParser::RuleRs_slice;
}


std::any FandangoParser::Rs_sliceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_slice(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_sliceContext* FandangoParser::rs_slice() {
  Rs_sliceContext *_localctx = _tracker.createInstance<Rs_sliceContext>(_ctx, getState());
  enterRule(_localctx, 70, FandangoParser::RuleRs_slice);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1272);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1253);
      match(FandangoParser::NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1255);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(1254);
        match(FandangoParser::NUMBER);
      }
      setState(1257);
      match(FandangoParser::COLON);
      setState(1259);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(1258);
        match(FandangoParser::NUMBER);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1262);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(1261);
        match(FandangoParser::NUMBER);
      }
      setState(1264);
      match(FandangoParser::COLON);
      setState(1266);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(1265);
        match(FandangoParser::NUMBER);
      }
      setState(1268);
      match(FandangoParser::COLON);
      setState(1270);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(1269);
        match(FandangoParser::NUMBER);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PythonContext ------------------------------------------------------------------

FandangoParser::PythonContext::PythonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Compound_stmtContext* FandangoParser::PythonContext::compound_stmt() {
  return getRuleContext<FandangoParser::Compound_stmtContext>(0);
}

FandangoParser::Simple_stmtContext* FandangoParser::PythonContext::simple_stmt() {
  return getRuleContext<FandangoParser::Simple_stmtContext>(0);
}


size_t FandangoParser::PythonContext::getRuleIndex() const {
  return FandangoParser::RulePython;
}


std::any FandangoParser::PythonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPython(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PythonContext* FandangoParser::python() {
  PythonContext *_localctx = _tracker.createInstance<PythonContext>(_ctx, getState());
  enterRule(_localctx, 72, FandangoParser::RulePython);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1276);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ASYNC:
      case FandangoParser::CLASS:
      case FandangoParser::DEF:
      case FandangoParser::FOR:
      case FandangoParser::IF:
      case FandangoParser::MATCH:
      case FandangoParser::TRY:
      case FandangoParser::WHILE:
      case FandangoParser::WITH:
      case FandangoParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1274);
        compound_stmt();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(1275);
        simple_stmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Python_tagContext ------------------------------------------------------------------

FandangoParser::Python_tagContext::Python_tagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::StmtContext* FandangoParser::Python_tagContext::stmt() {
  return getRuleContext<FandangoParser::StmtContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Python_tagContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::Python_tagContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::Python_tagContext::getRuleIndex() const {
  return FandangoParser::RulePython_tag;
}


std::any FandangoParser::Python_tagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPython_tag(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Python_tagContext* FandangoParser::python_tag() {
  Python_tagContext *_localctx = _tracker.createInstance<Python_tagContext>(_ctx, getState());
  enterRule(_localctx, 74, FandangoParser::RulePython_tag);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1281);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(1278);
      match(FandangoParser::NEWLINE);
      setState(1283);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }

    setState(1284);
    stmt();
    setState(1288);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(1285);
      match(FandangoParser::NEWLINE);
      setState(1290);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Python_fileContext ------------------------------------------------------------------

FandangoParser::Python_fileContext::Python_fileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::StatementsContext* FandangoParser::Python_fileContext::statements() {
  return getRuleContext<FandangoParser::StatementsContext>(0);
}

tree::TerminalNode* FandangoParser::Python_fileContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::Python_fileContext::getRuleIndex() const {
  return FandangoParser::RulePython_file;
}


std::any FandangoParser::Python_fileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPython_file(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Python_fileContext* FandangoParser::python_file() {
  Python_fileContext *_localctx = _tracker.createInstance<Python_fileContext>(_ctx, getState());
  enterRule(_localctx, 76, FandangoParser::RulePython_file);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1292);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 542401154646786552) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 1125908589849113) != 0)) {
      setState(1291);
      statements();
    }
    setState(1295);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
    case 1: {
      setState(1294);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InteractiveContext ------------------------------------------------------------------

FandangoParser::InteractiveContext::InteractiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Statement_newlineContext* FandangoParser::InteractiveContext::statement_newline() {
  return getRuleContext<FandangoParser::Statement_newlineContext>(0);
}


size_t FandangoParser::InteractiveContext::getRuleIndex() const {
  return FandangoParser::RuleInteractive;
}


std::any FandangoParser::InteractiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitInteractive(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::InteractiveContext* FandangoParser::interactive() {
  InteractiveContext *_localctx = _tracker.createInstance<InteractiveContext>(_ctx, getState());
  enterRule(_localctx, 78, FandangoParser::RuleInteractive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1297);
    statement_newline();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvalContext ------------------------------------------------------------------

FandangoParser::EvalContext::EvalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ExpressionsContext* FandangoParser::EvalContext::expressions() {
  return getRuleContext<FandangoParser::ExpressionsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::EvalContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::EvalContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

tree::TerminalNode* FandangoParser::EvalContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::EvalContext::getRuleIndex() const {
  return FandangoParser::RuleEval;
}


std::any FandangoParser::EvalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitEval(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::EvalContext* FandangoParser::eval() {
  EvalContext *_localctx = _tracker.createInstance<EvalContext>(_ctx, getState());
  enterRule(_localctx, 80, FandangoParser::RuleEval);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1299);
    expressions();
    setState(1303);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(1300);
      match(FandangoParser::NEWLINE);
      setState(1305);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1307);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      setState(1306);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_typeContext ------------------------------------------------------------------

FandangoParser::Func_typeContext::Func_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Func_typeContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Func_typeContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Func_typeContext::ARROW() {
  return getToken(FandangoParser::ARROW, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Func_typeContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Type_expressionsContext* FandangoParser::Func_typeContext::type_expressions() {
  return getRuleContext<FandangoParser::Type_expressionsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Func_typeContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::Func_typeContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

tree::TerminalNode* FandangoParser::Func_typeContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::Func_typeContext::getRuleIndex() const {
  return FandangoParser::RuleFunc_type;
}


std::any FandangoParser::Func_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunc_type(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Func_typeContext* FandangoParser::func_type() {
  Func_typeContext *_localctx = _tracker.createInstance<Func_typeContext>(_ctx, getState());
  enterRule(_localctx, 82, FandangoParser::RuleFunc_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1309);
    match(FandangoParser::OPEN_PAREN);
    setState(1311);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 93071897) != 0)) {
      setState(1310);
      type_expressions();
    }
    setState(1313);
    match(FandangoParser::CLOSE_PAREN);
    setState(1314);
    match(FandangoParser::ARROW);
    setState(1315);
    expression();
    setState(1319);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(1316);
      match(FandangoParser::NEWLINE);
      setState(1321);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1323);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
    case 1: {
      setState(1322);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementsContext ------------------------------------------------------------------

FandangoParser::StatementsContext::StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::StmtContext *> FandangoParser::StatementsContext::stmt() {
  return getRuleContexts<FandangoParser::StmtContext>();
}

FandangoParser::StmtContext* FandangoParser::StatementsContext::stmt(size_t i) {
  return getRuleContext<FandangoParser::StmtContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::StatementsContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::StatementsContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::StatementsContext::getRuleIndex() const {
  return FandangoParser::RuleStatements;
}


std::any FandangoParser::StatementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStatements(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StatementsContext* FandangoParser::statements() {
  StatementsContext *_localctx = _tracker.createInstance<StatementsContext>(_ctx, getState());
  enterRule(_localctx, 84, FandangoParser::RuleStatements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1327); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1327);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::FSTRING_START_QUOTE:
        case FandangoParser::FSTRING_START_SINGLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::ASSERT:
        case FandangoParser::ASYNC:
        case FandangoParser::AWAIT:
        case FandangoParser::BREAK:
        case FandangoParser::CLASS:
        case FandangoParser::CONTINUE:
        case FandangoParser::DEF:
        case FandangoParser::DEL:
        case FandangoParser::FALSE:
        case FandangoParser::FOR:
        case FandangoParser::FROM:
        case FandangoParser::GLOBAL:
        case FandangoParser::IF:
        case FandangoParser::IMPORT:
        case FandangoParser::LAMBDA:
        case FandangoParser::MATCH:
        case FandangoParser::NONE:
        case FandangoParser::NONLOCAL:
        case FandangoParser::NOT:
        case FandangoParser::PASS:
        case FandangoParser::RAISE:
        case FandangoParser::RETURN:
        case FandangoParser::TRUE:
        case FandangoParser::TRY:
        case FandangoParser::TYPE:
        case FandangoParser::WHILE:
        case FandangoParser::WITH:
        case FandangoParser::YIELD:
        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::POWER:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::LESS_THAN:
        case FandangoParser::AT: {
          setState(1325);
          stmt();
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(1326);
          match(FandangoParser::NEWLINE);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1329); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 542401154646786552) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 1125908589849113) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtContext ------------------------------------------------------------------

FandangoParser::StmtContext::StmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Compound_stmtContext* FandangoParser::StmtContext::compound_stmt() {
  return getRuleContext<FandangoParser::Compound_stmtContext>(0);
}

FandangoParser::Simple_stmtsContext* FandangoParser::StmtContext::simple_stmts() {
  return getRuleContext<FandangoParser::Simple_stmtsContext>(0);
}


size_t FandangoParser::StmtContext::getRuleIndex() const {
  return FandangoParser::RuleStmt;
}


std::any FandangoParser::StmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StmtContext* FandangoParser::stmt() {
  StmtContext *_localctx = _tracker.createInstance<StmtContext>(_ctx, getState());
  enterRule(_localctx, 86, FandangoParser::RuleStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1333);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ASYNC:
      case FandangoParser::CLASS:
      case FandangoParser::DEF:
      case FandangoParser::FOR:
      case FandangoParser::IF:
      case FandangoParser::MATCH:
      case FandangoParser::TRY:
      case FandangoParser::WHILE:
      case FandangoParser::WITH:
      case FandangoParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1331);
        compound_stmt();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(1332);
        simple_stmts();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_newlineContext ------------------------------------------------------------------

FandangoParser::Statement_newlineContext::Statement_newlineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Compound_stmtContext* FandangoParser::Statement_newlineContext::compound_stmt() {
  return getRuleContext<FandangoParser::Compound_stmtContext>(0);
}

tree::TerminalNode* FandangoParser::Statement_newlineContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

FandangoParser::Simple_stmtsContext* FandangoParser::Statement_newlineContext::simple_stmts() {
  return getRuleContext<FandangoParser::Simple_stmtsContext>(0);
}


size_t FandangoParser::Statement_newlineContext::getRuleIndex() const {
  return FandangoParser::RuleStatement_newline;
}


std::any FandangoParser::Statement_newlineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStatement_newline(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Statement_newlineContext* FandangoParser::statement_newline() {
  Statement_newlineContext *_localctx = _tracker.createInstance<Statement_newlineContext>(_ctx, getState());
  enterRule(_localctx, 88, FandangoParser::RuleStatement_newline);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1340);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ASYNC:
      case FandangoParser::CLASS:
      case FandangoParser::DEF:
      case FandangoParser::FOR:
      case FandangoParser::IF:
      case FandangoParser::MATCH:
      case FandangoParser::TRY:
      case FandangoParser::WHILE:
      case FandangoParser::WITH:
      case FandangoParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1335);
        compound_stmt();
        setState(1336);
        match(FandangoParser::NEWLINE);
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(1338);
        simple_stmts();
        break;
      }

      case FandangoParser::NEWLINE: {
        enterOuterAlt(_localctx, 3);
        setState(1339);
        match(FandangoParser::NEWLINE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_stmtsContext ------------------------------------------------------------------

FandangoParser::Simple_stmtsContext::Simple_stmtsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Simple_stmtContext *> FandangoParser::Simple_stmtsContext::simple_stmt() {
  return getRuleContexts<FandangoParser::Simple_stmtContext>();
}

FandangoParser::Simple_stmtContext* FandangoParser::Simple_stmtsContext::simple_stmt(size_t i) {
  return getRuleContext<FandangoParser::Simple_stmtContext>(i);
}

tree::TerminalNode* FandangoParser::Simple_stmtsContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::Simple_stmtsContext::SEMI_COLON() {
  return getTokens(FandangoParser::SEMI_COLON);
}

tree::TerminalNode* FandangoParser::Simple_stmtsContext::SEMI_COLON(size_t i) {
  return getToken(FandangoParser::SEMI_COLON, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Simple_stmtsContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::Simple_stmtsContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::Simple_stmtsContext::getRuleIndex() const {
  return FandangoParser::RuleSimple_stmts;
}


std::any FandangoParser::Simple_stmtsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSimple_stmts(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Simple_stmtsContext* FandangoParser::simple_stmts() {
  Simple_stmtsContext *_localctx = _tracker.createInstance<Simple_stmtsContext>(_ctx, getState());
  enterRule(_localctx, 90, FandangoParser::RuleSimple_stmts);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1342);
    simple_stmt();
    setState(1347);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1343);
        match(FandangoParser::SEMI_COLON);
        setState(1344);
        simple_stmt(); 
      }
      setState(1349);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
    }
    setState(1351);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::SEMI_COLON) {
      setState(1350);
      match(FandangoParser::SEMI_COLON);
    }
    setState(1365);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
    case 1: {
      setState(1354); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1353);
                match(FandangoParser::NEWLINE);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1356); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(1361);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NEWLINE) {
        setState(1358);
        match(FandangoParser::NEWLINE);
        setState(1363);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1364);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_stmtContext ------------------------------------------------------------------

FandangoParser::Simple_stmtContext::Simple_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AssignmentContext* FandangoParser::Simple_stmtContext::assignment() {
  return getRuleContext<FandangoParser::AssignmentContext>(0);
}

FandangoParser::Type_aliasContext* FandangoParser::Simple_stmtContext::type_alias() {
  return getRuleContext<FandangoParser::Type_aliasContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Simple_stmtContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

FandangoParser::Return_stmtContext* FandangoParser::Simple_stmtContext::return_stmt() {
  return getRuleContext<FandangoParser::Return_stmtContext>(0);
}

FandangoParser::Import_stmtContext* FandangoParser::Simple_stmtContext::import_stmt() {
  return getRuleContext<FandangoParser::Import_stmtContext>(0);
}

FandangoParser::Raise_stmtContext* FandangoParser::Simple_stmtContext::raise_stmt() {
  return getRuleContext<FandangoParser::Raise_stmtContext>(0);
}

tree::TerminalNode* FandangoParser::Simple_stmtContext::PASS() {
  return getToken(FandangoParser::PASS, 0);
}

FandangoParser::Del_stmtContext* FandangoParser::Simple_stmtContext::del_stmt() {
  return getRuleContext<FandangoParser::Del_stmtContext>(0);
}

FandangoParser::Yield_stmtContext* FandangoParser::Simple_stmtContext::yield_stmt() {
  return getRuleContext<FandangoParser::Yield_stmtContext>(0);
}

FandangoParser::Assert_stmtContext* FandangoParser::Simple_stmtContext::assert_stmt() {
  return getRuleContext<FandangoParser::Assert_stmtContext>(0);
}

tree::TerminalNode* FandangoParser::Simple_stmtContext::BREAK() {
  return getToken(FandangoParser::BREAK, 0);
}

tree::TerminalNode* FandangoParser::Simple_stmtContext::CONTINUE() {
  return getToken(FandangoParser::CONTINUE, 0);
}

FandangoParser::Global_stmtContext* FandangoParser::Simple_stmtContext::global_stmt() {
  return getRuleContext<FandangoParser::Global_stmtContext>(0);
}

FandangoParser::Nonlocal_stmtContext* FandangoParser::Simple_stmtContext::nonlocal_stmt() {
  return getRuleContext<FandangoParser::Nonlocal_stmtContext>(0);
}


size_t FandangoParser::Simple_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleSimple_stmt;
}


std::any FandangoParser::Simple_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSimple_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Simple_stmtContext* FandangoParser::simple_stmt() {
  Simple_stmtContext *_localctx = _tracker.createInstance<Simple_stmtContext>(_ctx, getState());
  enterRule(_localctx, 92, FandangoParser::RuleSimple_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1381);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1367);
      assignment();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1368);
      type_alias();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1369);
      star_expressions();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1370);
      return_stmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1371);
      import_stmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1372);
      raise_stmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1373);
      match(FandangoParser::PASS);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1374);
      del_stmt();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1375);
      yield_stmt();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1376);
      assert_stmt();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1377);
      match(FandangoParser::BREAK);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1378);
      match(FandangoParser::CONTINUE);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1379);
      global_stmt();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1380);
      nonlocal_stmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compound_stmtContext ------------------------------------------------------------------

FandangoParser::Compound_stmtContext::Compound_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Function_defContext* FandangoParser::Compound_stmtContext::function_def() {
  return getRuleContext<FandangoParser::Function_defContext>(0);
}

FandangoParser::If_stmtContext* FandangoParser::Compound_stmtContext::if_stmt() {
  return getRuleContext<FandangoParser::If_stmtContext>(0);
}

FandangoParser::Class_defContext* FandangoParser::Compound_stmtContext::class_def() {
  return getRuleContext<FandangoParser::Class_defContext>(0);
}

FandangoParser::With_stmtContext* FandangoParser::Compound_stmtContext::with_stmt() {
  return getRuleContext<FandangoParser::With_stmtContext>(0);
}

FandangoParser::For_stmtContext* FandangoParser::Compound_stmtContext::for_stmt() {
  return getRuleContext<FandangoParser::For_stmtContext>(0);
}

FandangoParser::Try_stmtContext* FandangoParser::Compound_stmtContext::try_stmt() {
  return getRuleContext<FandangoParser::Try_stmtContext>(0);
}

FandangoParser::While_stmtContext* FandangoParser::Compound_stmtContext::while_stmt() {
  return getRuleContext<FandangoParser::While_stmtContext>(0);
}

FandangoParser::Match_stmtContext* FandangoParser::Compound_stmtContext::match_stmt() {
  return getRuleContext<FandangoParser::Match_stmtContext>(0);
}


size_t FandangoParser::Compound_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleCompound_stmt;
}


std::any FandangoParser::Compound_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCompound_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Compound_stmtContext* FandangoParser::compound_stmt() {
  Compound_stmtContext *_localctx = _tracker.createInstance<Compound_stmtContext>(_ctx, getState());
  enterRule(_localctx, 94, FandangoParser::RuleCompound_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1391);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1383);
      function_def();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1384);
      if_stmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1385);
      class_def();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1386);
      with_stmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1387);
      for_stmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1388);
      try_stmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1389);
      while_stmt();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1390);
      match_stmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentContext ------------------------------------------------------------------

FandangoParser::AssignmentContext::AssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::AssignmentContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::AssignmentContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::AssignmentContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::AssignmentContext::ASSIGN() {
  return getTokens(FandangoParser::ASSIGN);
}

tree::TerminalNode* FandangoParser::AssignmentContext::ASSIGN(size_t i) {
  return getToken(FandangoParser::ASSIGN, i);
}

FandangoParser::Annotated_rhsContext* FandangoParser::AssignmentContext::annotated_rhs() {
  return getRuleContext<FandangoParser::Annotated_rhsContext>(0);
}

tree::TerminalNode* FandangoParser::AssignmentContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Single_targetContext* FandangoParser::AssignmentContext::single_target() {
  return getRuleContext<FandangoParser::Single_targetContext>(0);
}

tree::TerminalNode* FandangoParser::AssignmentContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Single_subscript_attribute_targetContext* FandangoParser::AssignmentContext::single_subscript_attribute_target() {
  return getRuleContext<FandangoParser::Single_subscript_attribute_targetContext>(0);
}

FandangoParser::Yield_exprContext* FandangoParser::AssignmentContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::AssignmentContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

std::vector<FandangoParser::Star_targetsContext *> FandangoParser::AssignmentContext::star_targets() {
  return getRuleContexts<FandangoParser::Star_targetsContext>();
}

FandangoParser::Star_targetsContext* FandangoParser::AssignmentContext::star_targets(size_t i) {
  return getRuleContext<FandangoParser::Star_targetsContext>(i);
}

FandangoParser::AugassignContext* FandangoParser::AssignmentContext::augassign() {
  return getRuleContext<FandangoParser::AugassignContext>(0);
}


size_t FandangoParser::AssignmentContext::getRuleIndex() const {
  return FandangoParser::RuleAssignment;
}


std::any FandangoParser::AssignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAssignment(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AssignmentContext* FandangoParser::assignment() {
  AssignmentContext *_localctx = _tracker.createInstance<AssignmentContext>(_ctx, getState());
  enterRule(_localctx, 96, FandangoParser::RuleAssignment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1430);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1393);
      identifier();
      setState(1394);
      match(FandangoParser::COLON);
      setState(1395);
      expression();
      setState(1398);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(1396);
        match(FandangoParser::ASSIGN);
        setState(1397);
        annotated_rhs();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1405);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
      case 1: {
        setState(1400);
        match(FandangoParser::OPEN_PAREN);
        setState(1401);
        single_target();
        setState(1402);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

      case 2: {
        setState(1404);
        single_subscript_attribute_target();
        break;
      }

      default:
        break;
      }
      setState(1407);
      match(FandangoParser::COLON);
      setState(1408);
      expression();
      setState(1411);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(1409);
        match(FandangoParser::ASSIGN);
        setState(1410);
        annotated_rhs();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1416); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1413);
                star_targets();
                setState(1414);
                match(FandangoParser::ASSIGN);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1418); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1422);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::YIELD: {
          setState(1420);
          yield_expr();
          break;
        }

        case FandangoParser::FSTRING_START_QUOTE:
        case FandangoParser::FSTRING_START_SINGLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::AWAIT:
        case FandangoParser::FALSE:
        case FandangoParser::LAMBDA:
        case FandangoParser::NONE:
        case FandangoParser::NOT:
        case FandangoParser::TRUE:
        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::POWER:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::LESS_THAN: {
          setState(1421);
          star_expressions();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1424);
      single_target();
      setState(1425);
      augassign();
      setState(1428);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::YIELD: {
          setState(1426);
          yield_expr();
          break;
        }

        case FandangoParser::FSTRING_START_QUOTE:
        case FandangoParser::FSTRING_START_SINGLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::AWAIT:
        case FandangoParser::FALSE:
        case FandangoParser::LAMBDA:
        case FandangoParser::NONE:
        case FandangoParser::NOT:
        case FandangoParser::TRUE:
        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::POWER:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::LESS_THAN: {
          setState(1427);
          star_expressions();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotated_rhsContext ------------------------------------------------------------------

FandangoParser::Annotated_rhsContext::Annotated_rhsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Yield_exprContext* FandangoParser::Annotated_rhsContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Annotated_rhsContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}


size_t FandangoParser::Annotated_rhsContext::getRuleIndex() const {
  return FandangoParser::RuleAnnotated_rhs;
}


std::any FandangoParser::Annotated_rhsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAnnotated_rhs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Annotated_rhsContext* FandangoParser::annotated_rhs() {
  Annotated_rhsContext *_localctx = _tracker.createInstance<Annotated_rhsContext>(_ctx, getState());
  enterRule(_localctx, 98, FandangoParser::RuleAnnotated_rhs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1434);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::YIELD: {
        enterOuterAlt(_localctx, 1);
        setState(1432);
        yield_expr();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(1433);
        star_expressions();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AugassignContext ------------------------------------------------------------------

FandangoParser::AugassignContext::AugassignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::AugassignContext::ADD_ASSIGN() {
  return getToken(FandangoParser::ADD_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::SUB_ASSIGN() {
  return getToken(FandangoParser::SUB_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::MULT_ASSIGN() {
  return getToken(FandangoParser::MULT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::AT_ASSIGN() {
  return getToken(FandangoParser::AT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::DIV_ASSIGN() {
  return getToken(FandangoParser::DIV_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::MOD_ASSIGN() {
  return getToken(FandangoParser::MOD_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::AND_ASSIGN() {
  return getToken(FandangoParser::AND_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::OR_ASSIGN() {
  return getToken(FandangoParser::OR_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::XOR_ASSIGN() {
  return getToken(FandangoParser::XOR_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::LEFT_SHIFT_ASSIGN() {
  return getToken(FandangoParser::LEFT_SHIFT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::RIGHT_SHIFT_ASSIGN() {
  return getToken(FandangoParser::RIGHT_SHIFT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::POWER_ASSIGN() {
  return getToken(FandangoParser::POWER_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::IDIV_ASSIGN() {
  return getToken(FandangoParser::IDIV_ASSIGN, 0);
}


size_t FandangoParser::AugassignContext::getRuleIndex() const {
  return FandangoParser::RuleAugassign;
}


std::any FandangoParser::AugassignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAugassign(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AugassignContext* FandangoParser::augassign() {
  AugassignContext *_localctx = _tracker.createInstance<AugassignContext>(_ctx, getState());
  enterRule(_localctx, 100, FandangoParser::RuleAugassign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1436);
    _la = _input->LA(1);
    if (!(((((_la - 109) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 109)) & 8191) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_stmtContext ------------------------------------------------------------------

FandangoParser::Return_stmtContext::Return_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Return_stmtContext::RETURN() {
  return getToken(FandangoParser::RETURN, 0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Return_stmtContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}


size_t FandangoParser::Return_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleReturn_stmt;
}


std::any FandangoParser::Return_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitReturn_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Return_stmtContext* FandangoParser::return_stmt() {
  Return_stmtContext *_localctx = _tracker.createInstance<Return_stmtContext>(_ctx, getState());
  enterRule(_localctx, 102, FandangoParser::RuleReturn_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1438);
    match(FandangoParser::RETURN);
    setState(1440);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx)) {
    case 1: {
      setState(1439);
      star_expressions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Raise_stmtContext ------------------------------------------------------------------

FandangoParser::Raise_stmtContext::Raise_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Raise_stmtContext::RAISE() {
  return getToken(FandangoParser::RAISE, 0);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::Raise_stmtContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::Raise_stmtContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::Raise_stmtContext::FROM() {
  return getToken(FandangoParser::FROM, 0);
}


size_t FandangoParser::Raise_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleRaise_stmt;
}


std::any FandangoParser::Raise_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRaise_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Raise_stmtContext* FandangoParser::raise_stmt() {
  Raise_stmtContext *_localctx = _tracker.createInstance<Raise_stmtContext>(_ctx, getState());
  enterRule(_localctx, 104, FandangoParser::RuleRaise_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1449);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1442);
      match(FandangoParser::RAISE);
      setState(1443);
      expression();
      setState(1446);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx)) {
      case 1: {
        setState(1444);
        match(FandangoParser::FROM);
        setState(1445);
        expression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1448);
      match(FandangoParser::RAISE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_stmtContext ------------------------------------------------------------------

FandangoParser::Global_stmtContext::Global_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Global_stmtContext::GLOBAL() {
  return getToken(FandangoParser::GLOBAL, 0);
}

std::vector<FandangoParser::IdentifierContext *> FandangoParser::Global_stmtContext::identifier() {
  return getRuleContexts<FandangoParser::IdentifierContext>();
}

FandangoParser::IdentifierContext* FandangoParser::Global_stmtContext::identifier(size_t i) {
  return getRuleContext<FandangoParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Global_stmtContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Global_stmtContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Global_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleGlobal_stmt;
}


std::any FandangoParser::Global_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGlobal_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Global_stmtContext* FandangoParser::global_stmt() {
  Global_stmtContext *_localctx = _tracker.createInstance<Global_stmtContext>(_ctx, getState());
  enterRule(_localctx, 106, FandangoParser::RuleGlobal_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1451);
    match(FandangoParser::GLOBAL);
    setState(1452);
    identifier();
    setState(1457);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::COMMA) {
      setState(1453);
      match(FandangoParser::COMMA);
      setState(1454);
      identifier();
      setState(1459);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nonlocal_stmtContext ------------------------------------------------------------------

FandangoParser::Nonlocal_stmtContext::Nonlocal_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Nonlocal_stmtContext::NONLOCAL() {
  return getToken(FandangoParser::NONLOCAL, 0);
}

std::vector<FandangoParser::IdentifierContext *> FandangoParser::Nonlocal_stmtContext::identifier() {
  return getRuleContexts<FandangoParser::IdentifierContext>();
}

FandangoParser::IdentifierContext* FandangoParser::Nonlocal_stmtContext::identifier(size_t i) {
  return getRuleContext<FandangoParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Nonlocal_stmtContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Nonlocal_stmtContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Nonlocal_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleNonlocal_stmt;
}


std::any FandangoParser::Nonlocal_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNonlocal_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Nonlocal_stmtContext* FandangoParser::nonlocal_stmt() {
  Nonlocal_stmtContext *_localctx = _tracker.createInstance<Nonlocal_stmtContext>(_ctx, getState());
  enterRule(_localctx, 108, FandangoParser::RuleNonlocal_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1460);
    match(FandangoParser::NONLOCAL);
    setState(1461);
    identifier();
    setState(1466);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::COMMA) {
      setState(1462);
      match(FandangoParser::COMMA);
      setState(1463);
      identifier();
      setState(1468);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Del_stmtContext ------------------------------------------------------------------

FandangoParser::Del_stmtContext::Del_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Del_stmtContext::DEL() {
  return getToken(FandangoParser::DEL, 0);
}

FandangoParser::Del_targetsContext* FandangoParser::Del_stmtContext::del_targets() {
  return getRuleContext<FandangoParser::Del_targetsContext>(0);
}


size_t FandangoParser::Del_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleDel_stmt;
}


std::any FandangoParser::Del_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_stmtContext* FandangoParser::del_stmt() {
  Del_stmtContext *_localctx = _tracker.createInstance<Del_stmtContext>(_ctx, getState());
  enterRule(_localctx, 110, FandangoParser::RuleDel_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1469);
    match(FandangoParser::DEL);
    setState(1470);
    del_targets();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Yield_stmtContext ------------------------------------------------------------------

FandangoParser::Yield_stmtContext::Yield_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Yield_exprContext* FandangoParser::Yield_stmtContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}


size_t FandangoParser::Yield_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleYield_stmt;
}


std::any FandangoParser::Yield_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitYield_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Yield_stmtContext* FandangoParser::yield_stmt() {
  Yield_stmtContext *_localctx = _tracker.createInstance<Yield_stmtContext>(_ctx, getState());
  enterRule(_localctx, 112, FandangoParser::RuleYield_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1472);
    yield_expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assert_stmtContext ------------------------------------------------------------------

FandangoParser::Assert_stmtContext::Assert_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Assert_stmtContext::ASSERT() {
  return getToken(FandangoParser::ASSERT, 0);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::Assert_stmtContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::Assert_stmtContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::Assert_stmtContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Assert_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleAssert_stmt;
}


std::any FandangoParser::Assert_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAssert_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Assert_stmtContext* FandangoParser::assert_stmt() {
  Assert_stmtContext *_localctx = _tracker.createInstance<Assert_stmtContext>(_ctx, getState());
  enterRule(_localctx, 114, FandangoParser::RuleAssert_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1474);
    match(FandangoParser::ASSERT);
    setState(1475);
    expression();
    setState(1478);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1476);
      match(FandangoParser::COMMA);
      setState(1477);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_stmtContext ------------------------------------------------------------------

FandangoParser::Import_stmtContext::Import_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Import_nameContext* FandangoParser::Import_stmtContext::import_name() {
  return getRuleContext<FandangoParser::Import_nameContext>(0);
}

FandangoParser::Import_fromContext* FandangoParser::Import_stmtContext::import_from() {
  return getRuleContext<FandangoParser::Import_fromContext>(0);
}


size_t FandangoParser::Import_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleImport_stmt;
}


std::any FandangoParser::Import_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_stmtContext* FandangoParser::import_stmt() {
  Import_stmtContext *_localctx = _tracker.createInstance<Import_stmtContext>(_ctx, getState());
  enterRule(_localctx, 116, FandangoParser::RuleImport_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1482);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::IMPORT: {
        enterOuterAlt(_localctx, 1);
        setState(1480);
        import_name();
        break;
      }

      case FandangoParser::FROM: {
        enterOuterAlt(_localctx, 2);
        setState(1481);
        import_from();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_nameContext ------------------------------------------------------------------

FandangoParser::Import_nameContext::Import_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Import_nameContext::IMPORT() {
  return getToken(FandangoParser::IMPORT, 0);
}

FandangoParser::Dotted_as_namesContext* FandangoParser::Import_nameContext::dotted_as_names() {
  return getRuleContext<FandangoParser::Dotted_as_namesContext>(0);
}


size_t FandangoParser::Import_nameContext::getRuleIndex() const {
  return FandangoParser::RuleImport_name;
}


std::any FandangoParser::Import_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_name(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_nameContext* FandangoParser::import_name() {
  Import_nameContext *_localctx = _tracker.createInstance<Import_nameContext>(_ctx, getState());
  enterRule(_localctx, 118, FandangoParser::RuleImport_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1484);
    match(FandangoParser::IMPORT);
    setState(1485);
    dotted_as_names();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_fromContext ------------------------------------------------------------------

FandangoParser::Import_fromContext::Import_fromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Import_fromContext::FROM() {
  return getToken(FandangoParser::FROM, 0);
}

FandangoParser::Dotted_nameContext* FandangoParser::Import_fromContext::dotted_name() {
  return getRuleContext<FandangoParser::Dotted_nameContext>(0);
}

tree::TerminalNode* FandangoParser::Import_fromContext::IMPORT() {
  return getToken(FandangoParser::IMPORT, 0);
}

FandangoParser::Import_from_targetsContext* FandangoParser::Import_fromContext::import_from_targets() {
  return getRuleContext<FandangoParser::Import_from_targetsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Import_fromContext::DOT() {
  return getTokens(FandangoParser::DOT);
}

tree::TerminalNode* FandangoParser::Import_fromContext::DOT(size_t i) {
  return getToken(FandangoParser::DOT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Import_fromContext::ELLIPSIS() {
  return getTokens(FandangoParser::ELLIPSIS);
}

tree::TerminalNode* FandangoParser::Import_fromContext::ELLIPSIS(size_t i) {
  return getToken(FandangoParser::ELLIPSIS, i);
}


size_t FandangoParser::Import_fromContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from;
}


std::any FandangoParser::Import_fromContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_fromContext* FandangoParser::import_from() {
  Import_fromContext *_localctx = _tracker.createInstance<Import_fromContext>(_ctx, getState());
  enterRule(_localctx, 120, FandangoParser::RuleImport_from);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1506);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1487);
      match(FandangoParser::FROM);
      setState(1491);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::ELLIPSIS

      || _la == FandangoParser::DOT) {
        setState(1488);
        _la = _input->LA(1);
        if (!(_la == FandangoParser::ELLIPSIS

        || _la == FandangoParser::DOT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1493);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1494);
      dotted_name(0);
      setState(1495);
      match(FandangoParser::IMPORT);
      setState(1496);
      import_from_targets();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1498);
      match(FandangoParser::FROM);
      setState(1500); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1499);
        _la = _input->LA(1);
        if (!(_la == FandangoParser::ELLIPSIS

        || _la == FandangoParser::DOT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1502); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::ELLIPSIS

      || _la == FandangoParser::DOT);
      setState(1504);
      match(FandangoParser::IMPORT);
      setState(1505);
      import_from_targets();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_from_targetsContext ------------------------------------------------------------------

FandangoParser::Import_from_targetsContext::Import_from_targetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Import_from_as_namesContext* FandangoParser::Import_from_targetsContext::import_from_as_names() {
  return getRuleContext<FandangoParser::Import_from_as_namesContext>(0);
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}


size_t FandangoParser::Import_from_targetsContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from_targets;
}


std::any FandangoParser::Import_from_targetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from_targets(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_from_targetsContext* FandangoParser::import_from_targets() {
  Import_from_targetsContext *_localctx = _tracker.createInstance<Import_from_targetsContext>(_ctx, getState());
  enterRule(_localctx, 122, FandangoParser::RuleImport_from_targets);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1517);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(1508);
        match(FandangoParser::OPEN_PAREN);
        setState(1509);
        import_from_as_names();
        setState(1511);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::COMMA) {
          setState(1510);
          match(FandangoParser::COMMA);
        }
        setState(1513);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 2);
        setState(1515);
        import_from_as_names();
        break;
      }

      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 3);
        setState(1516);
        match(FandangoParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_from_as_namesContext ------------------------------------------------------------------

FandangoParser::Import_from_as_namesContext::Import_from_as_namesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Import_from_as_nameContext *> FandangoParser::Import_from_as_namesContext::import_from_as_name() {
  return getRuleContexts<FandangoParser::Import_from_as_nameContext>();
}

FandangoParser::Import_from_as_nameContext* FandangoParser::Import_from_as_namesContext::import_from_as_name(size_t i) {
  return getRuleContext<FandangoParser::Import_from_as_nameContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Import_from_as_namesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Import_from_as_namesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Import_from_as_namesContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from_as_names;
}


std::any FandangoParser::Import_from_as_namesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from_as_names(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_from_as_namesContext* FandangoParser::import_from_as_names() {
  Import_from_as_namesContext *_localctx = _tracker.createInstance<Import_from_as_namesContext>(_ctx, getState());
  enterRule(_localctx, 124, FandangoParser::RuleImport_from_as_names);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1519);
    import_from_as_name();
    setState(1524);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1520);
        match(FandangoParser::COMMA);
        setState(1521);
        import_from_as_name(); 
      }
      setState(1526);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_from_as_nameContext ------------------------------------------------------------------

FandangoParser::Import_from_as_nameContext::Import_from_as_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::IdentifierContext *> FandangoParser::Import_from_as_nameContext::identifier() {
  return getRuleContexts<FandangoParser::IdentifierContext>();
}

FandangoParser::IdentifierContext* FandangoParser::Import_from_as_nameContext::identifier(size_t i) {
  return getRuleContext<FandangoParser::IdentifierContext>(i);
}

tree::TerminalNode* FandangoParser::Import_from_as_nameContext::AS() {
  return getToken(FandangoParser::AS, 0);
}


size_t FandangoParser::Import_from_as_nameContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from_as_name;
}


std::any FandangoParser::Import_from_as_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from_as_name(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_from_as_nameContext* FandangoParser::import_from_as_name() {
  Import_from_as_nameContext *_localctx = _tracker.createInstance<Import_from_as_nameContext>(_ctx, getState());
  enterRule(_localctx, 126, FandangoParser::RuleImport_from_as_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1527);
    identifier();
    setState(1530);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AS) {
      setState(1528);
      match(FandangoParser::AS);
      setState(1529);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_as_namesContext ------------------------------------------------------------------

FandangoParser::Dotted_as_namesContext::Dotted_as_namesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Dotted_as_nameContext *> FandangoParser::Dotted_as_namesContext::dotted_as_name() {
  return getRuleContexts<FandangoParser::Dotted_as_nameContext>();
}

FandangoParser::Dotted_as_nameContext* FandangoParser::Dotted_as_namesContext::dotted_as_name(size_t i) {
  return getRuleContext<FandangoParser::Dotted_as_nameContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Dotted_as_namesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Dotted_as_namesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Dotted_as_namesContext::getRuleIndex() const {
  return FandangoParser::RuleDotted_as_names;
}


std::any FandangoParser::Dotted_as_namesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDotted_as_names(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Dotted_as_namesContext* FandangoParser::dotted_as_names() {
  Dotted_as_namesContext *_localctx = _tracker.createInstance<Dotted_as_namesContext>(_ctx, getState());
  enterRule(_localctx, 128, FandangoParser::RuleDotted_as_names);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1532);
    dotted_as_name();
    setState(1537);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::COMMA) {
      setState(1533);
      match(FandangoParser::COMMA);
      setState(1534);
      dotted_as_name();
      setState(1539);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_as_nameContext ------------------------------------------------------------------

FandangoParser::Dotted_as_nameContext::Dotted_as_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Dotted_nameContext* FandangoParser::Dotted_as_nameContext::dotted_name() {
  return getRuleContext<FandangoParser::Dotted_nameContext>(0);
}

tree::TerminalNode* FandangoParser::Dotted_as_nameContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Dotted_as_nameContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}


size_t FandangoParser::Dotted_as_nameContext::getRuleIndex() const {
  return FandangoParser::RuleDotted_as_name;
}


std::any FandangoParser::Dotted_as_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDotted_as_name(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Dotted_as_nameContext* FandangoParser::dotted_as_name() {
  Dotted_as_nameContext *_localctx = _tracker.createInstance<Dotted_as_nameContext>(_ctx, getState());
  enterRule(_localctx, 130, FandangoParser::RuleDotted_as_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1540);
    dotted_name(0);
    setState(1543);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AS) {
      setState(1541);
      match(FandangoParser::AS);
      setState(1542);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_nameContext ------------------------------------------------------------------

FandangoParser::Dotted_nameContext::Dotted_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Dotted_nameContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

FandangoParser::Dotted_nameContext* FandangoParser::Dotted_nameContext::dotted_name() {
  return getRuleContext<FandangoParser::Dotted_nameContext>(0);
}

tree::TerminalNode* FandangoParser::Dotted_nameContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}


size_t FandangoParser::Dotted_nameContext::getRuleIndex() const {
  return FandangoParser::RuleDotted_name;
}


std::any FandangoParser::Dotted_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDotted_name(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Dotted_nameContext* FandangoParser::dotted_name() {
   return dotted_name(0);
}

FandangoParser::Dotted_nameContext* FandangoParser::dotted_name(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Dotted_nameContext *_localctx = _tracker.createInstance<Dotted_nameContext>(_ctx, parentState);
  FandangoParser::Dotted_nameContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 132;
  enterRecursionRule(_localctx, 132, FandangoParser::RuleDotted_name, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1546);
    identifier();
    _ctx->stop = _input->LT(-1);
    setState(1553);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Dotted_nameContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDotted_name);
        setState(1548);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1549);
        match(FandangoParser::DOT);
        setState(1550);
        identifier(); 
      }
      setState(1555);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

FandangoParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::BlockContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::BlockContext::INDENT() {
  return getToken(FandangoParser::INDENT, 0);
}

FandangoParser::StatementsContext* FandangoParser::BlockContext::statements() {
  return getRuleContext<FandangoParser::StatementsContext>(0);
}

tree::TerminalNode* FandangoParser::BlockContext::DEDENT() {
  return getToken(FandangoParser::DEDENT, 0);
}

FandangoParser::Simple_stmtsContext* FandangoParser::BlockContext::simple_stmts() {
  return getRuleContext<FandangoParser::Simple_stmtsContext>(0);
}


size_t FandangoParser::BlockContext::getRuleIndex() const {
  return FandangoParser::RuleBlock;
}


std::any FandangoParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::BlockContext* FandangoParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 134, FandangoParser::RuleBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1562);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NEWLINE: {
        enterOuterAlt(_localctx, 1);
        setState(1556);
        match(FandangoParser::NEWLINE);
        setState(1557);
        match(FandangoParser::INDENT);
        setState(1558);
        statements();
        setState(1559);
        match(FandangoParser::DEDENT);
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(1561);
        simple_stmts();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecoratorsContext ------------------------------------------------------------------

FandangoParser::DecoratorsContext::DecoratorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::DecoratorsContext::AT() {
  return getTokens(FandangoParser::AT);
}

tree::TerminalNode* FandangoParser::DecoratorsContext::AT(size_t i) {
  return getToken(FandangoParser::AT, i);
}

std::vector<FandangoParser::Named_expressionContext *> FandangoParser::DecoratorsContext::named_expression() {
  return getRuleContexts<FandangoParser::Named_expressionContext>();
}

FandangoParser::Named_expressionContext* FandangoParser::DecoratorsContext::named_expression(size_t i) {
  return getRuleContext<FandangoParser::Named_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::DecoratorsContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::DecoratorsContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::DecoratorsContext::getRuleIndex() const {
  return FandangoParser::RuleDecorators;
}


std::any FandangoParser::DecoratorsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDecorators(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DecoratorsContext* FandangoParser::decorators() {
  DecoratorsContext *_localctx = _tracker.createInstance<DecoratorsContext>(_ctx, getState());
  enterRule(_localctx, 136, FandangoParser::RuleDecorators);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1568); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1564);
      match(FandangoParser::AT);
      setState(1565);
      named_expression();
      setState(1566);
      match(FandangoParser::NEWLINE);
      setState(1570); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::AT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_defContext ------------------------------------------------------------------

FandangoParser::Class_defContext::Class_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Class_def_rawContext* FandangoParser::Class_defContext::class_def_raw() {
  return getRuleContext<FandangoParser::Class_def_rawContext>(0);
}

FandangoParser::DecoratorsContext* FandangoParser::Class_defContext::decorators() {
  return getRuleContext<FandangoParser::DecoratorsContext>(0);
}


size_t FandangoParser::Class_defContext::getRuleIndex() const {
  return FandangoParser::RuleClass_def;
}


std::any FandangoParser::Class_defContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClass_def(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Class_defContext* FandangoParser::class_def() {
  Class_defContext *_localctx = _tracker.createInstance<Class_defContext>(_ctx, getState());
  enterRule(_localctx, 138, FandangoParser::RuleClass_def);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1573);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AT) {
      setState(1572);
      decorators();
    }
    setState(1575);
    class_def_raw();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_def_rawContext ------------------------------------------------------------------

FandangoParser::Class_def_rawContext::Class_def_rawContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::CLASS() {
  return getToken(FandangoParser::CLASS, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Class_def_rawContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Class_def_rawContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Type_paramsContext* FandangoParser::Class_def_rawContext::type_params() {
  return getRuleContext<FandangoParser::Type_paramsContext>(0);
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::Class_def_rawContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}


size_t FandangoParser::Class_def_rawContext::getRuleIndex() const {
  return FandangoParser::RuleClass_def_raw;
}


std::any FandangoParser::Class_def_rawContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClass_def_raw(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Class_def_rawContext* FandangoParser::class_def_raw() {
  Class_def_rawContext *_localctx = _tracker.createInstance<Class_def_rawContext>(_ctx, getState());
  enterRule(_localctx, 140, FandangoParser::RuleClass_def_raw);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1577);
    match(FandangoParser::CLASS);
    setState(1578);
    identifier();
    setState(1580);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_BRACK) {
      setState(1579);
      type_params();
    }
    setState(1587);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_PAREN) {
      setState(1582);
      match(FandangoParser::OPEN_PAREN);
      setState(1584);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 93071897) != 0)) {
        setState(1583);
        arguments();
      }
      setState(1586);
      match(FandangoParser::CLOSE_PAREN);
    }
    setState(1589);
    match(FandangoParser::COLON);
    setState(1590);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_defContext ------------------------------------------------------------------

FandangoParser::Function_defContext::Function_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Function_def_rawContext* FandangoParser::Function_defContext::function_def_raw() {
  return getRuleContext<FandangoParser::Function_def_rawContext>(0);
}

FandangoParser::DecoratorsContext* FandangoParser::Function_defContext::decorators() {
  return getRuleContext<FandangoParser::DecoratorsContext>(0);
}


size_t FandangoParser::Function_defContext::getRuleIndex() const {
  return FandangoParser::RuleFunction_def;
}


std::any FandangoParser::Function_defContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunction_def(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Function_defContext* FandangoParser::function_def() {
  Function_defContext *_localctx = _tracker.createInstance<Function_defContext>(_ctx, getState());
  enterRule(_localctx, 142, FandangoParser::RuleFunction_def);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1593);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AT) {
      setState(1592);
      decorators();
    }
    setState(1595);
    function_def_raw();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_def_rawContext ------------------------------------------------------------------

FandangoParser::Function_def_rawContext::Function_def_rawContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::DEF() {
  return getToken(FandangoParser::DEF, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Function_def_rawContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Function_def_rawContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}

FandangoParser::Type_paramsContext* FandangoParser::Function_def_rawContext::type_params() {
  return getRuleContext<FandangoParser::Type_paramsContext>(0);
}

FandangoParser::ParamsContext* FandangoParser::Function_def_rawContext::params() {
  return getRuleContext<FandangoParser::ParamsContext>(0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::ARROW() {
  return getToken(FandangoParser::ARROW, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Function_def_rawContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Func_type_commentContext* FandangoParser::Function_def_rawContext::func_type_comment() {
  return getRuleContext<FandangoParser::Func_type_commentContext>(0);
}


size_t FandangoParser::Function_def_rawContext::getRuleIndex() const {
  return FandangoParser::RuleFunction_def_raw;
}


std::any FandangoParser::Function_def_rawContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunction_def_raw(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Function_def_rawContext* FandangoParser::function_def_raw() {
  Function_def_rawContext *_localctx = _tracker.createInstance<Function_def_rawContext>(_ctx, getState());
  enterRule(_localctx, 144, FandangoParser::RuleFunction_def_raw);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1598);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASYNC) {
      setState(1597);
      match(FandangoParser::ASYNC);
    }
    setState(1600);
    match(FandangoParser::DEF);
    setState(1601);
    identifier();
    setState(1603);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_BRACK) {
      setState(1602);
      type_params();
    }
    setState(1605);
    match(FandangoParser::OPEN_PAREN);
    setState(1607);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 55) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 55)) & 272629775) != 0)) {
      setState(1606);
      params();
    }
    setState(1609);
    match(FandangoParser::CLOSE_PAREN);
    setState(1612);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ARROW) {
      setState(1610);
      match(FandangoParser::ARROW);
      setState(1611);
      expression();
    }
    setState(1614);
    match(FandangoParser::COLON);
    setState(1616);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx)) {
    case 1: {
      setState(1615);
      func_type_comment();
      break;
    }

    default:
      break;
    }
    setState(1618);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamsContext ------------------------------------------------------------------

FandangoParser::ParamsContext::ParamsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParametersContext* FandangoParser::ParamsContext::parameters() {
  return getRuleContext<FandangoParser::ParametersContext>(0);
}


size_t FandangoParser::ParamsContext::getRuleIndex() const {
  return FandangoParser::RuleParams;
}


std::any FandangoParser::ParamsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParams(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ParamsContext* FandangoParser::params() {
  ParamsContext *_localctx = _tracker.createInstance<ParamsContext>(_ctx, getState());
  enterRule(_localctx, 146, FandangoParser::RuleParams);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1620);
    parameters();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParametersContext ------------------------------------------------------------------

FandangoParser::ParametersContext::ParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Slash_no_defaultContext* FandangoParser::ParametersContext::slash_no_default() {
  return getRuleContext<FandangoParser::Slash_no_defaultContext>(0);
}

std::vector<FandangoParser::Param_no_defaultContext *> FandangoParser::ParametersContext::param_no_default() {
  return getRuleContexts<FandangoParser::Param_no_defaultContext>();
}

FandangoParser::Param_no_defaultContext* FandangoParser::ParametersContext::param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(i);
}

std::vector<FandangoParser::Param_with_defaultContext *> FandangoParser::ParametersContext::param_with_default() {
  return getRuleContexts<FandangoParser::Param_with_defaultContext>();
}

FandangoParser::Param_with_defaultContext* FandangoParser::ParametersContext::param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Param_with_defaultContext>(i);
}

FandangoParser::Star_etcContext* FandangoParser::ParametersContext::star_etc() {
  return getRuleContext<FandangoParser::Star_etcContext>(0);
}

FandangoParser::Slash_with_defaultContext* FandangoParser::ParametersContext::slash_with_default() {
  return getRuleContext<FandangoParser::Slash_with_defaultContext>(0);
}


size_t FandangoParser::ParametersContext::getRuleIndex() const {
  return FandangoParser::RuleParameters;
}


std::any FandangoParser::ParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParameters(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ParametersContext* FandangoParser::parameters() {
  ParametersContext *_localctx = _tracker.createInstance<ParametersContext>(_ctx, getState());
  enterRule(_localctx, 148, FandangoParser::RuleParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1671);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1622);
      slash_no_default();
      setState(1626);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1623);
          param_no_default(); 
        }
        setState(1628);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
      }
      setState(1632);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(1629);
        param_with_default();
        setState(1634);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1636);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1635);
        star_etc();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1638);
      slash_with_default();
      setState(1642);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(1639);
        param_with_default();
        setState(1644);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1646);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1645);
        star_etc();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1649); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1648);
                param_no_default();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1651); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1656);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(1653);
        param_with_default();
        setState(1658);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1660);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1659);
        star_etc();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1663); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1662);
        param_with_default();
        setState(1665); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0));
      setState(1668);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1667);
        star_etc();
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1670);
      star_etc();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Slash_no_defaultContext ------------------------------------------------------------------

FandangoParser::Slash_no_defaultContext::Slash_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Slash_no_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Param_no_defaultContext *> FandangoParser::Slash_no_defaultContext::param_no_default() {
  return getRuleContexts<FandangoParser::Param_no_defaultContext>();
}

FandangoParser::Param_no_defaultContext* FandangoParser::Slash_no_defaultContext::param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Slash_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Slash_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleSlash_no_default;
}


std::any FandangoParser::Slash_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlash_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Slash_no_defaultContext* FandangoParser::slash_no_default() {
  Slash_no_defaultContext *_localctx = _tracker.createInstance<Slash_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 150, FandangoParser::RuleSlash_no_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1674); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1673);
      param_no_default();
      setState(1676); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540431955284459520) != 0));
    setState(1678);
    match(FandangoParser::DIV);
    setState(1680);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1679);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Slash_with_defaultContext ------------------------------------------------------------------

FandangoParser::Slash_with_defaultContext::Slash_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Slash_with_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Param_no_defaultContext *> FandangoParser::Slash_with_defaultContext::param_no_default() {
  return getRuleContexts<FandangoParser::Param_no_defaultContext>();
}

FandangoParser::Param_no_defaultContext* FandangoParser::Slash_with_defaultContext::param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(i);
}

std::vector<FandangoParser::Param_with_defaultContext *> FandangoParser::Slash_with_defaultContext::param_with_default() {
  return getRuleContexts<FandangoParser::Param_with_defaultContext>();
}

FandangoParser::Param_with_defaultContext* FandangoParser::Slash_with_defaultContext::param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Param_with_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Slash_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Slash_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleSlash_with_default;
}


std::any FandangoParser::Slash_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlash_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Slash_with_defaultContext* FandangoParser::slash_with_default() {
  Slash_with_defaultContext *_localctx = _tracker.createInstance<Slash_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 152, FandangoParser::RuleSlash_with_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1685);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1682);
        param_no_default(); 
      }
      setState(1687);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx);
    }
    setState(1689); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1688);
      param_with_default();
      setState(1691); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540431955284459520) != 0));
    setState(1693);
    match(FandangoParser::DIV);
    setState(1695);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1694);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_etcContext ------------------------------------------------------------------

FandangoParser::Star_etcContext::Star_etcContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_etcContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Param_no_defaultContext* FandangoParser::Star_etcContext::param_no_default() {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(0);
}

std::vector<FandangoParser::Param_maybe_defaultContext *> FandangoParser::Star_etcContext::param_maybe_default() {
  return getRuleContexts<FandangoParser::Param_maybe_defaultContext>();
}

FandangoParser::Param_maybe_defaultContext* FandangoParser::Star_etcContext::param_maybe_default(size_t i) {
  return getRuleContext<FandangoParser::Param_maybe_defaultContext>(i);
}

FandangoParser::KwdsContext* FandangoParser::Star_etcContext::kwds() {
  return getRuleContext<FandangoParser::KwdsContext>(0);
}

FandangoParser::Param_no_default_star_annotationContext* FandangoParser::Star_etcContext::param_no_default_star_annotation() {
  return getRuleContext<FandangoParser::Param_no_default_star_annotationContext>(0);
}

tree::TerminalNode* FandangoParser::Star_etcContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Star_etcContext::getRuleIndex() const {
  return FandangoParser::RuleStar_etc;
}


std::any FandangoParser::Star_etcContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_etc(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_etcContext* FandangoParser::star_etc() {
  Star_etcContext *_localctx = _tracker.createInstance<Star_etcContext>(_ctx, getState());
  enterRule(_localctx, 154, FandangoParser::RuleStar_etc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1730);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1697);
      match(FandangoParser::STAR);
      setState(1698);
      param_no_default();
      setState(1702);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(1699);
        param_maybe_default();
        setState(1704);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1706);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(1705);
        kwds();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1708);
      match(FandangoParser::STAR);
      setState(1709);
      param_no_default_star_annotation();
      setState(1713);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(1710);
        param_maybe_default();
        setState(1715);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1717);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(1716);
        kwds();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1719);
      match(FandangoParser::STAR);
      setState(1720);
      match(FandangoParser::COMMA);
      setState(1722); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1721);
        param_maybe_default();
        setState(1724); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0));
      setState(1727);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(1726);
        kwds();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1729);
      kwds();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KwdsContext ------------------------------------------------------------------

FandangoParser::KwdsContext::KwdsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::KwdsContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Param_no_defaultContext* FandangoParser::KwdsContext::param_no_default() {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(0);
}


size_t FandangoParser::KwdsContext::getRuleIndex() const {
  return FandangoParser::RuleKwds;
}


std::any FandangoParser::KwdsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwds(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KwdsContext* FandangoParser::kwds() {
  KwdsContext *_localctx = _tracker.createInstance<KwdsContext>(_ctx, getState());
  enterRule(_localctx, 156, FandangoParser::RuleKwds);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1732);
    match(FandangoParser::POWER);
    setState(1733);
    param_no_default();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_no_defaultContext ------------------------------------------------------------------

FandangoParser::Param_no_defaultContext::Param_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParamContext* FandangoParser::Param_no_defaultContext::param() {
  return getRuleContext<FandangoParser::ParamContext>(0);
}

tree::TerminalNode* FandangoParser::Param_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Param_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleParam_no_default;
}


std::any FandangoParser::Param_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_no_defaultContext* FandangoParser::param_no_default() {
  Param_no_defaultContext *_localctx = _tracker.createInstance<Param_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 158, FandangoParser::RuleParam_no_default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1739);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1735);
      param();
      setState(1736);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1738);
      param();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_no_default_star_annotationContext ------------------------------------------------------------------

FandangoParser::Param_no_default_star_annotationContext::Param_no_default_star_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Param_star_annotationContext* FandangoParser::Param_no_default_star_annotationContext::param_star_annotation() {
  return getRuleContext<FandangoParser::Param_star_annotationContext>(0);
}

tree::TerminalNode* FandangoParser::Param_no_default_star_annotationContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Param_no_default_star_annotationContext::getRuleIndex() const {
  return FandangoParser::RuleParam_no_default_star_annotation;
}


std::any FandangoParser::Param_no_default_star_annotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_no_default_star_annotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_no_default_star_annotationContext* FandangoParser::param_no_default_star_annotation() {
  Param_no_default_star_annotationContext *_localctx = _tracker.createInstance<Param_no_default_star_annotationContext>(_ctx, getState());
  enterRule(_localctx, 160, FandangoParser::RuleParam_no_default_star_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1745);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1741);
      param_star_annotation();
      setState(1742);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1744);
      param_star_annotation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_with_defaultContext ------------------------------------------------------------------

FandangoParser::Param_with_defaultContext::Param_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParamContext* FandangoParser::Param_with_defaultContext::param() {
  return getRuleContext<FandangoParser::ParamContext>(0);
}

FandangoParser::DefaultContext* FandangoParser::Param_with_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}

tree::TerminalNode* FandangoParser::Param_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Param_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleParam_with_default;
}


std::any FandangoParser::Param_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_with_defaultContext* FandangoParser::param_with_default() {
  Param_with_defaultContext *_localctx = _tracker.createInstance<Param_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 162, FandangoParser::RuleParam_with_default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1754);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1747);
      param();
      setState(1748);
      default_();
      setState(1749);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1751);
      param();
      setState(1752);
      default_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_maybe_defaultContext ------------------------------------------------------------------

FandangoParser::Param_maybe_defaultContext::Param_maybe_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParamContext* FandangoParser::Param_maybe_defaultContext::param() {
  return getRuleContext<FandangoParser::ParamContext>(0);
}

tree::TerminalNode* FandangoParser::Param_maybe_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::DefaultContext* FandangoParser::Param_maybe_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}


size_t FandangoParser::Param_maybe_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleParam_maybe_default;
}


std::any FandangoParser::Param_maybe_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_maybe_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_maybe_defaultContext* FandangoParser::param_maybe_default() {
  Param_maybe_defaultContext *_localctx = _tracker.createInstance<Param_maybe_defaultContext>(_ctx, getState());
  enterRule(_localctx, 164, FandangoParser::RuleParam_maybe_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1766);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1756);
      param();
      setState(1758);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(1757);
        default_();
      }
      setState(1760);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1762);
      param();
      setState(1764);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(1763);
        default_();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamContext ------------------------------------------------------------------

FandangoParser::ParamContext::ParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::ParamContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

FandangoParser::AnnotationContext* FandangoParser::ParamContext::annotation() {
  return getRuleContext<FandangoParser::AnnotationContext>(0);
}


size_t FandangoParser::ParamContext::getRuleIndex() const {
  return FandangoParser::RuleParam;
}


std::any FandangoParser::ParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ParamContext* FandangoParser::param() {
  ParamContext *_localctx = _tracker.createInstance<ParamContext>(_ctx, getState());
  enterRule(_localctx, 166, FandangoParser::RuleParam);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1768);
    identifier();
    setState(1770);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COLON) {
      setState(1769);
      annotation();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_star_annotationContext ------------------------------------------------------------------

FandangoParser::Param_star_annotationContext::Param_star_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Param_star_annotationContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

FandangoParser::Star_annotationContext* FandangoParser::Param_star_annotationContext::star_annotation() {
  return getRuleContext<FandangoParser::Star_annotationContext>(0);
}


size_t FandangoParser::Param_star_annotationContext::getRuleIndex() const {
  return FandangoParser::RuleParam_star_annotation;
}


std::any FandangoParser::Param_star_annotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_star_annotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_star_annotationContext* FandangoParser::param_star_annotation() {
  Param_star_annotationContext *_localctx = _tracker.createInstance<Param_star_annotationContext>(_ctx, getState());
  enterRule(_localctx, 168, FandangoParser::RuleParam_star_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1772);
    identifier();
    setState(1773);
    star_annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

FandangoParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::AnnotationContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::AnnotationContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::AnnotationContext::getRuleIndex() const {
  return FandangoParser::RuleAnnotation;
}


std::any FandangoParser::AnnotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAnnotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AnnotationContext* FandangoParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 170, FandangoParser::RuleAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1775);
    match(FandangoParser::COLON);
    setState(1776);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_annotationContext ------------------------------------------------------------------

FandangoParser::Star_annotationContext::Star_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_annotationContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::Star_expressionContext* FandangoParser::Star_annotationContext::star_expression() {
  return getRuleContext<FandangoParser::Star_expressionContext>(0);
}


size_t FandangoParser::Star_annotationContext::getRuleIndex() const {
  return FandangoParser::RuleStar_annotation;
}


std::any FandangoParser::Star_annotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_annotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_annotationContext* FandangoParser::star_annotation() {
  Star_annotationContext *_localctx = _tracker.createInstance<Star_annotationContext>(_ctx, getState());
  enterRule(_localctx, 172, FandangoParser::RuleStar_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1778);
    match(FandangoParser::COLON);
    setState(1779);
    star_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultContext ------------------------------------------------------------------

FandangoParser::DefaultContext::DefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::DefaultContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::DefaultContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::DefaultContext::getRuleIndex() const {
  return FandangoParser::RuleDefault;
}


std::any FandangoParser::DefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDefault(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DefaultContext* FandangoParser::default_() {
  DefaultContext *_localctx = _tracker.createInstance<DefaultContext>(_ctx, getState());
  enterRule(_localctx, 174, FandangoParser::RuleDefault);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1781);
    match(FandangoParser::ASSIGN);
    setState(1782);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_stmtContext ------------------------------------------------------------------

FandangoParser::If_stmtContext::If_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::If_stmtContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::If_stmtContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::If_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::If_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Elif_stmtContext* FandangoParser::If_stmtContext::elif_stmt() {
  return getRuleContext<FandangoParser::Elif_stmtContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::If_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}


size_t FandangoParser::If_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleIf_stmt;
}


std::any FandangoParser::If_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIf_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::If_stmtContext* FandangoParser::if_stmt() {
  If_stmtContext *_localctx = _tracker.createInstance<If_stmtContext>(_ctx, getState());
  enterRule(_localctx, 176, FandangoParser::RuleIf_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1797);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1784);
      match(FandangoParser::IF);
      setState(1785);
      named_expression();
      setState(1786);
      match(FandangoParser::COLON);
      setState(1787);
      block();
      setState(1788);
      elif_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1790);
      match(FandangoParser::IF);
      setState(1791);
      named_expression();
      setState(1792);
      match(FandangoParser::COLON);
      setState(1793);
      block();
      setState(1795);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1794);
        else_block();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elif_stmtContext ------------------------------------------------------------------

FandangoParser::Elif_stmtContext::Elif_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Elif_stmtContext::ELIF() {
  return getToken(FandangoParser::ELIF, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::Elif_stmtContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::Elif_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Elif_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Elif_stmtContext* FandangoParser::Elif_stmtContext::elif_stmt() {
  return getRuleContext<FandangoParser::Elif_stmtContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::Elif_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}


size_t FandangoParser::Elif_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleElif_stmt;
}


std::any FandangoParser::Elif_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitElif_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Elif_stmtContext* FandangoParser::elif_stmt() {
  Elif_stmtContext *_localctx = _tracker.createInstance<Elif_stmtContext>(_ctx, getState());
  enterRule(_localctx, 178, FandangoParser::RuleElif_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1812);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1799);
      match(FandangoParser::ELIF);
      setState(1800);
      named_expression();
      setState(1801);
      match(FandangoParser::COLON);
      setState(1802);
      block();
      setState(1803);
      elif_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1805);
      match(FandangoParser::ELIF);
      setState(1806);
      named_expression();
      setState(1807);
      match(FandangoParser::COLON);
      setState(1808);
      block();
      setState(1810);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1809);
        else_block();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Else_blockContext ------------------------------------------------------------------

FandangoParser::Else_blockContext::Else_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Else_blockContext::ELSE() {
  return getToken(FandangoParser::ELSE, 0);
}

tree::TerminalNode* FandangoParser::Else_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Else_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}


size_t FandangoParser::Else_blockContext::getRuleIndex() const {
  return FandangoParser::RuleElse_block;
}


std::any FandangoParser::Else_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitElse_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Else_blockContext* FandangoParser::else_block() {
  Else_blockContext *_localctx = _tracker.createInstance<Else_blockContext>(_ctx, getState());
  enterRule(_localctx, 180, FandangoParser::RuleElse_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1814);
    match(FandangoParser::ELSE);
    setState(1815);
    match(FandangoParser::COLON);
    setState(1816);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- While_stmtContext ------------------------------------------------------------------

FandangoParser::While_stmtContext::While_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::While_stmtContext::WHILE() {
  return getToken(FandangoParser::WHILE, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::While_stmtContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::While_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::While_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::While_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}


size_t FandangoParser::While_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleWhile_stmt;
}


std::any FandangoParser::While_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWhile_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::While_stmtContext* FandangoParser::while_stmt() {
  While_stmtContext *_localctx = _tracker.createInstance<While_stmtContext>(_ctx, getState());
  enterRule(_localctx, 182, FandangoParser::RuleWhile_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1818);
    match(FandangoParser::WHILE);
    setState(1819);
    named_expression();
    setState(1820);
    match(FandangoParser::COLON);
    setState(1821);
    block();
    setState(1823);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ELSE) {
      setState(1822);
      else_block();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_stmtContext ------------------------------------------------------------------

FandangoParser::For_stmtContext::For_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::For_stmtContext::FOR() {
  return getToken(FandangoParser::FOR, 0);
}

FandangoParser::Star_targetsContext* FandangoParser::For_stmtContext::star_targets() {
  return getRuleContext<FandangoParser::Star_targetsContext>(0);
}

tree::TerminalNode* FandangoParser::For_stmtContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Star_expressionsContext* FandangoParser::For_stmtContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

tree::TerminalNode* FandangoParser::For_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::For_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::For_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}

tree::TerminalNode* FandangoParser::For_stmtContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}


size_t FandangoParser::For_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleFor_stmt;
}


std::any FandangoParser::For_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFor_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::For_stmtContext* FandangoParser::for_stmt() {
  For_stmtContext *_localctx = _tracker.createInstance<For_stmtContext>(_ctx, getState());
  enterRule(_localctx, 184, FandangoParser::RuleFor_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1844);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::FOR: {
        enterOuterAlt(_localctx, 1);
        setState(1825);
        match(FandangoParser::FOR);
        setState(1826);
        star_targets();
        setState(1827);
        match(FandangoParser::IN);
        setState(1828);
        star_expressions();
        setState(1829);
        match(FandangoParser::COLON);
        setState(1830);
        block();
        setState(1832);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::ELSE) {
          setState(1831);
          else_block();
        }
        break;
      }

      case FandangoParser::ASYNC: {
        enterOuterAlt(_localctx, 2);
        setState(1834);
        match(FandangoParser::ASYNC);
        setState(1835);
        match(FandangoParser::FOR);
        setState(1836);
        star_targets();
        setState(1837);
        match(FandangoParser::IN);
        setState(1838);
        star_expressions();
        setState(1839);
        match(FandangoParser::COLON);
        setState(1840);
        block();
        setState(1842);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::ELSE) {
          setState(1841);
          else_block();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_stmtContext ------------------------------------------------------------------

FandangoParser::With_stmtContext::With_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::With_stmtContext::WITH() {
  return getToken(FandangoParser::WITH, 0);
}

tree::TerminalNode* FandangoParser::With_stmtContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

std::vector<FandangoParser::With_itemContext *> FandangoParser::With_stmtContext::with_item() {
  return getRuleContexts<FandangoParser::With_itemContext>();
}

FandangoParser::With_itemContext* FandangoParser::With_stmtContext::with_item(size_t i) {
  return getRuleContext<FandangoParser::With_itemContext>(i);
}

tree::TerminalNode* FandangoParser::With_stmtContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::With_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::With_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::With_stmtContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::With_stmtContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

tree::TerminalNode* FandangoParser::With_stmtContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}


size_t FandangoParser::With_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleWith_stmt;
}


std::any FandangoParser::With_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWith_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::With_stmtContext* FandangoParser::with_stmt() {
  With_stmtContext *_localctx = _tracker.createInstance<With_stmtContext>(_ctx, getState());
  enterRule(_localctx, 186, FandangoParser::RuleWith_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1906);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1846);
      match(FandangoParser::WITH);
      setState(1847);
      match(FandangoParser::OPEN_PAREN);
      setState(1848);
      with_item();
      setState(1853);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1849);
          match(FandangoParser::COMMA);
          setState(1850);
          with_item(); 
        }
        setState(1855);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx);
      }
      setState(1857);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1856);
        match(FandangoParser::COMMA);
      }
      setState(1859);
      match(FandangoParser::CLOSE_PAREN);
      setState(1860);
      match(FandangoParser::COLON);
      setState(1861);
      block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1863);
      match(FandangoParser::WITH);
      setState(1864);
      with_item();
      setState(1869);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::COMMA) {
        setState(1865);
        match(FandangoParser::COMMA);
        setState(1866);
        with_item();
        setState(1871);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1872);
      match(FandangoParser::COLON);
      setState(1873);
      block();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1875);
      match(FandangoParser::ASYNC);
      setState(1876);
      match(FandangoParser::WITH);
      setState(1877);
      match(FandangoParser::OPEN_PAREN);
      setState(1878);
      with_item();
      setState(1883);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1879);
          match(FandangoParser::COMMA);
          setState(1880);
          with_item(); 
        }
        setState(1885);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx);
      }
      setState(1887);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1886);
        match(FandangoParser::COMMA);
      }
      setState(1889);
      match(FandangoParser::CLOSE_PAREN);
      setState(1890);
      match(FandangoParser::COLON);
      setState(1891);
      block();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1893);
      match(FandangoParser::ASYNC);
      setState(1894);
      match(FandangoParser::WITH);
      setState(1895);
      with_item();
      setState(1900);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::COMMA) {
        setState(1896);
        match(FandangoParser::COMMA);
        setState(1897);
        with_item();
        setState(1902);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1903);
      match(FandangoParser::COLON);
      setState(1904);
      block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_itemContext ------------------------------------------------------------------

FandangoParser::With_itemContext::With_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ExpressionContext* FandangoParser::With_itemContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::With_itemContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

FandangoParser::Star_targetContext* FandangoParser::With_itemContext::star_target() {
  return getRuleContext<FandangoParser::Star_targetContext>(0);
}


size_t FandangoParser::With_itemContext::getRuleIndex() const {
  return FandangoParser::RuleWith_item;
}


std::any FandangoParser::With_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWith_item(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::With_itemContext* FandangoParser::with_item() {
  With_itemContext *_localctx = _tracker.createInstance<With_itemContext>(_ctx, getState());
  enterRule(_localctx, 188, FandangoParser::RuleWith_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1913);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1908);
      expression();
      setState(1909);
      match(FandangoParser::AS);
      setState(1910);
      star_target();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1912);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Try_stmtContext ------------------------------------------------------------------

FandangoParser::Try_stmtContext::Try_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Try_stmtContext::TRY() {
  return getToken(FandangoParser::TRY, 0);
}

tree::TerminalNode* FandangoParser::Try_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Try_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Finally_blockContext* FandangoParser::Try_stmtContext::finally_block() {
  return getRuleContext<FandangoParser::Finally_blockContext>(0);
}

std::vector<FandangoParser::Except_blockContext *> FandangoParser::Try_stmtContext::except_block() {
  return getRuleContexts<FandangoParser::Except_blockContext>();
}

FandangoParser::Except_blockContext* FandangoParser::Try_stmtContext::except_block(size_t i) {
  return getRuleContext<FandangoParser::Except_blockContext>(i);
}

FandangoParser::Else_blockContext* FandangoParser::Try_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}

std::vector<FandangoParser::Except_star_blockContext *> FandangoParser::Try_stmtContext::except_star_block() {
  return getRuleContexts<FandangoParser::Except_star_blockContext>();
}

FandangoParser::Except_star_blockContext* FandangoParser::Try_stmtContext::except_star_block(size_t i) {
  return getRuleContext<FandangoParser::Except_star_blockContext>(i);
}


size_t FandangoParser::Try_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleTry_stmt;
}


std::any FandangoParser::Try_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTry_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Try_stmtContext* FandangoParser::try_stmt() {
  Try_stmtContext *_localctx = _tracker.createInstance<Try_stmtContext>(_ctx, getState());
  enterRule(_localctx, 190, FandangoParser::RuleTry_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1948);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1915);
      match(FandangoParser::TRY);
      setState(1916);
      match(FandangoParser::COLON);
      setState(1917);
      block();
      setState(1918);
      finally_block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1920);
      match(FandangoParser::TRY);
      setState(1921);
      match(FandangoParser::COLON);
      setState(1922);
      block();
      setState(1924); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1923);
        except_block();
        setState(1926); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::EXCEPT);
      setState(1929);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1928);
        else_block();
      }
      setState(1932);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::FINALLY) {
        setState(1931);
        finally_block();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1934);
      match(FandangoParser::TRY);
      setState(1935);
      match(FandangoParser::COLON);
      setState(1936);
      block();
      setState(1938); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1937);
        except_star_block();
        setState(1940); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::EXCEPT);
      setState(1943);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1942);
        else_block();
      }
      setState(1946);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::FINALLY) {
        setState(1945);
        finally_block();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Except_blockContext ------------------------------------------------------------------

FandangoParser::Except_blockContext::Except_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Except_blockContext::EXCEPT() {
  return getToken(FandangoParser::EXCEPT, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Except_blockContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::Except_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Except_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

tree::TerminalNode* FandangoParser::Except_blockContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Except_blockContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}


size_t FandangoParser::Except_blockContext::getRuleIndex() const {
  return FandangoParser::RuleExcept_block;
}


std::any FandangoParser::Except_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExcept_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Except_blockContext* FandangoParser::except_block() {
  Except_blockContext *_localctx = _tracker.createInstance<Except_blockContext>(_ctx, getState());
  enterRule(_localctx, 192, FandangoParser::RuleExcept_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1962);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1950);
      match(FandangoParser::EXCEPT);
      setState(1951);
      expression();
      setState(1954);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::AS) {
        setState(1952);
        match(FandangoParser::AS);
        setState(1953);
        identifier();
      }
      setState(1956);
      match(FandangoParser::COLON);
      setState(1957);
      block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1959);
      match(FandangoParser::EXCEPT);
      setState(1960);
      match(FandangoParser::COLON);
      setState(1961);
      block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Except_star_blockContext ------------------------------------------------------------------

FandangoParser::Except_star_blockContext::Except_star_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::EXCEPT() {
  return getToken(FandangoParser::EXCEPT, 0);
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Except_star_blockContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Except_star_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Except_star_blockContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}


size_t FandangoParser::Except_star_blockContext::getRuleIndex() const {
  return FandangoParser::RuleExcept_star_block;
}


std::any FandangoParser::Except_star_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExcept_star_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Except_star_blockContext* FandangoParser::except_star_block() {
  Except_star_blockContext *_localctx = _tracker.createInstance<Except_star_blockContext>(_ctx, getState());
  enterRule(_localctx, 194, FandangoParser::RuleExcept_star_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1964);
    match(FandangoParser::EXCEPT);
    setState(1965);
    match(FandangoParser::STAR);
    setState(1966);
    expression();
    setState(1969);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AS) {
      setState(1967);
      match(FandangoParser::AS);
      setState(1968);
      identifier();
    }
    setState(1971);
    match(FandangoParser::COLON);
    setState(1972);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Finally_blockContext ------------------------------------------------------------------

FandangoParser::Finally_blockContext::Finally_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Finally_blockContext::FINALLY() {
  return getToken(FandangoParser::FINALLY, 0);
}

tree::TerminalNode* FandangoParser::Finally_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Finally_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}


size_t FandangoParser::Finally_blockContext::getRuleIndex() const {
  return FandangoParser::RuleFinally_block;
}


std::any FandangoParser::Finally_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFinally_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Finally_blockContext* FandangoParser::finally_block() {
  Finally_blockContext *_localctx = _tracker.createInstance<Finally_blockContext>(_ctx, getState());
  enterRule(_localctx, 196, FandangoParser::RuleFinally_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1974);
    match(FandangoParser::FINALLY);
    setState(1975);
    match(FandangoParser::COLON);
    setState(1976);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Match_stmtContext ------------------------------------------------------------------

FandangoParser::Match_stmtContext::Match_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Match_stmtContext::MATCH() {
  return getToken(FandangoParser::MATCH, 0);
}

FandangoParser::Subject_exprContext* FandangoParser::Match_stmtContext::subject_expr() {
  return getRuleContext<FandangoParser::Subject_exprContext>(0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::INDENT() {
  return getToken(FandangoParser::INDENT, 0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::DEDENT() {
  return getToken(FandangoParser::DEDENT, 0);
}

std::vector<FandangoParser::Case_blockContext *> FandangoParser::Match_stmtContext::case_block() {
  return getRuleContexts<FandangoParser::Case_blockContext>();
}

FandangoParser::Case_blockContext* FandangoParser::Match_stmtContext::case_block(size_t i) {
  return getRuleContext<FandangoParser::Case_blockContext>(i);
}


size_t FandangoParser::Match_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleMatch_stmt;
}


std::any FandangoParser::Match_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMatch_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Match_stmtContext* FandangoParser::match_stmt() {
  Match_stmtContext *_localctx = _tracker.createInstance<Match_stmtContext>(_ctx, getState());
  enterRule(_localctx, 198, FandangoParser::RuleMatch_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1978);
    match(FandangoParser::MATCH);
    setState(1979);
    subject_expr();
    setState(1980);
    match(FandangoParser::COLON);
    setState(1981);
    match(FandangoParser::NEWLINE);
    setState(1982);
    match(FandangoParser::INDENT);
    setState(1984); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1983);
      case_block();
      setState(1986); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::CASE);
    setState(1988);
    match(FandangoParser::DEDENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subject_exprContext ------------------------------------------------------------------

FandangoParser::Subject_exprContext::Subject_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Star_named_expressionContext* FandangoParser::Subject_exprContext::star_named_expression() {
  return getRuleContext<FandangoParser::Star_named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::Subject_exprContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::Subject_exprContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}

FandangoParser::Named_expressionContext* FandangoParser::Subject_exprContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::Subject_exprContext::getRuleIndex() const {
  return FandangoParser::RuleSubject_expr;
}


std::any FandangoParser::Subject_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSubject_expr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Subject_exprContext* FandangoParser::subject_expr() {
  Subject_exprContext *_localctx = _tracker.createInstance<Subject_exprContext>(_ctx, getState());
  enterRule(_localctx, 200, FandangoParser::RuleSubject_expr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1996);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1990);
      star_named_expression();
      setState(1991);
      match(FandangoParser::COMMA);
      setState(1993);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 93071897) != 0)) {
        setState(1992);
        star_named_expressions();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1995);
      named_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_blockContext ------------------------------------------------------------------

FandangoParser::Case_blockContext::Case_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Case_blockContext::CASE() {
  return getToken(FandangoParser::CASE, 0);
}

FandangoParser::PatternsContext* FandangoParser::Case_blockContext::patterns() {
  return getRuleContext<FandangoParser::PatternsContext>(0);
}

tree::TerminalNode* FandangoParser::Case_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Case_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::GuardContext* FandangoParser::Case_blockContext::guard() {
  return getRuleContext<FandangoParser::GuardContext>(0);
}


size_t FandangoParser::Case_blockContext::getRuleIndex() const {
  return FandangoParser::RuleCase_block;
}


std::any FandangoParser::Case_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCase_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Case_blockContext* FandangoParser::case_block() {
  Case_blockContext *_localctx = _tracker.createInstance<Case_blockContext>(_ctx, getState());
  enterRule(_localctx, 202, FandangoParser::RuleCase_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1998);
    match(FandangoParser::CASE);
    setState(1999);
    patterns();
    setState(2001);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::IF) {
      setState(2000);
      guard();
    }
    setState(2003);
    match(FandangoParser::COLON);
    setState(2004);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GuardContext ------------------------------------------------------------------

FandangoParser::GuardContext::GuardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::GuardContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::GuardContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::GuardContext::getRuleIndex() const {
  return FandangoParser::RuleGuard;
}


std::any FandangoParser::GuardContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGuard(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::GuardContext* FandangoParser::guard() {
  GuardContext *_localctx = _tracker.createInstance<GuardContext>(_ctx, getState());
  enterRule(_localctx, 204, FandangoParser::RuleGuard);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2006);
    match(FandangoParser::IF);
    setState(2007);
    named_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternsContext ------------------------------------------------------------------

FandangoParser::PatternsContext::PatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Open_sequence_patternContext* FandangoParser::PatternsContext::open_sequence_pattern() {
  return getRuleContext<FandangoParser::Open_sequence_patternContext>(0);
}

FandangoParser::PatternContext* FandangoParser::PatternsContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}


size_t FandangoParser::PatternsContext::getRuleIndex() const {
  return FandangoParser::RulePatterns;
}


std::any FandangoParser::PatternsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPatterns(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PatternsContext* FandangoParser::patterns() {
  PatternsContext *_localctx = _tracker.createInstance<PatternsContext>(_ctx, getState());
  enterRule(_localctx, 206, FandangoParser::RulePatterns);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2011);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2009);
      open_sequence_pattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2010);
      pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternContext ------------------------------------------------------------------

FandangoParser::PatternContext::PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::As_patternContext* FandangoParser::PatternContext::as_pattern() {
  return getRuleContext<FandangoParser::As_patternContext>(0);
}

FandangoParser::Or_patternContext* FandangoParser::PatternContext::or_pattern() {
  return getRuleContext<FandangoParser::Or_patternContext>(0);
}


size_t FandangoParser::PatternContext::getRuleIndex() const {
  return FandangoParser::RulePattern;
}


std::any FandangoParser::PatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PatternContext* FandangoParser::pattern() {
  PatternContext *_localctx = _tracker.createInstance<PatternContext>(_ctx, getState());
  enterRule(_localctx, 208, FandangoParser::RulePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2015);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2013);
      as_pattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2014);
      or_pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- As_patternContext ------------------------------------------------------------------

FandangoParser::As_patternContext::As_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Or_patternContext* FandangoParser::As_patternContext::or_pattern() {
  return getRuleContext<FandangoParser::Or_patternContext>(0);
}

tree::TerminalNode* FandangoParser::As_patternContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::As_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}


size_t FandangoParser::As_patternContext::getRuleIndex() const {
  return FandangoParser::RuleAs_pattern;
}


std::any FandangoParser::As_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAs_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::As_patternContext* FandangoParser::as_pattern() {
  As_patternContext *_localctx = _tracker.createInstance<As_patternContext>(_ctx, getState());
  enterRule(_localctx, 210, FandangoParser::RuleAs_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2017);
    or_pattern();
    setState(2018);
    match(FandangoParser::AS);
    setState(2019);
    pattern_capture_target();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Or_patternContext ------------------------------------------------------------------

FandangoParser::Or_patternContext::Or_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Closed_patternContext *> FandangoParser::Or_patternContext::closed_pattern() {
  return getRuleContexts<FandangoParser::Closed_patternContext>();
}

FandangoParser::Closed_patternContext* FandangoParser::Or_patternContext::closed_pattern(size_t i) {
  return getRuleContext<FandangoParser::Closed_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Or_patternContext::OR_OP() {
  return getTokens(FandangoParser::OR_OP);
}

tree::TerminalNode* FandangoParser::Or_patternContext::OR_OP(size_t i) {
  return getToken(FandangoParser::OR_OP, i);
}


size_t FandangoParser::Or_patternContext::getRuleIndex() const {
  return FandangoParser::RuleOr_pattern;
}


std::any FandangoParser::Or_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOr_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Or_patternContext* FandangoParser::or_pattern() {
  Or_patternContext *_localctx = _tracker.createInstance<Or_patternContext>(_ctx, getState());
  enterRule(_localctx, 212, FandangoParser::RuleOr_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2021);
    closed_pattern();
    setState(2026);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR_OP) {
      setState(2022);
      match(FandangoParser::OR_OP);
      setState(2023);
      closed_pattern();
      setState(2028);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Closed_patternContext ------------------------------------------------------------------

FandangoParser::Closed_patternContext::Closed_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Literal_patternContext* FandangoParser::Closed_patternContext::literal_pattern() {
  return getRuleContext<FandangoParser::Literal_patternContext>(0);
}

FandangoParser::Capture_patternContext* FandangoParser::Closed_patternContext::capture_pattern() {
  return getRuleContext<FandangoParser::Capture_patternContext>(0);
}

FandangoParser::Wildcard_patternContext* FandangoParser::Closed_patternContext::wildcard_pattern() {
  return getRuleContext<FandangoParser::Wildcard_patternContext>(0);
}

FandangoParser::Value_patternContext* FandangoParser::Closed_patternContext::value_pattern() {
  return getRuleContext<FandangoParser::Value_patternContext>(0);
}

FandangoParser::Group_patternContext* FandangoParser::Closed_patternContext::group_pattern() {
  return getRuleContext<FandangoParser::Group_patternContext>(0);
}

FandangoParser::Sequence_patternContext* FandangoParser::Closed_patternContext::sequence_pattern() {
  return getRuleContext<FandangoParser::Sequence_patternContext>(0);
}

FandangoParser::Mapping_patternContext* FandangoParser::Closed_patternContext::mapping_pattern() {
  return getRuleContext<FandangoParser::Mapping_patternContext>(0);
}

FandangoParser::Class_patternContext* FandangoParser::Closed_patternContext::class_pattern() {
  return getRuleContext<FandangoParser::Class_patternContext>(0);
}


size_t FandangoParser::Closed_patternContext::getRuleIndex() const {
  return FandangoParser::RuleClosed_pattern;
}


std::any FandangoParser::Closed_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClosed_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Closed_patternContext* FandangoParser::closed_pattern() {
  Closed_patternContext *_localctx = _tracker.createInstance<Closed_patternContext>(_ctx, getState());
  enterRule(_localctx, 214, FandangoParser::RuleClosed_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2037);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2029);
      literal_pattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2030);
      capture_pattern();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2031);
      wildcard_pattern();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2032);
      value_pattern();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2033);
      group_pattern();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2034);
      sequence_pattern();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2035);
      mapping_pattern();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2036);
      class_pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_patternContext ------------------------------------------------------------------

FandangoParser::Literal_patternContext::Literal_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Signed_numberContext* FandangoParser::Literal_patternContext::signed_number() {
  return getRuleContext<FandangoParser::Signed_numberContext>(0);
}

FandangoParser::Complex_numberContext* FandangoParser::Literal_patternContext::complex_number() {
  return getRuleContext<FandangoParser::Complex_numberContext>(0);
}

FandangoParser::StringsContext* FandangoParser::Literal_patternContext::strings() {
  return getRuleContext<FandangoParser::StringsContext>(0);
}

tree::TerminalNode* FandangoParser::Literal_patternContext::NONE() {
  return getToken(FandangoParser::NONE, 0);
}

tree::TerminalNode* FandangoParser::Literal_patternContext::TRUE() {
  return getToken(FandangoParser::TRUE, 0);
}

tree::TerminalNode* FandangoParser::Literal_patternContext::FALSE() {
  return getToken(FandangoParser::FALSE, 0);
}


size_t FandangoParser::Literal_patternContext::getRuleIndex() const {
  return FandangoParser::RuleLiteral_pattern;
}


std::any FandangoParser::Literal_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Literal_patternContext* FandangoParser::literal_pattern() {
  Literal_patternContext *_localctx = _tracker.createInstance<Literal_patternContext>(_ctx, getState());
  enterRule(_localctx, 216, FandangoParser::RuleLiteral_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2045);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2039);
      signed_number();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2040);
      complex_number();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2041);
      strings();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2042);
      match(FandangoParser::NONE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2043);
      match(FandangoParser::TRUE);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2044);
      match(FandangoParser::FALSE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_exprContext ------------------------------------------------------------------

FandangoParser::Literal_exprContext::Literal_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Signed_numberContext* FandangoParser::Literal_exprContext::signed_number() {
  return getRuleContext<FandangoParser::Signed_numberContext>(0);
}

FandangoParser::Complex_numberContext* FandangoParser::Literal_exprContext::complex_number() {
  return getRuleContext<FandangoParser::Complex_numberContext>(0);
}

FandangoParser::StringsContext* FandangoParser::Literal_exprContext::strings() {
  return getRuleContext<FandangoParser::StringsContext>(0);
}

tree::TerminalNode* FandangoParser::Literal_exprContext::NONE() {
  return getToken(FandangoParser::NONE, 0);
}

tree::TerminalNode* FandangoParser::Literal_exprContext::TRUE() {
  return getToken(FandangoParser::TRUE, 0);
}

tree::TerminalNode* FandangoParser::Literal_exprContext::FALSE() {
  return getToken(FandangoParser::FALSE, 0);
}


size_t FandangoParser::Literal_exprContext::getRuleIndex() const {
  return FandangoParser::RuleLiteral_expr;
}


std::any FandangoParser::Literal_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_expr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Literal_exprContext* FandangoParser::literal_expr() {
  Literal_exprContext *_localctx = _tracker.createInstance<Literal_exprContext>(_ctx, getState());
  enterRule(_localctx, 218, FandangoParser::RuleLiteral_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2053);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2047);
      signed_number();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2048);
      complex_number();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2049);
      strings();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2050);
      match(FandangoParser::NONE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2051);
      match(FandangoParser::TRUE);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2052);
      match(FandangoParser::FALSE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Complex_numberContext ------------------------------------------------------------------

FandangoParser::Complex_numberContext::Complex_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Signed_real_numberContext* FandangoParser::Complex_numberContext::signed_real_number() {
  return getRuleContext<FandangoParser::Signed_real_numberContext>(0);
}

tree::TerminalNode* FandangoParser::Complex_numberContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}

FandangoParser::Imaginary_numberContext* FandangoParser::Complex_numberContext::imaginary_number() {
  return getRuleContext<FandangoParser::Imaginary_numberContext>(0);
}

tree::TerminalNode* FandangoParser::Complex_numberContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::Complex_numberContext::getRuleIndex() const {
  return FandangoParser::RuleComplex_number;
}


std::any FandangoParser::Complex_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitComplex_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Complex_numberContext* FandangoParser::complex_number() {
  Complex_numberContext *_localctx = _tracker.createInstance<Complex_numberContext>(_ctx, getState());
  enterRule(_localctx, 220, FandangoParser::RuleComplex_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2063);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2055);
      signed_real_number();
      setState(2056);
      match(FandangoParser::ADD);
      setState(2057);
      imaginary_number();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2059);
      signed_real_number();
      setState(2060);
      match(FandangoParser::MINUS);
      setState(2061);
      imaginary_number();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signed_numberContext ------------------------------------------------------------------

FandangoParser::Signed_numberContext::Signed_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Signed_numberContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}

tree::TerminalNode* FandangoParser::Signed_numberContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::Signed_numberContext::getRuleIndex() const {
  return FandangoParser::RuleSigned_number;
}


std::any FandangoParser::Signed_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSigned_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Signed_numberContext* FandangoParser::signed_number() {
  Signed_numberContext *_localctx = _tracker.createInstance<Signed_numberContext>(_ctx, getState());
  enterRule(_localctx, 222, FandangoParser::RuleSigned_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2068);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER: {
        enterOuterAlt(_localctx, 1);
        setState(2065);
        match(FandangoParser::NUMBER);
        break;
      }

      case FandangoParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(2066);
        match(FandangoParser::MINUS);
        setState(2067);
        match(FandangoParser::NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signed_real_numberContext ------------------------------------------------------------------

FandangoParser::Signed_real_numberContext::Signed_real_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Real_numberContext* FandangoParser::Signed_real_numberContext::real_number() {
  return getRuleContext<FandangoParser::Real_numberContext>(0);
}

tree::TerminalNode* FandangoParser::Signed_real_numberContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::Signed_real_numberContext::getRuleIndex() const {
  return FandangoParser::RuleSigned_real_number;
}


std::any FandangoParser::Signed_real_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSigned_real_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Signed_real_numberContext* FandangoParser::signed_real_number() {
  Signed_real_numberContext *_localctx = _tracker.createInstance<Signed_real_numberContext>(_ctx, getState());
  enterRule(_localctx, 224, FandangoParser::RuleSigned_real_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2073);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER: {
        enterOuterAlt(_localctx, 1);
        setState(2070);
        real_number();
        break;
      }

      case FandangoParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(2071);
        match(FandangoParser::MINUS);
        setState(2072);
        real_number();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Real_numberContext ------------------------------------------------------------------

FandangoParser::Real_numberContext::Real_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Real_numberContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}


size_t FandangoParser::Real_numberContext::getRuleIndex() const {
  return FandangoParser::RuleReal_number;
}


std::any FandangoParser::Real_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitReal_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Real_numberContext* FandangoParser::real_number() {
  Real_numberContext *_localctx = _tracker.createInstance<Real_numberContext>(_ctx, getState());
  enterRule(_localctx, 226, FandangoParser::RuleReal_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2075);
    match(FandangoParser::NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Imaginary_numberContext ------------------------------------------------------------------

FandangoParser::Imaginary_numberContext::Imaginary_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Imaginary_numberContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}


size_t FandangoParser::Imaginary_numberContext::getRuleIndex() const {
  return FandangoParser::RuleImaginary_number;
}


std::any FandangoParser::Imaginary_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImaginary_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Imaginary_numberContext* FandangoParser::imaginary_number() {
  Imaginary_numberContext *_localctx = _tracker.createInstance<Imaginary_numberContext>(_ctx, getState());
  enterRule(_localctx, 228, FandangoParser::RuleImaginary_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2077);
    match(FandangoParser::NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Capture_patternContext ------------------------------------------------------------------

FandangoParser::Capture_patternContext::Capture_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::Capture_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}


size_t FandangoParser::Capture_patternContext::getRuleIndex() const {
  return FandangoParser::RuleCapture_pattern;
}


std::any FandangoParser::Capture_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCapture_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Capture_patternContext* FandangoParser::capture_pattern() {
  Capture_patternContext *_localctx = _tracker.createInstance<Capture_patternContext>(_ctx, getState());
  enterRule(_localctx, 230, FandangoParser::RuleCapture_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2079);
    pattern_capture_target();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pattern_capture_targetContext ------------------------------------------------------------------

FandangoParser::Pattern_capture_targetContext::Pattern_capture_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Pattern_capture_targetContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}


size_t FandangoParser::Pattern_capture_targetContext::getRuleIndex() const {
  return FandangoParser::RulePattern_capture_target;
}


std::any FandangoParser::Pattern_capture_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPattern_capture_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::pattern_capture_target() {
  Pattern_capture_targetContext *_localctx = _tracker.createInstance<Pattern_capture_targetContext>(_ctx, getState());
  enterRule(_localctx, 232, FandangoParser::RulePattern_capture_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2081);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Wildcard_patternContext ------------------------------------------------------------------

FandangoParser::Wildcard_patternContext::Wildcard_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Wildcard_patternContext::UNDERSCORE() {
  return getToken(FandangoParser::UNDERSCORE, 0);
}


size_t FandangoParser::Wildcard_patternContext::getRuleIndex() const {
  return FandangoParser::RuleWildcard_pattern;
}


std::any FandangoParser::Wildcard_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWildcard_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Wildcard_patternContext* FandangoParser::wildcard_pattern() {
  Wildcard_patternContext *_localctx = _tracker.createInstance<Wildcard_patternContext>(_ctx, getState());
  enterRule(_localctx, 234, FandangoParser::RuleWildcard_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2083);
    match(FandangoParser::UNDERSCORE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Value_patternContext ------------------------------------------------------------------

FandangoParser::Value_patternContext::Value_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AttrContext* FandangoParser::Value_patternContext::attr() {
  return getRuleContext<FandangoParser::AttrContext>(0);
}


size_t FandangoParser::Value_patternContext::getRuleIndex() const {
  return FandangoParser::RuleValue_pattern;
}


std::any FandangoParser::Value_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitValue_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Value_patternContext* FandangoParser::value_pattern() {
  Value_patternContext *_localctx = _tracker.createInstance<Value_patternContext>(_ctx, getState());
  enterRule(_localctx, 236, FandangoParser::RuleValue_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2085);
    attr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttrContext ------------------------------------------------------------------

FandangoParser::AttrContext::AttrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Name_or_attrContext* FandangoParser::AttrContext::name_or_attr() {
  return getRuleContext<FandangoParser::Name_or_attrContext>(0);
}

tree::TerminalNode* FandangoParser::AttrContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

FandangoParser::IdentifierContext* FandangoParser::AttrContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}


size_t FandangoParser::AttrContext::getRuleIndex() const {
  return FandangoParser::RuleAttr;
}


std::any FandangoParser::AttrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAttr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AttrContext* FandangoParser::attr() {
  AttrContext *_localctx = _tracker.createInstance<AttrContext>(_ctx, getState());
  enterRule(_localctx, 238, FandangoParser::RuleAttr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2087);
    name_or_attr(0);
    setState(2088);
    match(FandangoParser::DOT);
    setState(2089);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Name_or_attrContext ------------------------------------------------------------------

FandangoParser::Name_or_attrContext::Name_or_attrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Name_or_attrContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

FandangoParser::Name_or_attrContext* FandangoParser::Name_or_attrContext::name_or_attr() {
  return getRuleContext<FandangoParser::Name_or_attrContext>(0);
}

tree::TerminalNode* FandangoParser::Name_or_attrContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}


size_t FandangoParser::Name_or_attrContext::getRuleIndex() const {
  return FandangoParser::RuleName_or_attr;
}


std::any FandangoParser::Name_or_attrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitName_or_attr(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Name_or_attrContext* FandangoParser::name_or_attr() {
   return name_or_attr(0);
}

FandangoParser::Name_or_attrContext* FandangoParser::name_or_attr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Name_or_attrContext *_localctx = _tracker.createInstance<Name_or_attrContext>(_ctx, parentState);
  FandangoParser::Name_or_attrContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 240;
  enterRecursionRule(_localctx, 240, FandangoParser::RuleName_or_attr, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2092);
    identifier();
    _ctx->stop = _input->LT(-1);
    setState(2099);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Name_or_attrContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleName_or_attr);
        setState(2094);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2095);
        match(FandangoParser::DOT);
        setState(2096);
        identifier(); 
      }
      setState(2101);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Group_patternContext ------------------------------------------------------------------

FandangoParser::Group_patternContext::Group_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Group_patternContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::PatternContext* FandangoParser::Group_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}

tree::TerminalNode* FandangoParser::Group_patternContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}


size_t FandangoParser::Group_patternContext::getRuleIndex() const {
  return FandangoParser::RuleGroup_pattern;
}


std::any FandangoParser::Group_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGroup_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Group_patternContext* FandangoParser::group_pattern() {
  Group_patternContext *_localctx = _tracker.createInstance<Group_patternContext>(_ctx, getState());
  enterRule(_localctx, 242, FandangoParser::RuleGroup_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2102);
    match(FandangoParser::OPEN_PAREN);
    setState(2103);
    pattern();
    setState(2104);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_patternContext ------------------------------------------------------------------

FandangoParser::Sequence_patternContext::Sequence_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Maybe_sequence_patternContext* FandangoParser::Sequence_patternContext::maybe_sequence_pattern() {
  return getRuleContext<FandangoParser::Maybe_sequence_patternContext>(0);
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Open_sequence_patternContext* FandangoParser::Sequence_patternContext::open_sequence_pattern() {
  return getRuleContext<FandangoParser::Open_sequence_patternContext>(0);
}


size_t FandangoParser::Sequence_patternContext::getRuleIndex() const {
  return FandangoParser::RuleSequence_pattern;
}


std::any FandangoParser::Sequence_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSequence_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Sequence_patternContext* FandangoParser::sequence_pattern() {
  Sequence_patternContext *_localctx = _tracker.createInstance<Sequence_patternContext>(_ctx, getState());
  enterRule(_localctx, 244, FandangoParser::RuleSequence_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2116);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::OPEN_BRACK: {
        enterOuterAlt(_localctx, 1);
        setState(2106);
        match(FandangoParser::OPEN_BRACK);
        setState(2108);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 540449684976566776) != 0) || ((((_la - 77) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 77)) & 1125899909005571) != 0)) {
          setState(2107);
          maybe_sequence_pattern();
        }
        setState(2110);
        match(FandangoParser::CLOSE_BRACK);
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(2111);
        match(FandangoParser::OPEN_PAREN);
        setState(2113);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 540449684976566776) != 0) || ((((_la - 77) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 77)) & 1125899909005571) != 0)) {
          setState(2112);
          open_sequence_pattern();
        }
        setState(2115);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Open_sequence_patternContext ------------------------------------------------------------------

FandangoParser::Open_sequence_patternContext::Open_sequence_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Maybe_star_patternContext* FandangoParser::Open_sequence_patternContext::maybe_star_pattern() {
  return getRuleContext<FandangoParser::Maybe_star_patternContext>(0);
}

tree::TerminalNode* FandangoParser::Open_sequence_patternContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::Maybe_sequence_patternContext* FandangoParser::Open_sequence_patternContext::maybe_sequence_pattern() {
  return getRuleContext<FandangoParser::Maybe_sequence_patternContext>(0);
}


size_t FandangoParser::Open_sequence_patternContext::getRuleIndex() const {
  return FandangoParser::RuleOpen_sequence_pattern;
}


std::any FandangoParser::Open_sequence_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOpen_sequence_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Open_sequence_patternContext* FandangoParser::open_sequence_pattern() {
  Open_sequence_patternContext *_localctx = _tracker.createInstance<Open_sequence_patternContext>(_ctx, getState());
  enterRule(_localctx, 246, FandangoParser::RuleOpen_sequence_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2118);
    maybe_star_pattern();
    setState(2119);
    match(FandangoParser::COMMA);
    setState(2121);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540449684976566776) != 0) || ((((_la - 77) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 77)) & 1125899909005571) != 0)) {
      setState(2120);
      maybe_sequence_pattern();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Maybe_sequence_patternContext ------------------------------------------------------------------

FandangoParser::Maybe_sequence_patternContext::Maybe_sequence_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Maybe_star_patternContext *> FandangoParser::Maybe_sequence_patternContext::maybe_star_pattern() {
  return getRuleContexts<FandangoParser::Maybe_star_patternContext>();
}

FandangoParser::Maybe_star_patternContext* FandangoParser::Maybe_sequence_patternContext::maybe_star_pattern(size_t i) {
  return getRuleContext<FandangoParser::Maybe_star_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Maybe_sequence_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Maybe_sequence_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Maybe_sequence_patternContext::getRuleIndex() const {
  return FandangoParser::RuleMaybe_sequence_pattern;
}


std::any FandangoParser::Maybe_sequence_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMaybe_sequence_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Maybe_sequence_patternContext* FandangoParser::maybe_sequence_pattern() {
  Maybe_sequence_patternContext *_localctx = _tracker.createInstance<Maybe_sequence_patternContext>(_ctx, getState());
  enterRule(_localctx, 248, FandangoParser::RuleMaybe_sequence_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2123);
    maybe_star_pattern();
    setState(2128);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2124);
        match(FandangoParser::COMMA);
        setState(2125);
        maybe_star_pattern(); 
      }
      setState(2130);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx);
    }
    setState(2132);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2131);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Maybe_star_patternContext ------------------------------------------------------------------

FandangoParser::Maybe_star_patternContext::Maybe_star_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Star_patternContext* FandangoParser::Maybe_star_patternContext::star_pattern() {
  return getRuleContext<FandangoParser::Star_patternContext>(0);
}

FandangoParser::PatternContext* FandangoParser::Maybe_star_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}


size_t FandangoParser::Maybe_star_patternContext::getRuleIndex() const {
  return FandangoParser::RuleMaybe_star_pattern;
}


std::any FandangoParser::Maybe_star_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMaybe_star_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Maybe_star_patternContext* FandangoParser::maybe_star_pattern() {
  Maybe_star_patternContext *_localctx = _tracker.createInstance<Maybe_star_patternContext>(_ctx, getState());
  enterRule(_localctx, 250, FandangoParser::RuleMaybe_star_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2136);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(2134);
        star_pattern();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::MINUS:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::UNDERSCORE: {
        enterOuterAlt(_localctx, 2);
        setState(2135);
        pattern();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_patternContext ------------------------------------------------------------------

FandangoParser::Star_patternContext::Star_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_patternContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::Star_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}

FandangoParser::Wildcard_patternContext* FandangoParser::Star_patternContext::wildcard_pattern() {
  return getRuleContext<FandangoParser::Wildcard_patternContext>(0);
}


size_t FandangoParser::Star_patternContext::getRuleIndex() const {
  return FandangoParser::RuleStar_pattern;
}


std::any FandangoParser::Star_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_patternContext* FandangoParser::star_pattern() {
  Star_patternContext *_localctx = _tracker.createInstance<Star_patternContext>(_ctx, getState());
  enterRule(_localctx, 252, FandangoParser::RuleStar_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2142);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2138);
      match(FandangoParser::STAR);
      setState(2139);
      pattern_capture_target();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2140);
      match(FandangoParser::STAR);
      setState(2141);
      wildcard_pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mapping_patternContext ------------------------------------------------------------------

FandangoParser::Mapping_patternContext::Mapping_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Mapping_patternContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::Mapping_patternContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

FandangoParser::Double_star_patternContext* FandangoParser::Mapping_patternContext::double_star_pattern() {
  return getRuleContext<FandangoParser::Double_star_patternContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Mapping_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Mapping_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

FandangoParser::Items_patternContext* FandangoParser::Mapping_patternContext::items_pattern() {
  return getRuleContext<FandangoParser::Items_patternContext>(0);
}


size_t FandangoParser::Mapping_patternContext::getRuleIndex() const {
  return FandangoParser::RuleMapping_pattern;
}


std::any FandangoParser::Mapping_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMapping_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Mapping_patternContext* FandangoParser::mapping_pattern() {
  Mapping_patternContext *_localctx = _tracker.createInstance<Mapping_patternContext>(_ctx, getState());
  enterRule(_localctx, 254, FandangoParser::RuleMapping_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2169);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 247, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2144);
      match(FandangoParser::OPEN_BRACE);
      setState(2145);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2146);
      match(FandangoParser::OPEN_BRACE);
      setState(2147);
      double_star_pattern();
      setState(2149);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(2148);
        match(FandangoParser::COMMA);
      }
      setState(2151);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2153);
      match(FandangoParser::OPEN_BRACE);
      setState(2154);
      items_pattern();
      setState(2155);
      match(FandangoParser::COMMA);
      setState(2156);
      double_star_pattern();
      setState(2158);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(2157);
        match(FandangoParser::COMMA);
      }
      setState(2160);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2162);
      match(FandangoParser::OPEN_BRACE);
      setState(2163);
      items_pattern();
      setState(2165);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(2164);
        match(FandangoParser::COMMA);
      }
      setState(2167);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Items_patternContext ------------------------------------------------------------------

FandangoParser::Items_patternContext::Items_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Key_value_patternContext *> FandangoParser::Items_patternContext::key_value_pattern() {
  return getRuleContexts<FandangoParser::Key_value_patternContext>();
}

FandangoParser::Key_value_patternContext* FandangoParser::Items_patternContext::key_value_pattern(size_t i) {
  return getRuleContext<FandangoParser::Key_value_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Items_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Items_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Items_patternContext::getRuleIndex() const {
  return FandangoParser::RuleItems_pattern;
}


std::any FandangoParser::Items_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitItems_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Items_patternContext* FandangoParser::items_pattern() {
  Items_patternContext *_localctx = _tracker.createInstance<Items_patternContext>(_ctx, getState());
  enterRule(_localctx, 256, FandangoParser::RuleItems_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2171);
    key_value_pattern();
    setState(2176);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2172);
        match(FandangoParser::COMMA);
        setState(2173);
        key_value_pattern(); 
      }
      setState(2178);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Key_value_patternContext ------------------------------------------------------------------

FandangoParser::Key_value_patternContext::Key_value_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Key_value_patternContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::PatternContext* FandangoParser::Key_value_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}

FandangoParser::Literal_exprContext* FandangoParser::Key_value_patternContext::literal_expr() {
  return getRuleContext<FandangoParser::Literal_exprContext>(0);
}

FandangoParser::AttrContext* FandangoParser::Key_value_patternContext::attr() {
  return getRuleContext<FandangoParser::AttrContext>(0);
}


size_t FandangoParser::Key_value_patternContext::getRuleIndex() const {
  return FandangoParser::RuleKey_value_pattern;
}


std::any FandangoParser::Key_value_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKey_value_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Key_value_patternContext* FandangoParser::key_value_pattern() {
  Key_value_patternContext *_localctx = _tracker.createInstance<Key_value_patternContext>(_ctx, getState());
  enterRule(_localctx, 258, FandangoParser::RuleKey_value_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2181);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::MINUS: {
        setState(2179);
        literal_expr();
        break;
      }

      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME: {
        setState(2180);
        attr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2183);
    match(FandangoParser::COLON);
    setState(2184);
    pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Double_star_patternContext ------------------------------------------------------------------

FandangoParser::Double_star_patternContext::Double_star_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Double_star_patternContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::Double_star_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}


size_t FandangoParser::Double_star_patternContext::getRuleIndex() const {
  return FandangoParser::RuleDouble_star_pattern;
}


std::any FandangoParser::Double_star_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDouble_star_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Double_star_patternContext* FandangoParser::double_star_pattern() {
  Double_star_patternContext *_localctx = _tracker.createInstance<Double_star_patternContext>(_ctx, getState());
  enterRule(_localctx, 260, FandangoParser::RuleDouble_star_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2186);
    match(FandangoParser::POWER);
    setState(2187);
    pattern_capture_target();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_patternContext ------------------------------------------------------------------

FandangoParser::Class_patternContext::Class_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Name_or_attrContext* FandangoParser::Class_patternContext::name_or_attr() {
  return getRuleContext<FandangoParser::Name_or_attrContext>(0);
}

tree::TerminalNode* FandangoParser::Class_patternContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Class_patternContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Positional_patternsContext* FandangoParser::Class_patternContext::positional_patterns() {
  return getRuleContext<FandangoParser::Positional_patternsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Class_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Class_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

FandangoParser::Keyword_patternsContext* FandangoParser::Class_patternContext::keyword_patterns() {
  return getRuleContext<FandangoParser::Keyword_patternsContext>(0);
}


size_t FandangoParser::Class_patternContext::getRuleIndex() const {
  return FandangoParser::RuleClass_pattern;
}


std::any FandangoParser::Class_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClass_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Class_patternContext* FandangoParser::class_pattern() {
  Class_patternContext *_localctx = _tracker.createInstance<Class_patternContext>(_ctx, getState());
  enterRule(_localctx, 262, FandangoParser::RuleClass_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2219);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 253, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2189);
      name_or_attr(0);
      setState(2190);
      match(FandangoParser::OPEN_PAREN);
      setState(2191);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2193);
      name_or_attr(0);
      setState(2194);
      match(FandangoParser::OPEN_PAREN);
      setState(2195);
      positional_patterns();
      setState(2197);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(2196);
        match(FandangoParser::COMMA);
      }
      setState(2199);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2201);
      name_or_attr(0);
      setState(2202);
      match(FandangoParser::OPEN_PAREN);
      setState(2203);
      keyword_patterns();
      setState(2205);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(2204);
        match(FandangoParser::COMMA);
      }
      setState(2207);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2209);
      name_or_attr(0);
      setState(2210);
      match(FandangoParser::OPEN_PAREN);
      setState(2211);
      positional_patterns();
      setState(2212);
      match(FandangoParser::COMMA);
      setState(2213);
      keyword_patterns();
      setState(2215);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(2214);
        match(FandangoParser::COMMA);
      }
      setState(2217);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Positional_patternsContext ------------------------------------------------------------------

FandangoParser::Positional_patternsContext::Positional_patternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::PatternContext *> FandangoParser::Positional_patternsContext::pattern() {
  return getRuleContexts<FandangoParser::PatternContext>();
}

FandangoParser::PatternContext* FandangoParser::Positional_patternsContext::pattern(size_t i) {
  return getRuleContext<FandangoParser::PatternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Positional_patternsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Positional_patternsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Positional_patternsContext::getRuleIndex() const {
  return FandangoParser::RulePositional_patterns;
}


std::any FandangoParser::Positional_patternsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPositional_patterns(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Positional_patternsContext* FandangoParser::positional_patterns() {
  Positional_patternsContext *_localctx = _tracker.createInstance<Positional_patternsContext>(_ctx, getState());
  enterRule(_localctx, 264, FandangoParser::RulePositional_patterns);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2221);
    pattern();
    setState(2226);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2222);
        match(FandangoParser::COMMA);
        setState(2223);
        pattern(); 
      }
      setState(2228);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Keyword_patternsContext ------------------------------------------------------------------

FandangoParser::Keyword_patternsContext::Keyword_patternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Keyword_patternContext *> FandangoParser::Keyword_patternsContext::keyword_pattern() {
  return getRuleContexts<FandangoParser::Keyword_patternContext>();
}

FandangoParser::Keyword_patternContext* FandangoParser::Keyword_patternsContext::keyword_pattern(size_t i) {
  return getRuleContext<FandangoParser::Keyword_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Keyword_patternsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Keyword_patternsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Keyword_patternsContext::getRuleIndex() const {
  return FandangoParser::RuleKeyword_patterns;
}


std::any FandangoParser::Keyword_patternsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKeyword_patterns(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Keyword_patternsContext* FandangoParser::keyword_patterns() {
  Keyword_patternsContext *_localctx = _tracker.createInstance<Keyword_patternsContext>(_ctx, getState());
  enterRule(_localctx, 266, FandangoParser::RuleKeyword_patterns);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2229);
    keyword_pattern();
    setState(2234);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2230);
        match(FandangoParser::COMMA);
        setState(2231);
        keyword_pattern(); 
      }
      setState(2236);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Keyword_patternContext ------------------------------------------------------------------

FandangoParser::Keyword_patternContext::Keyword_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Keyword_patternContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Keyword_patternContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::PatternContext* FandangoParser::Keyword_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}


size_t FandangoParser::Keyword_patternContext::getRuleIndex() const {
  return FandangoParser::RuleKeyword_pattern;
}


std::any FandangoParser::Keyword_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKeyword_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Keyword_patternContext* FandangoParser::keyword_pattern() {
  Keyword_patternContext *_localctx = _tracker.createInstance<Keyword_patternContext>(_ctx, getState());
  enterRule(_localctx, 268, FandangoParser::RuleKeyword_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2237);
    identifier();
    setState(2238);
    match(FandangoParser::ASSIGN);
    setState(2239);
    pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_aliasContext ------------------------------------------------------------------

FandangoParser::Type_aliasContext::Type_aliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Type_aliasContext::TYPE() {
  return getToken(FandangoParser::TYPE, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Type_aliasContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Type_aliasContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Type_aliasContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Type_paramsContext* FandangoParser::Type_aliasContext::type_params() {
  return getRuleContext<FandangoParser::Type_paramsContext>(0);
}


size_t FandangoParser::Type_aliasContext::getRuleIndex() const {
  return FandangoParser::RuleType_alias;
}


std::any FandangoParser::Type_aliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_alias(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_aliasContext* FandangoParser::type_alias() {
  Type_aliasContext *_localctx = _tracker.createInstance<Type_aliasContext>(_ctx, getState());
  enterRule(_localctx, 270, FandangoParser::RuleType_alias);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2241);
    match(FandangoParser::TYPE);
    setState(2242);
    identifier();
    setState(2244);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_BRACK) {
      setState(2243);
      type_params();
    }
    setState(2246);
    match(FandangoParser::ASSIGN);
    setState(2247);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_paramsContext ------------------------------------------------------------------

FandangoParser::Type_paramsContext::Type_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Type_paramsContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::Type_param_seqContext* FandangoParser::Type_paramsContext::type_param_seq() {
  return getRuleContext<FandangoParser::Type_param_seqContext>(0);
}

tree::TerminalNode* FandangoParser::Type_paramsContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::Type_paramsContext::getRuleIndex() const {
  return FandangoParser::RuleType_params;
}


std::any FandangoParser::Type_paramsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_params(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_paramsContext* FandangoParser::type_params() {
  Type_paramsContext *_localctx = _tracker.createInstance<Type_paramsContext>(_ctx, getState());
  enterRule(_localctx, 272, FandangoParser::RuleType_params);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2249);
    match(FandangoParser::OPEN_BRACK);
    setState(2250);
    type_param_seq();
    setState(2251);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_param_seqContext ------------------------------------------------------------------

FandangoParser::Type_param_seqContext::Type_param_seqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Type_paramContext *> FandangoParser::Type_param_seqContext::type_param() {
  return getRuleContexts<FandangoParser::Type_paramContext>();
}

FandangoParser::Type_paramContext* FandangoParser::Type_param_seqContext::type_param(size_t i) {
  return getRuleContext<FandangoParser::Type_paramContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Type_param_seqContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Type_param_seqContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Type_param_seqContext::getRuleIndex() const {
  return FandangoParser::RuleType_param_seq;
}


std::any FandangoParser::Type_param_seqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_param_seq(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_param_seqContext* FandangoParser::type_param_seq() {
  Type_param_seqContext *_localctx = _tracker.createInstance<Type_param_seqContext>(_ctx, getState());
  enterRule(_localctx, 274, FandangoParser::RuleType_param_seq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2253);
    type_param();
    setState(2258);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2254);
        match(FandangoParser::COMMA);
        setState(2255);
        type_param(); 
      }
      setState(2260);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx);
    }
    setState(2262);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2261);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_paramContext ------------------------------------------------------------------

FandangoParser::Type_paramContext::Type_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Type_paramContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

FandangoParser::Type_param_boundContext* FandangoParser::Type_paramContext::type_param_bound() {
  return getRuleContext<FandangoParser::Type_param_boundContext>(0);
}

tree::TerminalNode* FandangoParser::Type_paramContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

tree::TerminalNode* FandangoParser::Type_paramContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}


size_t FandangoParser::Type_paramContext::getRuleIndex() const {
  return FandangoParser::RuleType_param;
}


std::any FandangoParser::Type_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_param(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_paramContext* FandangoParser::type_param() {
  Type_paramContext *_localctx = _tracker.createInstance<Type_paramContext>(_ctx, getState());
  enterRule(_localctx, 276, FandangoParser::RuleType_param);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2272);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2264);
        identifier();
        setState(2266);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::COLON) {
          setState(2265);
          type_param_bound();
        }
        break;
      }

      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 2);
        setState(2268);
        match(FandangoParser::STAR);
        setState(2269);
        identifier();
        break;
      }

      case FandangoParser::POWER: {
        enterOuterAlt(_localctx, 3);
        setState(2270);
        match(FandangoParser::POWER);
        setState(2271);
        identifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_param_boundContext ------------------------------------------------------------------

FandangoParser::Type_param_boundContext::Type_param_boundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Type_param_boundContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Type_param_boundContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Type_param_boundContext::getRuleIndex() const {
  return FandangoParser::RuleType_param_bound;
}


std::any FandangoParser::Type_param_boundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_param_bound(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_param_boundContext* FandangoParser::type_param_bound() {
  Type_param_boundContext *_localctx = _tracker.createInstance<Type_param_boundContext>(_ctx, getState());
  enterRule(_localctx, 278, FandangoParser::RuleType_param_bound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2274);
    match(FandangoParser::COLON);
    setState(2275);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionsContext ------------------------------------------------------------------

FandangoParser::ExpressionsContext::ExpressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::ExpressionsContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::ExpressionsContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::ExpressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::ExpressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::ExpressionsContext::getRuleIndex() const {
  return FandangoParser::RuleExpressions;
}


std::any FandangoParser::ExpressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExpressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ExpressionsContext* FandangoParser::expressions() {
  ExpressionsContext *_localctx = _tracker.createInstance<ExpressionsContext>(_ctx, getState());
  enterRule(_localctx, 280, FandangoParser::RuleExpressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2277);
    expression();
    setState(2282);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2278);
        match(FandangoParser::COMMA);
        setState(2279);
        expression(); 
      }
      setState(2284);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx);
    }
    setState(2286);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2285);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

FandangoParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::DisjunctionContext *> FandangoParser::ExpressionContext::disjunction() {
  return getRuleContexts<FandangoParser::DisjunctionContext>();
}

FandangoParser::DisjunctionContext* FandangoParser::ExpressionContext::disjunction(size_t i) {
  return getRuleContext<FandangoParser::DisjunctionContext>(i);
}

tree::TerminalNode* FandangoParser::ExpressionContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

tree::TerminalNode* FandangoParser::ExpressionContext::ELSE() {
  return getToken(FandangoParser::ELSE, 0);
}

FandangoParser::ExpressionContext* FandangoParser::ExpressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::LambdefContext* FandangoParser::ExpressionContext::lambdef() {
  return getRuleContext<FandangoParser::LambdefContext>(0);
}


size_t FandangoParser::ExpressionContext::getRuleIndex() const {
  return FandangoParser::RuleExpression;
}


std::any FandangoParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ExpressionContext* FandangoParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 282, FandangoParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2296);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2288);
      disjunction();
      setState(2289);
      match(FandangoParser::IF);
      setState(2290);
      disjunction();
      setState(2291);
      match(FandangoParser::ELSE);
      setState(2292);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2294);
      disjunction();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2295);
      lambdef();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Yield_exprContext ------------------------------------------------------------------

FandangoParser::Yield_exprContext::Yield_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Yield_exprContext::YIELD() {
  return getToken(FandangoParser::YIELD, 0);
}

tree::TerminalNode* FandangoParser::Yield_exprContext::FROM() {
  return getToken(FandangoParser::FROM, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Yield_exprContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Yield_exprContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}


size_t FandangoParser::Yield_exprContext::getRuleIndex() const {
  return FandangoParser::RuleYield_expr;
}


std::any FandangoParser::Yield_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitYield_expr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Yield_exprContext* FandangoParser::yield_expr() {
  Yield_exprContext *_localctx = _tracker.createInstance<Yield_exprContext>(_ctx, getState());
  enterRule(_localctx, 284, FandangoParser::RuleYield_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2305);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 265, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2298);
      match(FandangoParser::YIELD);
      setState(2299);
      match(FandangoParser::FROM);
      setState(2300);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2301);
      match(FandangoParser::YIELD);
      setState(2303);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 264, _ctx)) {
      case 1: {
        setState(2302);
        star_expressions();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_expressionsContext ------------------------------------------------------------------

FandangoParser::Star_expressionsContext::Star_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_expressionContext *> FandangoParser::Star_expressionsContext::star_expression() {
  return getRuleContexts<FandangoParser::Star_expressionContext>();
}

FandangoParser::Star_expressionContext* FandangoParser::Star_expressionsContext::star_expression(size_t i) {
  return getRuleContext<FandangoParser::Star_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_expressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_expressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_expressionsContext::getRuleIndex() const {
  return FandangoParser::RuleStar_expressions;
}


std::any FandangoParser::Star_expressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_expressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_expressionsContext* FandangoParser::star_expressions() {
  Star_expressionsContext *_localctx = _tracker.createInstance<Star_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 286, FandangoParser::RuleStar_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2307);
    star_expression();
    setState(2312);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2308);
        match(FandangoParser::COMMA);
        setState(2309);
        star_expression(); 
      }
      setState(2314);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx);
    }
    setState(2316);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2315);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_expressionContext ------------------------------------------------------------------

FandangoParser::Star_expressionContext::Star_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Star_selectionContext* FandangoParser::Star_expressionContext::star_selection() {
  return getRuleContext<FandangoParser::Star_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::Star_expressionContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Star_expressionContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::Star_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Star_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleStar_expression;
}


std::any FandangoParser::Star_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_expressionContext* FandangoParser::star_expression() {
  Star_expressionContext *_localctx = _tracker.createInstance<Star_expressionContext>(_ctx, getState());
  enterRule(_localctx, 288, FandangoParser::RuleStar_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2322);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2318);
      star_selection();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2319);
      match(FandangoParser::STAR);
      setState(2320);
      bitwise_or(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2321);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_named_expressionsContext ------------------------------------------------------------------

FandangoParser::Star_named_expressionsContext::Star_named_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_named_expressionContext *> FandangoParser::Star_named_expressionsContext::star_named_expression() {
  return getRuleContexts<FandangoParser::Star_named_expressionContext>();
}

FandangoParser::Star_named_expressionContext* FandangoParser::Star_named_expressionsContext::star_named_expression(size_t i) {
  return getRuleContext<FandangoParser::Star_named_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_named_expressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_named_expressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_named_expressionsContext::getRuleIndex() const {
  return FandangoParser::RuleStar_named_expressions;
}


std::any FandangoParser::Star_named_expressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_named_expressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::star_named_expressions() {
  Star_named_expressionsContext *_localctx = _tracker.createInstance<Star_named_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 290, FandangoParser::RuleStar_named_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2324);
    star_named_expression();
    setState(2329);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 269, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2325);
        match(FandangoParser::COMMA);
        setState(2326);
        star_named_expression(); 
      }
      setState(2331);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 269, _ctx);
    }
    setState(2333);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2332);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_named_expressionContext ------------------------------------------------------------------

FandangoParser::Star_named_expressionContext::Star_named_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_named_expressionContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Star_named_expressionContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

FandangoParser::Named_expressionContext* FandangoParser::Star_named_expressionContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::Star_named_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleStar_named_expression;
}


std::any FandangoParser::Star_named_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_named_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_named_expressionContext* FandangoParser::star_named_expression() {
  Star_named_expressionContext *_localctx = _tracker.createInstance<Star_named_expressionContext>(_ctx, getState());
  enterRule(_localctx, 292, FandangoParser::RuleStar_named_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2338);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 271, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2335);
      match(FandangoParser::STAR);
      setState(2336);
      bitwise_or(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2337);
      named_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_expressionContext ------------------------------------------------------------------

FandangoParser::Assignment_expressionContext::Assignment_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Assignment_expressionContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Assignment_expressionContext::EXPR_ASSIGN() {
  return getToken(FandangoParser::EXPR_ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Assignment_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Assignment_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleAssignment_expression;
}


std::any FandangoParser::Assignment_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAssignment_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Assignment_expressionContext* FandangoParser::assignment_expression() {
  Assignment_expressionContext *_localctx = _tracker.createInstance<Assignment_expressionContext>(_ctx, getState());
  enterRule(_localctx, 294, FandangoParser::RuleAssignment_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2340);
    identifier();
    setState(2341);
    match(FandangoParser::EXPR_ASSIGN);
    setState(2342);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_expressionContext ------------------------------------------------------------------

FandangoParser::Named_expressionContext::Named_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Assignment_expressionContext* FandangoParser::Named_expressionContext::assignment_expression() {
  return getRuleContext<FandangoParser::Assignment_expressionContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::Named_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Named_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleNamed_expression;
}


std::any FandangoParser::Named_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNamed_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Named_expressionContext* FandangoParser::named_expression() {
  Named_expressionContext *_localctx = _tracker.createInstance<Named_expressionContext>(_ctx, getState());
  enterRule(_localctx, 296, FandangoParser::RuleNamed_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2346);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 272, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2344);
      assignment_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2345);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DisjunctionContext ------------------------------------------------------------------

FandangoParser::DisjunctionContext::DisjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ConjunctionContext *> FandangoParser::DisjunctionContext::conjunction() {
  return getRuleContexts<FandangoParser::ConjunctionContext>();
}

FandangoParser::ConjunctionContext* FandangoParser::DisjunctionContext::conjunction(size_t i) {
  return getRuleContext<FandangoParser::ConjunctionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::DisjunctionContext::OR() {
  return getTokens(FandangoParser::OR);
}

tree::TerminalNode* FandangoParser::DisjunctionContext::OR(size_t i) {
  return getToken(FandangoParser::OR, i);
}


size_t FandangoParser::DisjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleDisjunction;
}


std::any FandangoParser::DisjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDisjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DisjunctionContext* FandangoParser::disjunction() {
  DisjunctionContext *_localctx = _tracker.createInstance<DisjunctionContext>(_ctx, getState());
  enterRule(_localctx, 298, FandangoParser::RuleDisjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2348);
    conjunction();
    setState(2353);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR) {
      setState(2349);
      match(FandangoParser::OR);
      setState(2350);
      conjunction();
      setState(2355);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConjunctionContext ------------------------------------------------------------------

FandangoParser::ConjunctionContext::ConjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::InversionContext *> FandangoParser::ConjunctionContext::inversion() {
  return getRuleContexts<FandangoParser::InversionContext>();
}

FandangoParser::InversionContext* FandangoParser::ConjunctionContext::inversion(size_t i) {
  return getRuleContext<FandangoParser::InversionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::ConjunctionContext::AND() {
  return getTokens(FandangoParser::AND);
}

tree::TerminalNode* FandangoParser::ConjunctionContext::AND(size_t i) {
  return getToken(FandangoParser::AND, i);
}


size_t FandangoParser::ConjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleConjunction;
}


std::any FandangoParser::ConjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitConjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ConjunctionContext* FandangoParser::conjunction() {
  ConjunctionContext *_localctx = _tracker.createInstance<ConjunctionContext>(_ctx, getState());
  enterRule(_localctx, 300, FandangoParser::RuleConjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2356);
    inversion();
    setState(2361);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::AND) {
      setState(2357);
      match(FandangoParser::AND);
      setState(2358);
      inversion();
      setState(2363);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InversionContext ------------------------------------------------------------------

FandangoParser::InversionContext::InversionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::InversionContext::NOT() {
  return getToken(FandangoParser::NOT, 0);
}

FandangoParser::InversionContext* FandangoParser::InversionContext::inversion() {
  return getRuleContext<FandangoParser::InversionContext>(0);
}

FandangoParser::ComparisonContext* FandangoParser::InversionContext::comparison() {
  return getRuleContext<FandangoParser::ComparisonContext>(0);
}


size_t FandangoParser::InversionContext::getRuleIndex() const {
  return FandangoParser::RuleInversion;
}


std::any FandangoParser::InversionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitInversion(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::InversionContext* FandangoParser::inversion() {
  InversionContext *_localctx = _tracker.createInstance<InversionContext>(_ctx, getState());
  enterRule(_localctx, 302, FandangoParser::RuleInversion);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2367);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NOT: {
        enterOuterAlt(_localctx, 1);
        setState(2364);
        match(FandangoParser::NOT);
        setState(2365);
        inversion();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(2366);
        comparison();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonContext ------------------------------------------------------------------

FandangoParser::ComparisonContext::ComparisonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Bitwise_orContext* FandangoParser::ComparisonContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

std::vector<FandangoParser::Compare_op_bitwise_or_pairContext *> FandangoParser::ComparisonContext::compare_op_bitwise_or_pair() {
  return getRuleContexts<FandangoParser::Compare_op_bitwise_or_pairContext>();
}

FandangoParser::Compare_op_bitwise_or_pairContext* FandangoParser::ComparisonContext::compare_op_bitwise_or_pair(size_t i) {
  return getRuleContext<FandangoParser::Compare_op_bitwise_or_pairContext>(i);
}


size_t FandangoParser::ComparisonContext::getRuleIndex() const {
  return FandangoParser::RuleComparison;
}


std::any FandangoParser::ComparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitComparison(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ComparisonContext* FandangoParser::comparison() {
  ComparisonContext *_localctx = _tracker.createInstance<ComparisonContext>(_ctx, getState());
  enterRule(_localctx, 304, FandangoParser::RuleComparison);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2369);
    bitwise_or(0);
    setState(2373);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2370);
        compare_op_bitwise_or_pair(); 
      }
      setState(2375);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compare_op_bitwise_or_pairContext ------------------------------------------------------------------

FandangoParser::Compare_op_bitwise_or_pairContext::Compare_op_bitwise_or_pairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Eq_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::eq_bitwise_or() {
  return getRuleContext<FandangoParser::Eq_bitwise_orContext>(0);
}

FandangoParser::Noteq_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::noteq_bitwise_or() {
  return getRuleContext<FandangoParser::Noteq_bitwise_orContext>(0);
}

FandangoParser::Lte_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::lte_bitwise_or() {
  return getRuleContext<FandangoParser::Lte_bitwise_orContext>(0);
}

FandangoParser::Lt_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::lt_bitwise_or() {
  return getRuleContext<FandangoParser::Lt_bitwise_orContext>(0);
}

FandangoParser::Gte_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::gte_bitwise_or() {
  return getRuleContext<FandangoParser::Gte_bitwise_orContext>(0);
}

FandangoParser::Gt_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::gt_bitwise_or() {
  return getRuleContext<FandangoParser::Gt_bitwise_orContext>(0);
}

FandangoParser::Notin_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::notin_bitwise_or() {
  return getRuleContext<FandangoParser::Notin_bitwise_orContext>(0);
}

FandangoParser::In_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::in_bitwise_or() {
  return getRuleContext<FandangoParser::In_bitwise_orContext>(0);
}

FandangoParser::Isnot_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::isnot_bitwise_or() {
  return getRuleContext<FandangoParser::Isnot_bitwise_orContext>(0);
}

FandangoParser::Is_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::is_bitwise_or() {
  return getRuleContext<FandangoParser::Is_bitwise_orContext>(0);
}


size_t FandangoParser::Compare_op_bitwise_or_pairContext::getRuleIndex() const {
  return FandangoParser::RuleCompare_op_bitwise_or_pair;
}


std::any FandangoParser::Compare_op_bitwise_or_pairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCompare_op_bitwise_or_pair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Compare_op_bitwise_or_pairContext* FandangoParser::compare_op_bitwise_or_pair() {
  Compare_op_bitwise_or_pairContext *_localctx = _tracker.createInstance<Compare_op_bitwise_or_pairContext>(_ctx, getState());
  enterRule(_localctx, 306, FandangoParser::RuleCompare_op_bitwise_or_pair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2386);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2376);
      eq_bitwise_or();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2377);
      noteq_bitwise_or();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2378);
      lte_bitwise_or();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2379);
      lt_bitwise_or();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2380);
      gte_bitwise_or();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2381);
      gt_bitwise_or();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2382);
      notin_bitwise_or();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2383);
      in_bitwise_or();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2384);
      isnot_bitwise_or();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2385);
      is_bitwise_or();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Eq_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Eq_bitwise_orContext::Eq_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Eq_bitwise_orContext::EQUALS() {
  return getToken(FandangoParser::EQUALS, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Eq_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Eq_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleEq_bitwise_or;
}


std::any FandangoParser::Eq_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitEq_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Eq_bitwise_orContext* FandangoParser::eq_bitwise_or() {
  Eq_bitwise_orContext *_localctx = _tracker.createInstance<Eq_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 308, FandangoParser::RuleEq_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2388);
    match(FandangoParser::EQUALS);
    setState(2389);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Noteq_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Noteq_bitwise_orContext::Noteq_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Noteq_bitwise_orContext::NOT_EQ_2() {
  return getToken(FandangoParser::NOT_EQ_2, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Noteq_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

tree::TerminalNode* FandangoParser::Noteq_bitwise_orContext::NOT_EQ_1() {
  return getToken(FandangoParser::NOT_EQ_1, 0);
}


size_t FandangoParser::Noteq_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleNoteq_bitwise_or;
}


std::any FandangoParser::Noteq_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNoteq_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Noteq_bitwise_orContext* FandangoParser::noteq_bitwise_or() {
  Noteq_bitwise_orContext *_localctx = _tracker.createInstance<Noteq_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 310, FandangoParser::RuleNoteq_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2395);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NOT_EQ_2: {
        enterOuterAlt(_localctx, 1);
        setState(2391);
        match(FandangoParser::NOT_EQ_2);
        setState(2392);
        bitwise_or(0);
        break;
      }

      case FandangoParser::NOT_EQ_1: {
        enterOuterAlt(_localctx, 2);
        setState(2393);
        match(FandangoParser::NOT_EQ_1);
        setState(2394);
        bitwise_or(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lte_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Lte_bitwise_orContext::Lte_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lte_bitwise_orContext::LT_EQ() {
  return getToken(FandangoParser::LT_EQ, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Lte_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Lte_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleLte_bitwise_or;
}


std::any FandangoParser::Lte_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLte_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lte_bitwise_orContext* FandangoParser::lte_bitwise_or() {
  Lte_bitwise_orContext *_localctx = _tracker.createInstance<Lte_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 312, FandangoParser::RuleLte_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2397);
    match(FandangoParser::LT_EQ);
    setState(2398);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lt_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Lt_bitwise_orContext::Lt_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lt_bitwise_orContext::LESS_THAN() {
  return getToken(FandangoParser::LESS_THAN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Lt_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Lt_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleLt_bitwise_or;
}


std::any FandangoParser::Lt_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLt_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lt_bitwise_orContext* FandangoParser::lt_bitwise_or() {
  Lt_bitwise_orContext *_localctx = _tracker.createInstance<Lt_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 314, FandangoParser::RuleLt_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2400);
    match(FandangoParser::LESS_THAN);
    setState(2401);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Gte_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Gte_bitwise_orContext::Gte_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Gte_bitwise_orContext::GT_EQ() {
  return getToken(FandangoParser::GT_EQ, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Gte_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Gte_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleGte_bitwise_or;
}


std::any FandangoParser::Gte_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGte_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Gte_bitwise_orContext* FandangoParser::gte_bitwise_or() {
  Gte_bitwise_orContext *_localctx = _tracker.createInstance<Gte_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 316, FandangoParser::RuleGte_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2403);
    match(FandangoParser::GT_EQ);
    setState(2404);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Gt_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Gt_bitwise_orContext::Gt_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Gt_bitwise_orContext::GREATER_THAN() {
  return getToken(FandangoParser::GREATER_THAN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Gt_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Gt_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleGt_bitwise_or;
}


std::any FandangoParser::Gt_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGt_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Gt_bitwise_orContext* FandangoParser::gt_bitwise_or() {
  Gt_bitwise_orContext *_localctx = _tracker.createInstance<Gt_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 318, FandangoParser::RuleGt_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2406);
    match(FandangoParser::GREATER_THAN);
    setState(2407);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Notin_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Notin_bitwise_orContext::Notin_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Notin_bitwise_orContext::NOT() {
  return getToken(FandangoParser::NOT, 0);
}

tree::TerminalNode* FandangoParser::Notin_bitwise_orContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Notin_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Notin_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleNotin_bitwise_or;
}


std::any FandangoParser::Notin_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNotin_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Notin_bitwise_orContext* FandangoParser::notin_bitwise_or() {
  Notin_bitwise_orContext *_localctx = _tracker.createInstance<Notin_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 320, FandangoParser::RuleNotin_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2409);
    match(FandangoParser::NOT);
    setState(2410);
    match(FandangoParser::IN);
    setState(2411);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- In_bitwise_orContext ------------------------------------------------------------------

FandangoParser::In_bitwise_orContext::In_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::In_bitwise_orContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::In_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::In_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleIn_bitwise_or;
}


std::any FandangoParser::In_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIn_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::In_bitwise_orContext* FandangoParser::in_bitwise_or() {
  In_bitwise_orContext *_localctx = _tracker.createInstance<In_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 322, FandangoParser::RuleIn_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2413);
    match(FandangoParser::IN);
    setState(2414);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Isnot_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Isnot_bitwise_orContext::Isnot_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Isnot_bitwise_orContext::IS() {
  return getToken(FandangoParser::IS, 0);
}

tree::TerminalNode* FandangoParser::Isnot_bitwise_orContext::NOT() {
  return getToken(FandangoParser::NOT, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Isnot_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Isnot_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleIsnot_bitwise_or;
}


std::any FandangoParser::Isnot_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIsnot_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Isnot_bitwise_orContext* FandangoParser::isnot_bitwise_or() {
  Isnot_bitwise_orContext *_localctx = _tracker.createInstance<Isnot_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 324, FandangoParser::RuleIsnot_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2416);
    match(FandangoParser::IS);
    setState(2417);
    match(FandangoParser::NOT);
    setState(2418);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Is_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Is_bitwise_orContext::Is_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Is_bitwise_orContext::IS() {
  return getToken(FandangoParser::IS, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Is_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Is_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleIs_bitwise_or;
}


std::any FandangoParser::Is_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIs_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Is_bitwise_orContext* FandangoParser::is_bitwise_or() {
  Is_bitwise_orContext *_localctx = _tracker.createInstance<Is_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 326, FandangoParser::RuleIs_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2420);
    match(FandangoParser::IS);
    setState(2421);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bitwise_orContext ------------------------------------------------------------------

FandangoParser::Bitwise_orContext::Bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Bitwise_xorContext* FandangoParser::Bitwise_orContext::bitwise_xor() {
  return getRuleContext<FandangoParser::Bitwise_xorContext>(0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

tree::TerminalNode* FandangoParser::Bitwise_orContext::OR_OP() {
  return getToken(FandangoParser::OR_OP, 0);
}


size_t FandangoParser::Bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleBitwise_or;
}


std::any FandangoParser::Bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_or(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Bitwise_orContext* FandangoParser::bitwise_or() {
   return bitwise_or(0);
}

FandangoParser::Bitwise_orContext* FandangoParser::bitwise_or(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Bitwise_orContext *_localctx = _tracker.createInstance<Bitwise_orContext>(_ctx, parentState);
  FandangoParser::Bitwise_orContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 328;
  enterRecursionRule(_localctx, 328, FandangoParser::RuleBitwise_or, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2424);
    bitwise_xor(0);
    _ctx->stop = _input->LT(-1);
    setState(2431);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Bitwise_orContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitwise_or);
        setState(2426);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2427);
        match(FandangoParser::OR_OP);
        setState(2428);
        bitwise_xor(0); 
      }
      setState(2433);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Bitwise_xorContext ------------------------------------------------------------------

FandangoParser::Bitwise_xorContext::Bitwise_xorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Bitwise_andContext* FandangoParser::Bitwise_xorContext::bitwise_and() {
  return getRuleContext<FandangoParser::Bitwise_andContext>(0);
}

FandangoParser::Bitwise_xorContext* FandangoParser::Bitwise_xorContext::bitwise_xor() {
  return getRuleContext<FandangoParser::Bitwise_xorContext>(0);
}

tree::TerminalNode* FandangoParser::Bitwise_xorContext::XOR() {
  return getToken(FandangoParser::XOR, 0);
}


size_t FandangoParser::Bitwise_xorContext::getRuleIndex() const {
  return FandangoParser::RuleBitwise_xor;
}


std::any FandangoParser::Bitwise_xorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_xor(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Bitwise_xorContext* FandangoParser::bitwise_xor() {
   return bitwise_xor(0);
}

FandangoParser::Bitwise_xorContext* FandangoParser::bitwise_xor(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Bitwise_xorContext *_localctx = _tracker.createInstance<Bitwise_xorContext>(_ctx, parentState);
  FandangoParser::Bitwise_xorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 330;
  enterRecursionRule(_localctx, 330, FandangoParser::RuleBitwise_xor, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2435);
    bitwise_and(0);
    _ctx->stop = _input->LT(-1);
    setState(2442);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Bitwise_xorContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitwise_xor);
        setState(2437);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2438);
        match(FandangoParser::XOR);
        setState(2439);
        bitwise_and(0); 
      }
      setState(2444);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Bitwise_andContext ------------------------------------------------------------------

FandangoParser::Bitwise_andContext::Bitwise_andContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Shift_exprContext* FandangoParser::Bitwise_andContext::shift_expr() {
  return getRuleContext<FandangoParser::Shift_exprContext>(0);
}

FandangoParser::Bitwise_andContext* FandangoParser::Bitwise_andContext::bitwise_and() {
  return getRuleContext<FandangoParser::Bitwise_andContext>(0);
}

tree::TerminalNode* FandangoParser::Bitwise_andContext::AND_OP() {
  return getToken(FandangoParser::AND_OP, 0);
}


size_t FandangoParser::Bitwise_andContext::getRuleIndex() const {
  return FandangoParser::RuleBitwise_and;
}


std::any FandangoParser::Bitwise_andContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_and(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Bitwise_andContext* FandangoParser::bitwise_and() {
   return bitwise_and(0);
}

FandangoParser::Bitwise_andContext* FandangoParser::bitwise_and(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Bitwise_andContext *_localctx = _tracker.createInstance<Bitwise_andContext>(_ctx, parentState);
  FandangoParser::Bitwise_andContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 332;
  enterRecursionRule(_localctx, 332, FandangoParser::RuleBitwise_and, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2446);
    shift_expr(0);
    _ctx->stop = _input->LT(-1);
    setState(2453);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Bitwise_andContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitwise_and);
        setState(2448);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2449);
        match(FandangoParser::AND_OP);
        setState(2450);
        shift_expr(0); 
      }
      setState(2455);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Shift_exprContext ------------------------------------------------------------------

FandangoParser::Shift_exprContext::Shift_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SumContext* FandangoParser::Shift_exprContext::sum() {
  return getRuleContext<FandangoParser::SumContext>(0);
}

FandangoParser::Shift_exprContext* FandangoParser::Shift_exprContext::shift_expr() {
  return getRuleContext<FandangoParser::Shift_exprContext>(0);
}

tree::TerminalNode* FandangoParser::Shift_exprContext::LEFT_SHIFT() {
  return getToken(FandangoParser::LEFT_SHIFT, 0);
}

tree::TerminalNode* FandangoParser::Shift_exprContext::RIGHT_SHIFT() {
  return getToken(FandangoParser::RIGHT_SHIFT, 0);
}


size_t FandangoParser::Shift_exprContext::getRuleIndex() const {
  return FandangoParser::RuleShift_expr;
}


std::any FandangoParser::Shift_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitShift_expr(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Shift_exprContext* FandangoParser::shift_expr() {
   return shift_expr(0);
}

FandangoParser::Shift_exprContext* FandangoParser::shift_expr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Shift_exprContext *_localctx = _tracker.createInstance<Shift_exprContext>(_ctx, parentState);
  FandangoParser::Shift_exprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 334;
  enterRecursionRule(_localctx, 334, FandangoParser::RuleShift_expr, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2457);
    sum(0);
    _ctx->stop = _input->LT(-1);
    setState(2467);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2465);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 282, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Shift_exprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShift_expr);
          setState(2459);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2460);
          match(FandangoParser::LEFT_SHIFT);
          setState(2461);
          sum(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Shift_exprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShift_expr);
          setState(2462);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2463);
          match(FandangoParser::RIGHT_SHIFT);
          setState(2464);
          sum(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(2469);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SumContext ------------------------------------------------------------------

FandangoParser::SumContext::SumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::TermContext* FandangoParser::SumContext::term() {
  return getRuleContext<FandangoParser::TermContext>(0);
}

FandangoParser::SumContext* FandangoParser::SumContext::sum() {
  return getRuleContext<FandangoParser::SumContext>(0);
}

tree::TerminalNode* FandangoParser::SumContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}

tree::TerminalNode* FandangoParser::SumContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::SumContext::getRuleIndex() const {
  return FandangoParser::RuleSum;
}


std::any FandangoParser::SumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSum(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::SumContext* FandangoParser::sum() {
   return sum(0);
}

FandangoParser::SumContext* FandangoParser::sum(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::SumContext *_localctx = _tracker.createInstance<SumContext>(_ctx, parentState);
  FandangoParser::SumContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 336;
  enterRecursionRule(_localctx, 336, FandangoParser::RuleSum, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2471);
    term(0);
    _ctx->stop = _input->LT(-1);
    setState(2481);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 285, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2479);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 284, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<SumContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSum);
          setState(2473);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2474);
          match(FandangoParser::ADD);
          setState(2475);
          term(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<SumContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSum);
          setState(2476);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2477);
          match(FandangoParser::MINUS);
          setState(2478);
          term(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(2483);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 285, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TermContext ------------------------------------------------------------------

FandangoParser::TermContext::TermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::FactorContext* FandangoParser::TermContext::factor() {
  return getRuleContext<FandangoParser::FactorContext>(0);
}

FandangoParser::TermContext* FandangoParser::TermContext::term() {
  return getRuleContext<FandangoParser::TermContext>(0);
}

tree::TerminalNode* FandangoParser::TermContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

tree::TerminalNode* FandangoParser::TermContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

tree::TerminalNode* FandangoParser::TermContext::IDIV() {
  return getToken(FandangoParser::IDIV, 0);
}

tree::TerminalNode* FandangoParser::TermContext::MOD() {
  return getToken(FandangoParser::MOD, 0);
}

tree::TerminalNode* FandangoParser::TermContext::AT() {
  return getToken(FandangoParser::AT, 0);
}


size_t FandangoParser::TermContext::getRuleIndex() const {
  return FandangoParser::RuleTerm;
}


std::any FandangoParser::TermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTerm(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::TermContext* FandangoParser::term() {
   return term(0);
}

FandangoParser::TermContext* FandangoParser::term(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::TermContext *_localctx = _tracker.createInstance<TermContext>(_ctx, parentState);
  FandangoParser::TermContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 338;
  enterRecursionRule(_localctx, 338, FandangoParser::RuleTerm, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2485);
    factor();
    _ctx->stop = _input->LT(-1);
    setState(2504);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 287, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2502);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 286, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2487);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(2488);
          match(FandangoParser::STAR);
          setState(2489);
          factor();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2490);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(2491);
          match(FandangoParser::DIV);
          setState(2492);
          factor();
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2493);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(2494);
          match(FandangoParser::IDIV);
          setState(2495);
          factor();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2496);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2497);
          match(FandangoParser::MOD);
          setState(2498);
          factor();
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2499);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2500);
          match(FandangoParser::AT);
          setState(2501);
          factor();
          break;
        }

        default:
          break;
        } 
      }
      setState(2506);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 287, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- FactorContext ------------------------------------------------------------------

FandangoParser::FactorContext::FactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::FactorContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}

FandangoParser::FactorContext* FandangoParser::FactorContext::factor() {
  return getRuleContext<FandangoParser::FactorContext>(0);
}

tree::TerminalNode* FandangoParser::FactorContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}

tree::TerminalNode* FandangoParser::FactorContext::NOT_OP() {
  return getToken(FandangoParser::NOT_OP, 0);
}

FandangoParser::PowerContext* FandangoParser::FactorContext::power() {
  return getRuleContext<FandangoParser::PowerContext>(0);
}


size_t FandangoParser::FactorContext::getRuleIndex() const {
  return FandangoParser::RuleFactor;
}


std::any FandangoParser::FactorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFactor(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::FactorContext* FandangoParser::factor() {
  FactorContext *_localctx = _tracker.createInstance<FactorContext>(_ctx, getState());
  enterRule(_localctx, 340, FandangoParser::RuleFactor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2514);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ADD: {
        enterOuterAlt(_localctx, 1);
        setState(2507);
        match(FandangoParser::ADD);
        setState(2508);
        factor();
        break;
      }

      case FandangoParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(2509);
        match(FandangoParser::MINUS);
        setState(2510);
        factor();
        break;
      }

      case FandangoParser::NOT_OP: {
        enterOuterAlt(_localctx, 3);
        setState(2511);
        match(FandangoParser::NOT_OP);
        setState(2512);
        factor();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 4);
        setState(2513);
        power();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PowerContext ------------------------------------------------------------------

FandangoParser::PowerContext::PowerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Await_primaryContext* FandangoParser::PowerContext::await_primary() {
  return getRuleContext<FandangoParser::Await_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::PowerContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::FactorContext* FandangoParser::PowerContext::factor() {
  return getRuleContext<FandangoParser::FactorContext>(0);
}


size_t FandangoParser::PowerContext::getRuleIndex() const {
  return FandangoParser::RulePower;
}


std::any FandangoParser::PowerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPower(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PowerContext* FandangoParser::power() {
  PowerContext *_localctx = _tracker.createInstance<PowerContext>(_ctx, getState());
  enterRule(_localctx, 342, FandangoParser::RulePower);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2521);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 289, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2516);
      await_primary();
      setState(2517);
      match(FandangoParser::POWER);
      setState(2518);
      factor();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2520);
      await_primary();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Await_primaryContext ------------------------------------------------------------------

FandangoParser::Await_primaryContext::Await_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Await_primaryContext::AWAIT() {
  return getToken(FandangoParser::AWAIT, 0);
}

FandangoParser::PrimaryContext* FandangoParser::Await_primaryContext::primary() {
  return getRuleContext<FandangoParser::PrimaryContext>(0);
}


size_t FandangoParser::Await_primaryContext::getRuleIndex() const {
  return FandangoParser::RuleAwait_primary;
}


std::any FandangoParser::Await_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAwait_primary(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Await_primaryContext* FandangoParser::await_primary() {
  Await_primaryContext *_localctx = _tracker.createInstance<Await_primaryContext>(_ctx, getState());
  enterRule(_localctx, 344, FandangoParser::RuleAwait_primary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2526);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::AWAIT: {
        enterOuterAlt(_localctx, 1);
        setState(2523);
        match(FandangoParser::AWAIT);
        setState(2524);
        primary(0);
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(2525);
        primary(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

FandangoParser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AtomContext* FandangoParser::PrimaryContext::atom() {
  return getRuleContext<FandangoParser::AtomContext>(0);
}

FandangoParser::PrimaryContext* FandangoParser::PrimaryContext::primary() {
  return getRuleContext<FandangoParser::PrimaryContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

FandangoParser::IdentifierContext* FandangoParser::PrimaryContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

FandangoParser::GenexpContext* FandangoParser::PrimaryContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::PrimaryContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::PrimaryContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::PrimaryContext::getRuleIndex() const {
  return FandangoParser::RulePrimary;
}


std::any FandangoParser::PrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPrimary(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::PrimaryContext* FandangoParser::primary() {
   return primary(0);
}

FandangoParser::PrimaryContext* FandangoParser::primary(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, parentState);
  FandangoParser::PrimaryContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 346;
  enterRecursionRule(_localctx, 346, FandangoParser::RulePrimary, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2529);
    atom();
    _ctx->stop = _input->LT(-1);
    setState(2549);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2547);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2531);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(2532);
          match(FandangoParser::DOT);
          setState(2533);
          identifier();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2534);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(2535);
          genexp();
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2536);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2537);
          match(FandangoParser::OPEN_PAREN);
          setState(2539);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 74)) & 93071897) != 0)) {
            setState(2538);
            arguments();
          }
          setState(2541);
          match(FandangoParser::CLOSE_PAREN);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2542);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2543);
          match(FandangoParser::OPEN_BRACK);
          setState(2544);
          slices();
          setState(2545);
          match(FandangoParser::CLOSE_BRACK);
          break;
        }

        default:
          break;
        } 
      }
      setState(2551);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SlicesContext ------------------------------------------------------------------

FandangoParser::SlicesContext::SlicesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::SliceContext *> FandangoParser::SlicesContext::slice() {
  return getRuleContexts<FandangoParser::SliceContext>();
}

FandangoParser::SliceContext* FandangoParser::SlicesContext::slice(size_t i) {
  return getRuleContext<FandangoParser::SliceContext>(i);
}

std::vector<FandangoParser::Starred_expressionContext *> FandangoParser::SlicesContext::starred_expression() {
  return getRuleContexts<FandangoParser::Starred_expressionContext>();
}

FandangoParser::Starred_expressionContext* FandangoParser::SlicesContext::starred_expression(size_t i) {
  return getRuleContext<FandangoParser::Starred_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::SlicesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::SlicesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::SlicesContext::getRuleIndex() const {
  return FandangoParser::RuleSlices;
}


std::any FandangoParser::SlicesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlices(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SlicesContext* FandangoParser::slices() {
  SlicesContext *_localctx = _tracker.createInstance<SlicesContext>(_ctx, getState());
  enterRule(_localctx, 348, FandangoParser::RuleSlices);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2554);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx)) {
    case 1: {
      setState(2552);
      slice();
      break;
    }

    case 2: {
      setState(2553);
      starred_expression();
      break;
    }

    default:
      break;
    }
    setState(2563);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2556);
        match(FandangoParser::COMMA);
        setState(2559);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx)) {
        case 1: {
          setState(2557);
          slice();
          break;
        }

        case 2: {
          setState(2558);
          starred_expression();
          break;
        }

        default:
          break;
        } 
      }
      setState(2565);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx);
    }
    setState(2567);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2566);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SliceContext ------------------------------------------------------------------

FandangoParser::SliceContext::SliceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::SliceContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::SliceContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::SliceContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::SliceContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

FandangoParser::Named_expressionContext* FandangoParser::SliceContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::SliceContext::getRuleIndex() const {
  return FandangoParser::RuleSlice;
}


std::any FandangoParser::SliceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlice(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SliceContext* FandangoParser::slice() {
  SliceContext *_localctx = _tracker.createInstance<SliceContext>(_ctx, getState());
  enterRule(_localctx, 350, FandangoParser::RuleSlice);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2583);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2570);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 93071897) != 0)) {
        setState(2569);
        expression();
      }
      setState(2572);
      match(FandangoParser::COLON);
      setState(2574);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 93071897) != 0)) {
        setState(2573);
        expression();
      }
      setState(2580);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COLON) {
        setState(2576);
        match(FandangoParser::COLON);
        setState(2578);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 74)) & 93071897) != 0)) {
          setState(2577);
          expression();
        }
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2582);
      named_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

FandangoParser::AtomContext::AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Selector_lengthContext* FandangoParser::AtomContext::selector_length() {
  return getRuleContext<FandangoParser::Selector_lengthContext>(0);
}

FandangoParser::IdentifierContext* FandangoParser::AtomContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::AtomContext::TRUE() {
  return getToken(FandangoParser::TRUE, 0);
}

tree::TerminalNode* FandangoParser::AtomContext::FALSE() {
  return getToken(FandangoParser::FALSE, 0);
}

tree::TerminalNode* FandangoParser::AtomContext::NONE() {
  return getToken(FandangoParser::NONE, 0);
}

FandangoParser::StringsContext* FandangoParser::AtomContext::strings() {
  return getRuleContext<FandangoParser::StringsContext>(0);
}

tree::TerminalNode* FandangoParser::AtomContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}

FandangoParser::TupleContext* FandangoParser::AtomContext::tuple() {
  return getRuleContext<FandangoParser::TupleContext>(0);
}

FandangoParser::GroupContext* FandangoParser::AtomContext::group() {
  return getRuleContext<FandangoParser::GroupContext>(0);
}

FandangoParser::GenexpContext* FandangoParser::AtomContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

FandangoParser::ListContext* FandangoParser::AtomContext::list() {
  return getRuleContext<FandangoParser::ListContext>(0);
}

FandangoParser::ListcompContext* FandangoParser::AtomContext::listcomp() {
  return getRuleContext<FandangoParser::ListcompContext>(0);
}

FandangoParser::DictContext* FandangoParser::AtomContext::dict() {
  return getRuleContext<FandangoParser::DictContext>(0);
}

FandangoParser::SetContext* FandangoParser::AtomContext::set() {
  return getRuleContext<FandangoParser::SetContext>(0);
}

FandangoParser::DictcompContext* FandangoParser::AtomContext::dictcomp() {
  return getRuleContext<FandangoParser::DictcompContext>(0);
}

FandangoParser::SetcompContext* FandangoParser::AtomContext::setcomp() {
  return getRuleContext<FandangoParser::SetcompContext>(0);
}

tree::TerminalNode* FandangoParser::AtomContext::ELLIPSIS() {
  return getToken(FandangoParser::ELLIPSIS, 0);
}


size_t FandangoParser::AtomContext::getRuleIndex() const {
  return FandangoParser::RuleAtom;
}


std::any FandangoParser::AtomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAtom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AtomContext* FandangoParser::atom() {
  AtomContext *_localctx = _tracker.createInstance<AtomContext>(_ctx, getState());
  enterRule(_localctx, 352, FandangoParser::RuleAtom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2608);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2585);
      selector_length();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2586);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2587);
      match(FandangoParser::TRUE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2588);
      match(FandangoParser::FALSE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2589);
      match(FandangoParser::NONE);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2590);
      strings();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2591);
      match(FandangoParser::NUMBER);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2595);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 303, _ctx)) {
      case 1: {
        setState(2592);
        tuple();
        break;
      }

      case 2: {
        setState(2593);
        group();
        break;
      }

      case 3: {
        setState(2594);
        genexp();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2599);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx)) {
      case 1: {
        setState(2597);
        list();
        break;
      }

      case 2: {
        setState(2598);
        listcomp();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2605);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx)) {
      case 1: {
        setState(2601);
        dict();
        break;
      }

      case 2: {
        setState(2602);
        set();
        break;
      }

      case 3: {
        setState(2603);
        dictcomp();
        break;
      }

      case 4: {
        setState(2604);
        setcomp();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2607);
      match(FandangoParser::ELLIPSIS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupContext ------------------------------------------------------------------

FandangoParser::GroupContext::GroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::GroupContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::GroupContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Yield_exprContext* FandangoParser::GroupContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Named_expressionContext* FandangoParser::GroupContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::GroupContext::getRuleIndex() const {
  return FandangoParser::RuleGroup;
}


std::any FandangoParser::GroupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGroup(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::GroupContext* FandangoParser::group() {
  GroupContext *_localctx = _tracker.createInstance<GroupContext>(_ctx, getState());
  enterRule(_localctx, 354, FandangoParser::RuleGroup);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2610);
    match(FandangoParser::OPEN_PAREN);
    setState(2613);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::YIELD: {
        setState(2611);
        yield_expr();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        setState(2612);
        named_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2615);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdefContext ------------------------------------------------------------------

FandangoParser::LambdefContext::LambdefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::LambdefContext::LAMBDA() {
  return getToken(FandangoParser::LAMBDA, 0);
}

tree::TerminalNode* FandangoParser::LambdefContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::LambdefContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Lambda_paramsContext* FandangoParser::LambdefContext::lambda_params() {
  return getRuleContext<FandangoParser::Lambda_paramsContext>(0);
}


size_t FandangoParser::LambdefContext::getRuleIndex() const {
  return FandangoParser::RuleLambdef;
}


std::any FandangoParser::LambdefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambdef(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::LambdefContext* FandangoParser::lambdef() {
  LambdefContext *_localctx = _tracker.createInstance<LambdefContext>(_ctx, getState());
  enterRule(_localctx, 356, FandangoParser::RuleLambdef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2617);
    match(FandangoParser::LAMBDA);
    setState(2619);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 55) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 55)) & 272629775) != 0)) {
      setState(2618);
      lambda_params();
    }
    setState(2621);
    match(FandangoParser::COLON);
    setState(2622);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_paramsContext ------------------------------------------------------------------

FandangoParser::Lambda_paramsContext::Lambda_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_parametersContext* FandangoParser::Lambda_paramsContext::lambda_parameters() {
  return getRuleContext<FandangoParser::Lambda_parametersContext>(0);
}


size_t FandangoParser::Lambda_paramsContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_params;
}


std::any FandangoParser::Lambda_paramsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_params(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_paramsContext* FandangoParser::lambda_params() {
  Lambda_paramsContext *_localctx = _tracker.createInstance<Lambda_paramsContext>(_ctx, getState());
  enterRule(_localctx, 358, FandangoParser::RuleLambda_params);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2624);
    lambda_parameters();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_parametersContext ------------------------------------------------------------------

FandangoParser::Lambda_parametersContext::Lambda_parametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_slash_no_defaultContext* FandangoParser::Lambda_parametersContext::lambda_slash_no_default() {
  return getRuleContext<FandangoParser::Lambda_slash_no_defaultContext>(0);
}

std::vector<FandangoParser::Lambda_param_no_defaultContext *> FandangoParser::Lambda_parametersContext::lambda_param_no_default() {
  return getRuleContexts<FandangoParser::Lambda_param_no_defaultContext>();
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_parametersContext::lambda_param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(i);
}

std::vector<FandangoParser::Lambda_param_with_defaultContext *> FandangoParser::Lambda_parametersContext::lambda_param_with_default() {
  return getRuleContexts<FandangoParser::Lambda_param_with_defaultContext>();
}

FandangoParser::Lambda_param_with_defaultContext* FandangoParser::Lambda_parametersContext::lambda_param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_with_defaultContext>(i);
}

FandangoParser::Lambda_star_etcContext* FandangoParser::Lambda_parametersContext::lambda_star_etc() {
  return getRuleContext<FandangoParser::Lambda_star_etcContext>(0);
}

FandangoParser::Lambda_slash_with_defaultContext* FandangoParser::Lambda_parametersContext::lambda_slash_with_default() {
  return getRuleContext<FandangoParser::Lambda_slash_with_defaultContext>(0);
}


size_t FandangoParser::Lambda_parametersContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_parameters;
}


std::any FandangoParser::Lambda_parametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_parameters(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_parametersContext* FandangoParser::lambda_parameters() {
  Lambda_parametersContext *_localctx = _tracker.createInstance<Lambda_parametersContext>(_ctx, getState());
  enterRule(_localctx, 360, FandangoParser::RuleLambda_parameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2675);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2626);
      lambda_slash_no_default();
      setState(2630);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 309, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2627);
          lambda_param_no_default(); 
        }
        setState(2632);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 309, _ctx);
      }
      setState(2636);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(2633);
        lambda_param_with_default();
        setState(2638);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2640);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2639);
        lambda_star_etc();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2642);
      lambda_slash_with_default();
      setState(2646);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(2643);
        lambda_param_with_default();
        setState(2648);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2650);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2649);
        lambda_star_etc();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2653); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2652);
                lambda_param_no_default();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2655); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(2660);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(2657);
        lambda_param_with_default();
        setState(2662);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2664);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2663);
        lambda_star_etc();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2667); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2666);
        lambda_param_with_default();
        setState(2669); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0));
      setState(2672);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2671);
        lambda_star_etc();
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2674);
      lambda_star_etc();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_slash_no_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_slash_no_defaultContext::Lambda_slash_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_slash_no_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Lambda_param_no_defaultContext *> FandangoParser::Lambda_slash_no_defaultContext::lambda_param_no_default() {
  return getRuleContexts<FandangoParser::Lambda_param_no_defaultContext>();
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_slash_no_defaultContext::lambda_param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Lambda_slash_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_slash_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_slash_no_default;
}


std::any FandangoParser::Lambda_slash_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_slash_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_slash_no_defaultContext* FandangoParser::lambda_slash_no_default() {
  Lambda_slash_no_defaultContext *_localctx = _tracker.createInstance<Lambda_slash_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 362, FandangoParser::RuleLambda_slash_no_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2678); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2677);
      lambda_param_no_default();
      setState(2680); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540431955284459520) != 0));
    setState(2682);
    match(FandangoParser::DIV);
    setState(2684);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2683);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_slash_with_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_slash_with_defaultContext::Lambda_slash_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_slash_with_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Lambda_param_no_defaultContext *> FandangoParser::Lambda_slash_with_defaultContext::lambda_param_no_default() {
  return getRuleContexts<FandangoParser::Lambda_param_no_defaultContext>();
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_slash_with_defaultContext::lambda_param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(i);
}

std::vector<FandangoParser::Lambda_param_with_defaultContext *> FandangoParser::Lambda_slash_with_defaultContext::lambda_param_with_default() {
  return getRuleContexts<FandangoParser::Lambda_param_with_defaultContext>();
}

FandangoParser::Lambda_param_with_defaultContext* FandangoParser::Lambda_slash_with_defaultContext::lambda_param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_with_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Lambda_slash_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_slash_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_slash_with_default;
}


std::any FandangoParser::Lambda_slash_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_slash_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_slash_with_defaultContext* FandangoParser::lambda_slash_with_default() {
  Lambda_slash_with_defaultContext *_localctx = _tracker.createInstance<Lambda_slash_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 364, FandangoParser::RuleLambda_slash_with_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2689);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 322, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2686);
        lambda_param_no_default(); 
      }
      setState(2691);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 322, _ctx);
    }
    setState(2693); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2692);
      lambda_param_with_default();
      setState(2695); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540431955284459520) != 0));
    setState(2697);
    match(FandangoParser::DIV);
    setState(2699);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2698);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_star_etcContext ------------------------------------------------------------------

FandangoParser::Lambda_star_etcContext::Lambda_star_etcContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_star_etcContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_star_etcContext::lambda_param_no_default() {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(0);
}

std::vector<FandangoParser::Lambda_param_maybe_defaultContext *> FandangoParser::Lambda_star_etcContext::lambda_param_maybe_default() {
  return getRuleContexts<FandangoParser::Lambda_param_maybe_defaultContext>();
}

FandangoParser::Lambda_param_maybe_defaultContext* FandangoParser::Lambda_star_etcContext::lambda_param_maybe_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_maybe_defaultContext>(i);
}

FandangoParser::Lambda_kwdsContext* FandangoParser::Lambda_star_etcContext::lambda_kwds() {
  return getRuleContext<FandangoParser::Lambda_kwdsContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_star_etcContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_star_etcContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_star_etc;
}


std::any FandangoParser::Lambda_star_etcContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_star_etc(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_star_etcContext* FandangoParser::lambda_star_etc() {
  Lambda_star_etcContext *_localctx = _tracker.createInstance<Lambda_star_etcContext>(_ctx, getState());
  enterRule(_localctx, 366, FandangoParser::RuleLambda_star_etc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2723);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 329, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2701);
      match(FandangoParser::STAR);
      setState(2702);
      lambda_param_no_default();
      setState(2706);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(2703);
        lambda_param_maybe_default();
        setState(2708);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2710);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(2709);
        lambda_kwds();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2712);
      match(FandangoParser::STAR);
      setState(2713);
      match(FandangoParser::COMMA);
      setState(2715); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2714);
        lambda_param_maybe_default();
        setState(2717); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0));
      setState(2720);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(2719);
        lambda_kwds();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2722);
      lambda_kwds();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_kwdsContext ------------------------------------------------------------------

FandangoParser::Lambda_kwdsContext::Lambda_kwdsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_kwdsContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_kwdsContext::lambda_param_no_default() {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(0);
}


size_t FandangoParser::Lambda_kwdsContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_kwds;
}


std::any FandangoParser::Lambda_kwdsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_kwds(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_kwdsContext* FandangoParser::lambda_kwds() {
  Lambda_kwdsContext *_localctx = _tracker.createInstance<Lambda_kwdsContext>(_ctx, getState());
  enterRule(_localctx, 368, FandangoParser::RuleLambda_kwds);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2725);
    match(FandangoParser::POWER);
    setState(2726);
    lambda_param_no_default();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_param_no_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_param_no_defaultContext::Lambda_param_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_paramContext* FandangoParser::Lambda_param_no_defaultContext::lambda_param() {
  return getRuleContext<FandangoParser::Lambda_paramContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_param_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_param_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param_no_default;
}


std::any FandangoParser::Lambda_param_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::lambda_param_no_default() {
  Lambda_param_no_defaultContext *_localctx = _tracker.createInstance<Lambda_param_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 370, FandangoParser::RuleLambda_param_no_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2728);
    lambda_param();
    setState(2730);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2729);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_param_with_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_param_with_defaultContext::Lambda_param_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_paramContext* FandangoParser::Lambda_param_with_defaultContext::lambda_param() {
  return getRuleContext<FandangoParser::Lambda_paramContext>(0);
}

FandangoParser::DefaultContext* FandangoParser::Lambda_param_with_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_param_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_param_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param_with_default;
}


std::any FandangoParser::Lambda_param_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_param_with_defaultContext* FandangoParser::lambda_param_with_default() {
  Lambda_param_with_defaultContext *_localctx = _tracker.createInstance<Lambda_param_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 372, FandangoParser::RuleLambda_param_with_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2732);
    lambda_param();
    setState(2733);
    default_();
    setState(2735);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2734);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_param_maybe_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_param_maybe_defaultContext::Lambda_param_maybe_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_paramContext* FandangoParser::Lambda_param_maybe_defaultContext::lambda_param() {
  return getRuleContext<FandangoParser::Lambda_paramContext>(0);
}

FandangoParser::DefaultContext* FandangoParser::Lambda_param_maybe_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_param_maybe_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_param_maybe_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param_maybe_default;
}


std::any FandangoParser::Lambda_param_maybe_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param_maybe_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_param_maybe_defaultContext* FandangoParser::lambda_param_maybe_default() {
  Lambda_param_maybe_defaultContext *_localctx = _tracker.createInstance<Lambda_param_maybe_defaultContext>(_ctx, getState());
  enterRule(_localctx, 374, FandangoParser::RuleLambda_param_maybe_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2737);
    lambda_param();
    setState(2739);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASSIGN) {
      setState(2738);
      default_();
    }
    setState(2742);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2741);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_paramContext ------------------------------------------------------------------

FandangoParser::Lambda_paramContext::Lambda_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Lambda_paramContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}


size_t FandangoParser::Lambda_paramContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param;
}


std::any FandangoParser::Lambda_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_paramContext* FandangoParser::lambda_param() {
  Lambda_paramContext *_localctx = _tracker.createInstance<Lambda_paramContext>(_ctx, getState());
  enterRule(_localctx, 376, FandangoParser::RuleLambda_param);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2744);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_middle_no_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_middle_no_quoteContext::Fstring_middle_no_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::Fstring_middle_no_quoteContext::fstring_replacement_field() {
  return getRuleContext<FandangoParser::Fstring_replacement_fieldContext>(0);
}

FandangoParser::Fstring_any_no_quoteContext* FandangoParser::Fstring_middle_no_quoteContext::fstring_any_no_quote() {
  return getRuleContext<FandangoParser::Fstring_any_no_quoteContext>(0);
}


size_t FandangoParser::Fstring_middle_no_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_middle_no_quote;
}


std::any FandangoParser::Fstring_middle_no_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_middle_no_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_middle_no_quoteContext* FandangoParser::fstring_middle_no_quote() {
  Fstring_middle_no_quoteContext *_localctx = _tracker.createInstance<Fstring_middle_no_quoteContext>(_ctx, getState());
  enterRule(_localctx, 378, FandangoParser::RuleFstring_middle_no_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2748);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2746);
      fstring_replacement_field();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2747);
      fstring_any_no_quote();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_middle_no_single_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_middle_no_single_quoteContext::Fstring_middle_no_single_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::Fstring_middle_no_single_quoteContext::fstring_replacement_field() {
  return getRuleContext<FandangoParser::Fstring_replacement_fieldContext>(0);
}

FandangoParser::Fstring_any_no_single_quoteContext* FandangoParser::Fstring_middle_no_single_quoteContext::fstring_any_no_single_quote() {
  return getRuleContext<FandangoParser::Fstring_any_no_single_quoteContext>(0);
}


size_t FandangoParser::Fstring_middle_no_single_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_middle_no_single_quote;
}


std::any FandangoParser::Fstring_middle_no_single_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_middle_no_single_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_middle_no_single_quoteContext* FandangoParser::fstring_middle_no_single_quote() {
  Fstring_middle_no_single_quoteContext *_localctx = _tracker.createInstance<Fstring_middle_no_single_quoteContext>(_ctx, getState());
  enterRule(_localctx, 380, FandangoParser::RuleFstring_middle_no_single_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2752);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 335, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2750);
      fstring_replacement_field();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2751);
      fstring_any_no_single_quote();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_middle_breaks_no_triple_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_middle_breaks_no_triple_quoteContext::Fstring_middle_breaks_no_triple_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::Fstring_middle_breaks_no_triple_quoteContext::fstring_replacement_field() {
  return getRuleContext<FandangoParser::Fstring_replacement_fieldContext>(0);
}

FandangoParser::Fstring_any_breaks_no_triple_quoteContext* FandangoParser::Fstring_middle_breaks_no_triple_quoteContext::fstring_any_breaks_no_triple_quote() {
  return getRuleContext<FandangoParser::Fstring_any_breaks_no_triple_quoteContext>(0);
}


size_t FandangoParser::Fstring_middle_breaks_no_triple_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_middle_breaks_no_triple_quote;
}


std::any FandangoParser::Fstring_middle_breaks_no_triple_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_middle_breaks_no_triple_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_middle_breaks_no_triple_quoteContext* FandangoParser::fstring_middle_breaks_no_triple_quote() {
  Fstring_middle_breaks_no_triple_quoteContext *_localctx = _tracker.createInstance<Fstring_middle_breaks_no_triple_quoteContext>(_ctx, getState());
  enterRule(_localctx, 382, FandangoParser::RuleFstring_middle_breaks_no_triple_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2756);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2754);
      fstring_replacement_field();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2755);
      fstring_any_breaks_no_triple_quote();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_middle_breaks_no_triple_single_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext::Fstring_middle_breaks_no_triple_single_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext::fstring_replacement_field() {
  return getRuleContext<FandangoParser::Fstring_replacement_fieldContext>(0);
}

FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext* FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext::fstring_any_breaks_no_triple_single_quote() {
  return getRuleContext<FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext>(0);
}


size_t FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_middle_breaks_no_triple_single_quote;
}


std::any FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_middle_breaks_no_triple_single_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext* FandangoParser::fstring_middle_breaks_no_triple_single_quote() {
  Fstring_middle_breaks_no_triple_single_quoteContext *_localctx = _tracker.createInstance<Fstring_middle_breaks_no_triple_single_quoteContext>(_ctx, getState());
  enterRule(_localctx, 384, FandangoParser::RuleFstring_middle_breaks_no_triple_single_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2760);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2758);
      fstring_replacement_field();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2759);
      fstring_any_breaks_no_triple_single_quote();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_any_no_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_any_no_quoteContext::Fstring_any_no_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_anyContext* FandangoParser::Fstring_any_no_quoteContext::fstring_any() {
  return getRuleContext<FandangoParser::Fstring_anyContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_any_no_quoteContext::FSTRING_END_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_SINGLE_QUOTE, 0);
}

tree::TerminalNode* FandangoParser::Fstring_any_no_quoteContext::FSTRING_END_TRIPLE_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_TRIPLE_SINGLE_QUOTE, 0);
}


size_t FandangoParser::Fstring_any_no_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_any_no_quote;
}


std::any FandangoParser::Fstring_any_no_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_any_no_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_any_no_quoteContext* FandangoParser::fstring_any_no_quote() {
  Fstring_any_no_quoteContext *_localctx = _tracker.createInstance<Fstring_any_no_quoteContext>(_ctx, getState());
  enterRule(_localctx, 386, FandangoParser::RuleFstring_any_no_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2765);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER:
      case FandangoParser::PYTHON_START:
      case FandangoParser::PYTHON_END:
      case FandangoParser::AND:
      case FandangoParser::AS:
      case FandangoParser::ASSERT:
      case FandangoParser::ASYNC:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CASE:
      case FandangoParser::CLASS:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEF:
      case FandangoParser::DEL:
      case FandangoParser::ELIF:
      case FandangoParser::ELSE:
      case FandangoParser::EXCEPT:
      case FandangoParser::FALSE:
      case FandangoParser::FINALLY:
      case FandangoParser::FOR:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IF:
      case FandangoParser::IMPORT:
      case FandangoParser::IN:
      case FandangoParser::IS:
      case FandangoParser::LAMBDA:
      case FandangoParser::MATCH:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::OR:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TRY:
      case FandangoParser::TYPE:
      case FandangoParser::WHILE:
      case FandangoParser::WHERE:
      case FandangoParser::WITH:
      case FandangoParser::YIELD:
      case FandangoParser::FORALL:
      case FandangoParser::EXISTS:
      case FandangoParser::MAXIMIZING:
      case FandangoParser::MINIMIZING:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::GRAMMAR_ASSIGN:
      case FandangoParser::QUESTION:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::DOTDOT:
      case FandangoParser::DOT:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::CLOSE_PAREN:
      case FandangoParser::COMMA:
      case FandangoParser::COLON:
      case FandangoParser::SEMI_COLON:
      case FandangoParser::POWER:
      case FandangoParser::ASSIGN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::CLOSE_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::XOR:
      case FandangoParser::AND_OP:
      case FandangoParser::LEFT_SHIFT:
      case FandangoParser::RIGHT_SHIFT:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::DIV:
      case FandangoParser::MOD:
      case FandangoParser::IDIV:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::CLOSE_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::GREATER_THAN:
      case FandangoParser::EQUALS:
      case FandangoParser::GT_EQ:
      case FandangoParser::LT_EQ:
      case FandangoParser::NOT_EQ_1:
      case FandangoParser::NOT_EQ_2:
      case FandangoParser::AT:
      case FandangoParser::ARROW:
      case FandangoParser::ADD_ASSIGN:
      case FandangoParser::SUB_ASSIGN:
      case FandangoParser::MULT_ASSIGN:
      case FandangoParser::AT_ASSIGN:
      case FandangoParser::DIV_ASSIGN:
      case FandangoParser::MOD_ASSIGN:
      case FandangoParser::AND_ASSIGN:
      case FandangoParser::OR_ASSIGN:
      case FandangoParser::XOR_ASSIGN:
      case FandangoParser::LEFT_SHIFT_ASSIGN:
      case FandangoParser::RIGHT_SHIFT_ASSIGN:
      case FandangoParser::POWER_ASSIGN:
      case FandangoParser::IDIV_ASSIGN:
      case FandangoParser::EXPR_ASSIGN:
      case FandangoParser::EXCL:
      case FandangoParser::SKIP_:
      case FandangoParser::UNKNOWN_CHAR: {
        enterOuterAlt(_localctx, 1);
        setState(2762);
        fstring_any();
        break;
      }

      case FandangoParser::FSTRING_END_SINGLE_QUOTE: {
        enterOuterAlt(_localctx, 2);
        setState(2763);
        match(FandangoParser::FSTRING_END_SINGLE_QUOTE);
        break;
      }

      case FandangoParser::FSTRING_END_TRIPLE_SINGLE_QUOTE: {
        enterOuterAlt(_localctx, 3);
        setState(2764);
        match(FandangoParser::FSTRING_END_TRIPLE_SINGLE_QUOTE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_any_no_single_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_any_no_single_quoteContext::Fstring_any_no_single_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_anyContext* FandangoParser::Fstring_any_no_single_quoteContext::fstring_any() {
  return getRuleContext<FandangoParser::Fstring_anyContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_any_no_single_quoteContext::FSTRING_END_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_QUOTE, 0);
}

tree::TerminalNode* FandangoParser::Fstring_any_no_single_quoteContext::FSTRING_END_TRIPLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_TRIPLE_QUOTE, 0);
}


size_t FandangoParser::Fstring_any_no_single_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_any_no_single_quote;
}


std::any FandangoParser::Fstring_any_no_single_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_any_no_single_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_any_no_single_quoteContext* FandangoParser::fstring_any_no_single_quote() {
  Fstring_any_no_single_quoteContext *_localctx = _tracker.createInstance<Fstring_any_no_single_quoteContext>(_ctx, getState());
  enterRule(_localctx, 388, FandangoParser::RuleFstring_any_no_single_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2770);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER:
      case FandangoParser::PYTHON_START:
      case FandangoParser::PYTHON_END:
      case FandangoParser::AND:
      case FandangoParser::AS:
      case FandangoParser::ASSERT:
      case FandangoParser::ASYNC:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CASE:
      case FandangoParser::CLASS:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEF:
      case FandangoParser::DEL:
      case FandangoParser::ELIF:
      case FandangoParser::ELSE:
      case FandangoParser::EXCEPT:
      case FandangoParser::FALSE:
      case FandangoParser::FINALLY:
      case FandangoParser::FOR:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IF:
      case FandangoParser::IMPORT:
      case FandangoParser::IN:
      case FandangoParser::IS:
      case FandangoParser::LAMBDA:
      case FandangoParser::MATCH:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::OR:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TRY:
      case FandangoParser::TYPE:
      case FandangoParser::WHILE:
      case FandangoParser::WHERE:
      case FandangoParser::WITH:
      case FandangoParser::YIELD:
      case FandangoParser::FORALL:
      case FandangoParser::EXISTS:
      case FandangoParser::MAXIMIZING:
      case FandangoParser::MINIMIZING:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::GRAMMAR_ASSIGN:
      case FandangoParser::QUESTION:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::DOTDOT:
      case FandangoParser::DOT:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::CLOSE_PAREN:
      case FandangoParser::COMMA:
      case FandangoParser::COLON:
      case FandangoParser::SEMI_COLON:
      case FandangoParser::POWER:
      case FandangoParser::ASSIGN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::CLOSE_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::XOR:
      case FandangoParser::AND_OP:
      case FandangoParser::LEFT_SHIFT:
      case FandangoParser::RIGHT_SHIFT:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::DIV:
      case FandangoParser::MOD:
      case FandangoParser::IDIV:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::CLOSE_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::GREATER_THAN:
      case FandangoParser::EQUALS:
      case FandangoParser::GT_EQ:
      case FandangoParser::LT_EQ:
      case FandangoParser::NOT_EQ_1:
      case FandangoParser::NOT_EQ_2:
      case FandangoParser::AT:
      case FandangoParser::ARROW:
      case FandangoParser::ADD_ASSIGN:
      case FandangoParser::SUB_ASSIGN:
      case FandangoParser::MULT_ASSIGN:
      case FandangoParser::AT_ASSIGN:
      case FandangoParser::DIV_ASSIGN:
      case FandangoParser::MOD_ASSIGN:
      case FandangoParser::AND_ASSIGN:
      case FandangoParser::OR_ASSIGN:
      case FandangoParser::XOR_ASSIGN:
      case FandangoParser::LEFT_SHIFT_ASSIGN:
      case FandangoParser::RIGHT_SHIFT_ASSIGN:
      case FandangoParser::POWER_ASSIGN:
      case FandangoParser::IDIV_ASSIGN:
      case FandangoParser::EXPR_ASSIGN:
      case FandangoParser::EXCL:
      case FandangoParser::SKIP_:
      case FandangoParser::UNKNOWN_CHAR: {
        enterOuterAlt(_localctx, 1);
        setState(2767);
        fstring_any();
        break;
      }

      case FandangoParser::FSTRING_END_QUOTE: {
        enterOuterAlt(_localctx, 2);
        setState(2768);
        match(FandangoParser::FSTRING_END_QUOTE);
        break;
      }

      case FandangoParser::FSTRING_END_TRIPLE_QUOTE: {
        enterOuterAlt(_localctx, 3);
        setState(2769);
        match(FandangoParser::FSTRING_END_TRIPLE_QUOTE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_middleContext ------------------------------------------------------------------

FandangoParser::Fstring_middleContext::Fstring_middleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_anyContext* FandangoParser::Fstring_middleContext::fstring_any() {
  return getRuleContext<FandangoParser::Fstring_anyContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_middleContext::FSTRING_END_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_SINGLE_QUOTE, 0);
}

tree::TerminalNode* FandangoParser::Fstring_middleContext::FSTRING_END_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_QUOTE, 0);
}


size_t FandangoParser::Fstring_middleContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_middle;
}


std::any FandangoParser::Fstring_middleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_middle(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_middleContext* FandangoParser::fstring_middle() {
  Fstring_middleContext *_localctx = _tracker.createInstance<Fstring_middleContext>(_ctx, getState());
  enterRule(_localctx, 390, FandangoParser::RuleFstring_middle);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2775);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER:
      case FandangoParser::PYTHON_START:
      case FandangoParser::PYTHON_END:
      case FandangoParser::AND:
      case FandangoParser::AS:
      case FandangoParser::ASSERT:
      case FandangoParser::ASYNC:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CASE:
      case FandangoParser::CLASS:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEF:
      case FandangoParser::DEL:
      case FandangoParser::ELIF:
      case FandangoParser::ELSE:
      case FandangoParser::EXCEPT:
      case FandangoParser::FALSE:
      case FandangoParser::FINALLY:
      case FandangoParser::FOR:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IF:
      case FandangoParser::IMPORT:
      case FandangoParser::IN:
      case FandangoParser::IS:
      case FandangoParser::LAMBDA:
      case FandangoParser::MATCH:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::OR:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TRY:
      case FandangoParser::TYPE:
      case FandangoParser::WHILE:
      case FandangoParser::WHERE:
      case FandangoParser::WITH:
      case FandangoParser::YIELD:
      case FandangoParser::FORALL:
      case FandangoParser::EXISTS:
      case FandangoParser::MAXIMIZING:
      case FandangoParser::MINIMIZING:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::GRAMMAR_ASSIGN:
      case FandangoParser::QUESTION:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::DOTDOT:
      case FandangoParser::DOT:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::CLOSE_PAREN:
      case FandangoParser::COMMA:
      case FandangoParser::COLON:
      case FandangoParser::SEMI_COLON:
      case FandangoParser::POWER:
      case FandangoParser::ASSIGN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::CLOSE_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::XOR:
      case FandangoParser::AND_OP:
      case FandangoParser::LEFT_SHIFT:
      case FandangoParser::RIGHT_SHIFT:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::DIV:
      case FandangoParser::MOD:
      case FandangoParser::IDIV:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::CLOSE_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::GREATER_THAN:
      case FandangoParser::EQUALS:
      case FandangoParser::GT_EQ:
      case FandangoParser::LT_EQ:
      case FandangoParser::NOT_EQ_1:
      case FandangoParser::NOT_EQ_2:
      case FandangoParser::AT:
      case FandangoParser::ARROW:
      case FandangoParser::ADD_ASSIGN:
      case FandangoParser::SUB_ASSIGN:
      case FandangoParser::MULT_ASSIGN:
      case FandangoParser::AT_ASSIGN:
      case FandangoParser::DIV_ASSIGN:
      case FandangoParser::MOD_ASSIGN:
      case FandangoParser::AND_ASSIGN:
      case FandangoParser::OR_ASSIGN:
      case FandangoParser::XOR_ASSIGN:
      case FandangoParser::LEFT_SHIFT_ASSIGN:
      case FandangoParser::RIGHT_SHIFT_ASSIGN:
      case FandangoParser::POWER_ASSIGN:
      case FandangoParser::IDIV_ASSIGN:
      case FandangoParser::EXPR_ASSIGN:
      case FandangoParser::EXCL:
      case FandangoParser::SKIP_:
      case FandangoParser::UNKNOWN_CHAR: {
        enterOuterAlt(_localctx, 1);
        setState(2772);
        fstring_any();
        break;
      }

      case FandangoParser::FSTRING_END_SINGLE_QUOTE: {
        enterOuterAlt(_localctx, 2);
        setState(2773);
        match(FandangoParser::FSTRING_END_SINGLE_QUOTE);
        break;
      }

      case FandangoParser::FSTRING_END_QUOTE: {
        enterOuterAlt(_localctx, 3);
        setState(2774);
        match(FandangoParser::FSTRING_END_QUOTE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_any_breaks_no_triple_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_any_breaks_no_triple_quoteContext::Fstring_any_breaks_no_triple_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_anyContext* FandangoParser::Fstring_any_breaks_no_triple_quoteContext::fstring_any() {
  return getRuleContext<FandangoParser::Fstring_anyContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_any_breaks_no_triple_quoteContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::Fstring_any_breaks_no_triple_quoteContext::FSTRING_END_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_SINGLE_QUOTE, 0);
}


size_t FandangoParser::Fstring_any_breaks_no_triple_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_any_breaks_no_triple_quote;
}


std::any FandangoParser::Fstring_any_breaks_no_triple_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_any_breaks_no_triple_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_any_breaks_no_triple_quoteContext* FandangoParser::fstring_any_breaks_no_triple_quote() {
  Fstring_any_breaks_no_triple_quoteContext *_localctx = _tracker.createInstance<Fstring_any_breaks_no_triple_quoteContext>(_ctx, getState());
  enterRule(_localctx, 392, FandangoParser::RuleFstring_any_breaks_no_triple_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2780);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER:
      case FandangoParser::PYTHON_START:
      case FandangoParser::PYTHON_END:
      case FandangoParser::AND:
      case FandangoParser::AS:
      case FandangoParser::ASSERT:
      case FandangoParser::ASYNC:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CASE:
      case FandangoParser::CLASS:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEF:
      case FandangoParser::DEL:
      case FandangoParser::ELIF:
      case FandangoParser::ELSE:
      case FandangoParser::EXCEPT:
      case FandangoParser::FALSE:
      case FandangoParser::FINALLY:
      case FandangoParser::FOR:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IF:
      case FandangoParser::IMPORT:
      case FandangoParser::IN:
      case FandangoParser::IS:
      case FandangoParser::LAMBDA:
      case FandangoParser::MATCH:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::OR:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TRY:
      case FandangoParser::TYPE:
      case FandangoParser::WHILE:
      case FandangoParser::WHERE:
      case FandangoParser::WITH:
      case FandangoParser::YIELD:
      case FandangoParser::FORALL:
      case FandangoParser::EXISTS:
      case FandangoParser::MAXIMIZING:
      case FandangoParser::MINIMIZING:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::GRAMMAR_ASSIGN:
      case FandangoParser::QUESTION:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::DOTDOT:
      case FandangoParser::DOT:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::CLOSE_PAREN:
      case FandangoParser::COMMA:
      case FandangoParser::COLON:
      case FandangoParser::SEMI_COLON:
      case FandangoParser::POWER:
      case FandangoParser::ASSIGN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::CLOSE_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::XOR:
      case FandangoParser::AND_OP:
      case FandangoParser::LEFT_SHIFT:
      case FandangoParser::RIGHT_SHIFT:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::DIV:
      case FandangoParser::MOD:
      case FandangoParser::IDIV:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::CLOSE_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::GREATER_THAN:
      case FandangoParser::EQUALS:
      case FandangoParser::GT_EQ:
      case FandangoParser::LT_EQ:
      case FandangoParser::NOT_EQ_1:
      case FandangoParser::NOT_EQ_2:
      case FandangoParser::AT:
      case FandangoParser::ARROW:
      case FandangoParser::ADD_ASSIGN:
      case FandangoParser::SUB_ASSIGN:
      case FandangoParser::MULT_ASSIGN:
      case FandangoParser::AT_ASSIGN:
      case FandangoParser::DIV_ASSIGN:
      case FandangoParser::MOD_ASSIGN:
      case FandangoParser::AND_ASSIGN:
      case FandangoParser::OR_ASSIGN:
      case FandangoParser::XOR_ASSIGN:
      case FandangoParser::LEFT_SHIFT_ASSIGN:
      case FandangoParser::RIGHT_SHIFT_ASSIGN:
      case FandangoParser::POWER_ASSIGN:
      case FandangoParser::IDIV_ASSIGN:
      case FandangoParser::EXPR_ASSIGN:
      case FandangoParser::EXCL:
      case FandangoParser::SKIP_:
      case FandangoParser::UNKNOWN_CHAR: {
        enterOuterAlt(_localctx, 1);
        setState(2777);
        fstring_any();
        break;
      }

      case FandangoParser::NEWLINE: {
        enterOuterAlt(_localctx, 2);
        setState(2778);
        match(FandangoParser::NEWLINE);
        break;
      }

      case FandangoParser::FSTRING_END_SINGLE_QUOTE: {
        enterOuterAlt(_localctx, 3);
        setState(2779);
        match(FandangoParser::FSTRING_END_SINGLE_QUOTE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_any_breaks_no_triple_single_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext::Fstring_any_breaks_no_triple_single_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_anyContext* FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext::fstring_any() {
  return getRuleContext<FandangoParser::Fstring_anyContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext::FSTRING_END_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_QUOTE, 0);
}


size_t FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_any_breaks_no_triple_single_quote;
}


std::any FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_any_breaks_no_triple_single_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext* FandangoParser::fstring_any_breaks_no_triple_single_quote() {
  Fstring_any_breaks_no_triple_single_quoteContext *_localctx = _tracker.createInstance<Fstring_any_breaks_no_triple_single_quoteContext>(_ctx, getState());
  enterRule(_localctx, 394, FandangoParser::RuleFstring_any_breaks_no_triple_single_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2785);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER:
      case FandangoParser::PYTHON_START:
      case FandangoParser::PYTHON_END:
      case FandangoParser::AND:
      case FandangoParser::AS:
      case FandangoParser::ASSERT:
      case FandangoParser::ASYNC:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CASE:
      case FandangoParser::CLASS:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEF:
      case FandangoParser::DEL:
      case FandangoParser::ELIF:
      case FandangoParser::ELSE:
      case FandangoParser::EXCEPT:
      case FandangoParser::FALSE:
      case FandangoParser::FINALLY:
      case FandangoParser::FOR:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IF:
      case FandangoParser::IMPORT:
      case FandangoParser::IN:
      case FandangoParser::IS:
      case FandangoParser::LAMBDA:
      case FandangoParser::MATCH:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::OR:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TRY:
      case FandangoParser::TYPE:
      case FandangoParser::WHILE:
      case FandangoParser::WHERE:
      case FandangoParser::WITH:
      case FandangoParser::YIELD:
      case FandangoParser::FORALL:
      case FandangoParser::EXISTS:
      case FandangoParser::MAXIMIZING:
      case FandangoParser::MINIMIZING:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::GRAMMAR_ASSIGN:
      case FandangoParser::QUESTION:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::DOTDOT:
      case FandangoParser::DOT:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::CLOSE_PAREN:
      case FandangoParser::COMMA:
      case FandangoParser::COLON:
      case FandangoParser::SEMI_COLON:
      case FandangoParser::POWER:
      case FandangoParser::ASSIGN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::CLOSE_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::XOR:
      case FandangoParser::AND_OP:
      case FandangoParser::LEFT_SHIFT:
      case FandangoParser::RIGHT_SHIFT:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::DIV:
      case FandangoParser::MOD:
      case FandangoParser::IDIV:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::CLOSE_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::GREATER_THAN:
      case FandangoParser::EQUALS:
      case FandangoParser::GT_EQ:
      case FandangoParser::LT_EQ:
      case FandangoParser::NOT_EQ_1:
      case FandangoParser::NOT_EQ_2:
      case FandangoParser::AT:
      case FandangoParser::ARROW:
      case FandangoParser::ADD_ASSIGN:
      case FandangoParser::SUB_ASSIGN:
      case FandangoParser::MULT_ASSIGN:
      case FandangoParser::AT_ASSIGN:
      case FandangoParser::DIV_ASSIGN:
      case FandangoParser::MOD_ASSIGN:
      case FandangoParser::AND_ASSIGN:
      case FandangoParser::OR_ASSIGN:
      case FandangoParser::XOR_ASSIGN:
      case FandangoParser::LEFT_SHIFT_ASSIGN:
      case FandangoParser::RIGHT_SHIFT_ASSIGN:
      case FandangoParser::POWER_ASSIGN:
      case FandangoParser::IDIV_ASSIGN:
      case FandangoParser::EXPR_ASSIGN:
      case FandangoParser::EXCL:
      case FandangoParser::SKIP_:
      case FandangoParser::UNKNOWN_CHAR: {
        enterOuterAlt(_localctx, 1);
        setState(2782);
        fstring_any();
        break;
      }

      case FandangoParser::NEWLINE: {
        enterOuterAlt(_localctx, 2);
        setState(2783);
        match(FandangoParser::NEWLINE);
        break;
      }

      case FandangoParser::FSTRING_END_QUOTE: {
        enterOuterAlt(_localctx, 3);
        setState(2784);
        match(FandangoParser::FSTRING_END_QUOTE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_anyContext ------------------------------------------------------------------

FandangoParser::Fstring_anyContext::Fstring_anyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NUMBER() {
  return getTokens(FandangoParser::NUMBER);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NUMBER(size_t i) {
  return getToken(FandangoParser::NUMBER, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::PYTHON_START() {
  return getTokens(FandangoParser::PYTHON_START);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::PYTHON_START(size_t i) {
  return getToken(FandangoParser::PYTHON_START, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::PYTHON_END() {
  return getTokens(FandangoParser::PYTHON_END);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::PYTHON_END(size_t i) {
  return getToken(FandangoParser::PYTHON_END, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::AND() {
  return getTokens(FandangoParser::AND);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::AND(size_t i) {
  return getToken(FandangoParser::AND, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::AS() {
  return getTokens(FandangoParser::AS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::AS(size_t i) {
  return getToken(FandangoParser::AS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ASSERT() {
  return getTokens(FandangoParser::ASSERT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ASSERT(size_t i) {
  return getToken(FandangoParser::ASSERT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ASYNC() {
  return getTokens(FandangoParser::ASYNC);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ASYNC(size_t i) {
  return getToken(FandangoParser::ASYNC, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::AWAIT() {
  return getTokens(FandangoParser::AWAIT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::AWAIT(size_t i) {
  return getToken(FandangoParser::AWAIT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::BREAK() {
  return getTokens(FandangoParser::BREAK);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::BREAK(size_t i) {
  return getToken(FandangoParser::BREAK, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::CASE() {
  return getTokens(FandangoParser::CASE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::CASE(size_t i) {
  return getToken(FandangoParser::CASE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::CLASS() {
  return getTokens(FandangoParser::CLASS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::CLASS(size_t i) {
  return getToken(FandangoParser::CLASS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::CONTINUE() {
  return getTokens(FandangoParser::CONTINUE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::CONTINUE(size_t i) {
  return getToken(FandangoParser::CONTINUE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::DEF() {
  return getTokens(FandangoParser::DEF);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::DEF(size_t i) {
  return getToken(FandangoParser::DEF, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::DEL() {
  return getTokens(FandangoParser::DEL);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::DEL(size_t i) {
  return getToken(FandangoParser::DEL, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ELIF() {
  return getTokens(FandangoParser::ELIF);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ELIF(size_t i) {
  return getToken(FandangoParser::ELIF, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ELSE() {
  return getTokens(FandangoParser::ELSE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ELSE(size_t i) {
  return getToken(FandangoParser::ELSE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::EXCEPT() {
  return getTokens(FandangoParser::EXCEPT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::EXCEPT(size_t i) {
  return getToken(FandangoParser::EXCEPT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::FALSE() {
  return getTokens(FandangoParser::FALSE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::FALSE(size_t i) {
  return getToken(FandangoParser::FALSE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::FINALLY() {
  return getTokens(FandangoParser::FINALLY);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::FINALLY(size_t i) {
  return getToken(FandangoParser::FINALLY, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::FOR() {
  return getTokens(FandangoParser::FOR);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::FOR(size_t i) {
  return getToken(FandangoParser::FOR, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::FROM() {
  return getTokens(FandangoParser::FROM);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::FROM(size_t i) {
  return getToken(FandangoParser::FROM, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::GLOBAL() {
  return getTokens(FandangoParser::GLOBAL);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::GLOBAL(size_t i) {
  return getToken(FandangoParser::GLOBAL, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::IF() {
  return getTokens(FandangoParser::IF);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::IF(size_t i) {
  return getToken(FandangoParser::IF, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::IMPORT() {
  return getTokens(FandangoParser::IMPORT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::IMPORT(size_t i) {
  return getToken(FandangoParser::IMPORT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::IN() {
  return getTokens(FandangoParser::IN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::IN(size_t i) {
  return getToken(FandangoParser::IN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::IS() {
  return getTokens(FandangoParser::IS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::IS(size_t i) {
  return getToken(FandangoParser::IS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::LAMBDA() {
  return getTokens(FandangoParser::LAMBDA);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::LAMBDA(size_t i) {
  return getToken(FandangoParser::LAMBDA, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::MATCH() {
  return getTokens(FandangoParser::MATCH);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::MATCH(size_t i) {
  return getToken(FandangoParser::MATCH, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NONE() {
  return getTokens(FandangoParser::NONE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NONE(size_t i) {
  return getToken(FandangoParser::NONE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NONLOCAL() {
  return getTokens(FandangoParser::NONLOCAL);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NONLOCAL(size_t i) {
  return getToken(FandangoParser::NONLOCAL, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NOT() {
  return getTokens(FandangoParser::NOT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NOT(size_t i) {
  return getToken(FandangoParser::NOT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::OR() {
  return getTokens(FandangoParser::OR);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::OR(size_t i) {
  return getToken(FandangoParser::OR, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::PASS() {
  return getTokens(FandangoParser::PASS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::PASS(size_t i) {
  return getToken(FandangoParser::PASS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::RAISE() {
  return getTokens(FandangoParser::RAISE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::RAISE(size_t i) {
  return getToken(FandangoParser::RAISE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::RETURN() {
  return getTokens(FandangoParser::RETURN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::RETURN(size_t i) {
  return getToken(FandangoParser::RETURN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::TRUE() {
  return getTokens(FandangoParser::TRUE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::TRUE(size_t i) {
  return getToken(FandangoParser::TRUE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::TRY() {
  return getTokens(FandangoParser::TRY);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::TRY(size_t i) {
  return getToken(FandangoParser::TRY, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::TYPE() {
  return getTokens(FandangoParser::TYPE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::TYPE(size_t i) {
  return getToken(FandangoParser::TYPE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::WHILE() {
  return getTokens(FandangoParser::WHILE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::WHILE(size_t i) {
  return getToken(FandangoParser::WHILE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::WHERE() {
  return getTokens(FandangoParser::WHERE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::WHERE(size_t i) {
  return getToken(FandangoParser::WHERE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::WITH() {
  return getTokens(FandangoParser::WITH);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::WITH(size_t i) {
  return getToken(FandangoParser::WITH, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::YIELD() {
  return getTokens(FandangoParser::YIELD);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::YIELD(size_t i) {
  return getToken(FandangoParser::YIELD, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::FORALL() {
  return getTokens(FandangoParser::FORALL);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::FORALL(size_t i) {
  return getToken(FandangoParser::FORALL, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::EXISTS() {
  return getTokens(FandangoParser::EXISTS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::EXISTS(size_t i) {
  return getToken(FandangoParser::EXISTS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::MAXIMIZING() {
  return getTokens(FandangoParser::MAXIMIZING);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::MAXIMIZING(size_t i) {
  return getToken(FandangoParser::MAXIMIZING, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::MINIMIZING() {
  return getTokens(FandangoParser::MINIMIZING);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::MINIMIZING(size_t i) {
  return getToken(FandangoParser::MINIMIZING, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ANY() {
  return getTokens(FandangoParser::ANY);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ANY(size_t i) {
  return getToken(FandangoParser::ANY, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ALL() {
  return getTokens(FandangoParser::ALL);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ALL(size_t i) {
  return getToken(FandangoParser::ALL, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::LEN() {
  return getTokens(FandangoParser::LEN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::LEN(size_t i) {
  return getToken(FandangoParser::LEN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NAME() {
  return getTokens(FandangoParser::NAME);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NAME(size_t i) {
  return getToken(FandangoParser::NAME, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::GRAMMAR_ASSIGN() {
  return getTokens(FandangoParser::GRAMMAR_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::GRAMMAR_ASSIGN(size_t i) {
  return getToken(FandangoParser::GRAMMAR_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::QUESTION() {
  return getTokens(FandangoParser::QUESTION);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::QUESTION(size_t i) {
  return getToken(FandangoParser::QUESTION, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::DOT() {
  return getTokens(FandangoParser::DOT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::DOT(size_t i) {
  return getToken(FandangoParser::DOT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::DOTDOT() {
  return getTokens(FandangoParser::DOTDOT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::DOTDOT(size_t i) {
  return getToken(FandangoParser::DOTDOT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ELLIPSIS() {
  return getTokens(FandangoParser::ELLIPSIS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ELLIPSIS(size_t i) {
  return getToken(FandangoParser::ELLIPSIS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::STAR() {
  return getTokens(FandangoParser::STAR);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::STAR(size_t i) {
  return getToken(FandangoParser::STAR, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::OPEN_PAREN() {
  return getTokens(FandangoParser::OPEN_PAREN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::OPEN_PAREN(size_t i) {
  return getToken(FandangoParser::OPEN_PAREN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::CLOSE_PAREN() {
  return getTokens(FandangoParser::CLOSE_PAREN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::CLOSE_PAREN(size_t i) {
  return getToken(FandangoParser::CLOSE_PAREN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::SEMI_COLON() {
  return getTokens(FandangoParser::SEMI_COLON);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::SEMI_COLON(size_t i) {
  return getToken(FandangoParser::SEMI_COLON, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::POWER() {
  return getTokens(FandangoParser::POWER);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::POWER(size_t i) {
  return getToken(FandangoParser::POWER, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ASSIGN() {
  return getTokens(FandangoParser::ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ASSIGN(size_t i) {
  return getToken(FandangoParser::ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::OPEN_BRACK() {
  return getTokens(FandangoParser::OPEN_BRACK);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::OPEN_BRACK(size_t i) {
  return getToken(FandangoParser::OPEN_BRACK, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::CLOSE_BRACK() {
  return getTokens(FandangoParser::CLOSE_BRACK);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::CLOSE_BRACK(size_t i) {
  return getToken(FandangoParser::CLOSE_BRACK, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::OR_OP() {
  return getTokens(FandangoParser::OR_OP);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::OR_OP(size_t i) {
  return getToken(FandangoParser::OR_OP, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::XOR() {
  return getTokens(FandangoParser::XOR);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::XOR(size_t i) {
  return getToken(FandangoParser::XOR, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::AND_OP() {
  return getTokens(FandangoParser::AND_OP);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::AND_OP(size_t i) {
  return getToken(FandangoParser::AND_OP, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::LEFT_SHIFT() {
  return getTokens(FandangoParser::LEFT_SHIFT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::LEFT_SHIFT(size_t i) {
  return getToken(FandangoParser::LEFT_SHIFT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::RIGHT_SHIFT() {
  return getTokens(FandangoParser::RIGHT_SHIFT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::RIGHT_SHIFT(size_t i) {
  return getToken(FandangoParser::RIGHT_SHIFT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ADD() {
  return getTokens(FandangoParser::ADD);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ADD(size_t i) {
  return getToken(FandangoParser::ADD, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::MINUS() {
  return getTokens(FandangoParser::MINUS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::MINUS(size_t i) {
  return getToken(FandangoParser::MINUS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::DIV() {
  return getTokens(FandangoParser::DIV);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::DIV(size_t i) {
  return getToken(FandangoParser::DIV, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::MOD() {
  return getTokens(FandangoParser::MOD);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::MOD(size_t i) {
  return getToken(FandangoParser::MOD, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::IDIV() {
  return getTokens(FandangoParser::IDIV);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::IDIV(size_t i) {
  return getToken(FandangoParser::IDIV, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NOT_OP() {
  return getTokens(FandangoParser::NOT_OP);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NOT_OP(size_t i) {
  return getToken(FandangoParser::NOT_OP, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::OPEN_BRACE() {
  return getTokens(FandangoParser::OPEN_BRACE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::OPEN_BRACE(size_t i) {
  return getToken(FandangoParser::OPEN_BRACE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::CLOSE_BRACE() {
  return getTokens(FandangoParser::CLOSE_BRACE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::CLOSE_BRACE(size_t i) {
  return getToken(FandangoParser::CLOSE_BRACE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::LESS_THAN() {
  return getTokens(FandangoParser::LESS_THAN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::LESS_THAN(size_t i) {
  return getToken(FandangoParser::LESS_THAN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::GREATER_THAN() {
  return getTokens(FandangoParser::GREATER_THAN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::GREATER_THAN(size_t i) {
  return getToken(FandangoParser::GREATER_THAN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::EQUALS() {
  return getTokens(FandangoParser::EQUALS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::EQUALS(size_t i) {
  return getToken(FandangoParser::EQUALS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::GT_EQ() {
  return getTokens(FandangoParser::GT_EQ);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::GT_EQ(size_t i) {
  return getToken(FandangoParser::GT_EQ, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::LT_EQ() {
  return getTokens(FandangoParser::LT_EQ);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::LT_EQ(size_t i) {
  return getToken(FandangoParser::LT_EQ, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NOT_EQ_1() {
  return getTokens(FandangoParser::NOT_EQ_1);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NOT_EQ_1(size_t i) {
  return getToken(FandangoParser::NOT_EQ_1, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NOT_EQ_2() {
  return getTokens(FandangoParser::NOT_EQ_2);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NOT_EQ_2(size_t i) {
  return getToken(FandangoParser::NOT_EQ_2, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::AT() {
  return getTokens(FandangoParser::AT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::AT(size_t i) {
  return getToken(FandangoParser::AT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ARROW() {
  return getTokens(FandangoParser::ARROW);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ARROW(size_t i) {
  return getToken(FandangoParser::ARROW, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ADD_ASSIGN() {
  return getTokens(FandangoParser::ADD_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ADD_ASSIGN(size_t i) {
  return getToken(FandangoParser::ADD_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::SUB_ASSIGN() {
  return getTokens(FandangoParser::SUB_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::SUB_ASSIGN(size_t i) {
  return getToken(FandangoParser::SUB_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::MULT_ASSIGN() {
  return getTokens(FandangoParser::MULT_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::MULT_ASSIGN(size_t i) {
  return getToken(FandangoParser::MULT_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::AT_ASSIGN() {
  return getTokens(FandangoParser::AT_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::AT_ASSIGN(size_t i) {
  return getToken(FandangoParser::AT_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::DIV_ASSIGN() {
  return getTokens(FandangoParser::DIV_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::DIV_ASSIGN(size_t i) {
  return getToken(FandangoParser::DIV_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::MOD_ASSIGN() {
  return getTokens(FandangoParser::MOD_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::MOD_ASSIGN(size_t i) {
  return getToken(FandangoParser::MOD_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::AND_ASSIGN() {
  return getTokens(FandangoParser::AND_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::AND_ASSIGN(size_t i) {
  return getToken(FandangoParser::AND_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::OR_ASSIGN() {
  return getTokens(FandangoParser::OR_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::OR_ASSIGN(size_t i) {
  return getToken(FandangoParser::OR_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::XOR_ASSIGN() {
  return getTokens(FandangoParser::XOR_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::XOR_ASSIGN(size_t i) {
  return getToken(FandangoParser::XOR_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::LEFT_SHIFT_ASSIGN() {
  return getTokens(FandangoParser::LEFT_SHIFT_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::LEFT_SHIFT_ASSIGN(size_t i) {
  return getToken(FandangoParser::LEFT_SHIFT_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::RIGHT_SHIFT_ASSIGN() {
  return getTokens(FandangoParser::RIGHT_SHIFT_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::RIGHT_SHIFT_ASSIGN(size_t i) {
  return getToken(FandangoParser::RIGHT_SHIFT_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::POWER_ASSIGN() {
  return getTokens(FandangoParser::POWER_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::POWER_ASSIGN(size_t i) {
  return getToken(FandangoParser::POWER_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::IDIV_ASSIGN() {
  return getTokens(FandangoParser::IDIV_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::IDIV_ASSIGN(size_t i) {
  return getToken(FandangoParser::IDIV_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::EXPR_ASSIGN() {
  return getTokens(FandangoParser::EXPR_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::EXPR_ASSIGN(size_t i) {
  return getToken(FandangoParser::EXPR_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::EXCL() {
  return getTokens(FandangoParser::EXCL);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::EXCL(size_t i) {
  return getToken(FandangoParser::EXCL, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::SKIP_() {
  return getTokens(FandangoParser::SKIP_);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::SKIP_(size_t i) {
  return getToken(FandangoParser::SKIP_, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::UNKNOWN_CHAR() {
  return getTokens(FandangoParser::UNKNOWN_CHAR);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::UNKNOWN_CHAR(size_t i) {
  return getToken(FandangoParser::UNKNOWN_CHAR, i);
}


size_t FandangoParser::Fstring_anyContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_any;
}


std::any FandangoParser::Fstring_anyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_any(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_anyContext* FandangoParser::fstring_any() {
  Fstring_anyContext *_localctx = _tracker.createInstance<Fstring_anyContext>(_ctx, getState());
  enterRule(_localctx, 396, FandangoParser::RuleFstring_any);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2893); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2893);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case FandangoParser::NUMBER: {
                  setState(2787);
                  match(FandangoParser::NUMBER);
                  break;
                }

                case FandangoParser::PYTHON_START: {
                  setState(2788);
                  match(FandangoParser::PYTHON_START);
                  break;
                }

                case FandangoParser::PYTHON_END: {
                  setState(2789);
                  match(FandangoParser::PYTHON_END);
                  break;
                }

                case FandangoParser::AND: {
                  setState(2790);
                  match(FandangoParser::AND);
                  break;
                }

                case FandangoParser::AS: {
                  setState(2791);
                  match(FandangoParser::AS);
                  break;
                }

                case FandangoParser::ASSERT: {
                  setState(2792);
                  match(FandangoParser::ASSERT);
                  break;
                }

                case FandangoParser::ASYNC: {
                  setState(2793);
                  match(FandangoParser::ASYNC);
                  break;
                }

                case FandangoParser::AWAIT: {
                  setState(2794);
                  match(FandangoParser::AWAIT);
                  break;
                }

                case FandangoParser::BREAK: {
                  setState(2795);
                  match(FandangoParser::BREAK);
                  break;
                }

                case FandangoParser::CASE: {
                  setState(2796);
                  match(FandangoParser::CASE);
                  break;
                }

                case FandangoParser::CLASS: {
                  setState(2797);
                  match(FandangoParser::CLASS);
                  break;
                }

                case FandangoParser::CONTINUE: {
                  setState(2798);
                  match(FandangoParser::CONTINUE);
                  break;
                }

                case FandangoParser::DEF: {
                  setState(2799);
                  match(FandangoParser::DEF);
                  break;
                }

                case FandangoParser::DEL: {
                  setState(2800);
                  match(FandangoParser::DEL);
                  break;
                }

                case FandangoParser::ELIF: {
                  setState(2801);
                  match(FandangoParser::ELIF);
                  break;
                }

                case FandangoParser::ELSE: {
                  setState(2802);
                  match(FandangoParser::ELSE);
                  break;
                }

                case FandangoParser::EXCEPT: {
                  setState(2803);
                  match(FandangoParser::EXCEPT);
                  break;
                }

                case FandangoParser::FALSE: {
                  setState(2804);
                  match(FandangoParser::FALSE);
                  break;
                }

                case FandangoParser::FINALLY: {
                  setState(2805);
                  match(FandangoParser::FINALLY);
                  break;
                }

                case FandangoParser::FOR: {
                  setState(2806);
                  match(FandangoParser::FOR);
                  break;
                }

                case FandangoParser::FROM: {
                  setState(2807);
                  match(FandangoParser::FROM);
                  break;
                }

                case FandangoParser::GLOBAL: {
                  setState(2808);
                  match(FandangoParser::GLOBAL);
                  break;
                }

                case FandangoParser::IF: {
                  setState(2809);
                  match(FandangoParser::IF);
                  break;
                }

                case FandangoParser::IMPORT: {
                  setState(2810);
                  match(FandangoParser::IMPORT);
                  break;
                }

                case FandangoParser::IN: {
                  setState(2811);
                  match(FandangoParser::IN);
                  break;
                }

                case FandangoParser::IS: {
                  setState(2812);
                  match(FandangoParser::IS);
                  break;
                }

                case FandangoParser::LAMBDA: {
                  setState(2813);
                  match(FandangoParser::LAMBDA);
                  break;
                }

                case FandangoParser::MATCH: {
                  setState(2814);
                  match(FandangoParser::MATCH);
                  break;
                }

                case FandangoParser::NONE: {
                  setState(2815);
                  match(FandangoParser::NONE);
                  break;
                }

                case FandangoParser::NONLOCAL: {
                  setState(2816);
                  match(FandangoParser::NONLOCAL);
                  break;
                }

                case FandangoParser::NOT: {
                  setState(2817);
                  match(FandangoParser::NOT);
                  break;
                }

                case FandangoParser::OR: {
                  setState(2818);
                  match(FandangoParser::OR);
                  break;
                }

                case FandangoParser::PASS: {
                  setState(2819);
                  match(FandangoParser::PASS);
                  break;
                }

                case FandangoParser::RAISE: {
                  setState(2820);
                  match(FandangoParser::RAISE);
                  break;
                }

                case FandangoParser::RETURN: {
                  setState(2821);
                  match(FandangoParser::RETURN);
                  break;
                }

                case FandangoParser::TRUE: {
                  setState(2822);
                  match(FandangoParser::TRUE);
                  break;
                }

                case FandangoParser::TRY: {
                  setState(2823);
                  match(FandangoParser::TRY);
                  break;
                }

                case FandangoParser::TYPE: {
                  setState(2824);
                  match(FandangoParser::TYPE);
                  break;
                }

                case FandangoParser::WHILE: {
                  setState(2825);
                  match(FandangoParser::WHILE);
                  break;
                }

                case FandangoParser::WHERE: {
                  setState(2826);
                  match(FandangoParser::WHERE);
                  break;
                }

                case FandangoParser::WITH: {
                  setState(2827);
                  match(FandangoParser::WITH);
                  break;
                }

                case FandangoParser::YIELD: {
                  setState(2828);
                  match(FandangoParser::YIELD);
                  break;
                }

                case FandangoParser::FORALL: {
                  setState(2829);
                  match(FandangoParser::FORALL);
                  break;
                }

                case FandangoParser::EXISTS: {
                  setState(2830);
                  match(FandangoParser::EXISTS);
                  break;
                }

                case FandangoParser::MAXIMIZING: {
                  setState(2831);
                  match(FandangoParser::MAXIMIZING);
                  break;
                }

                case FandangoParser::MINIMIZING: {
                  setState(2832);
                  match(FandangoParser::MINIMIZING);
                  break;
                }

                case FandangoParser::ANY: {
                  setState(2833);
                  match(FandangoParser::ANY);
                  break;
                }

                case FandangoParser::ALL: {
                  setState(2834);
                  match(FandangoParser::ALL);
                  break;
                }

                case FandangoParser::LEN: {
                  setState(2835);
                  match(FandangoParser::LEN);
                  break;
                }

                case FandangoParser::NAME: {
                  setState(2836);
                  match(FandangoParser::NAME);
                  break;
                }

                case FandangoParser::GRAMMAR_ASSIGN: {
                  setState(2837);
                  match(FandangoParser::GRAMMAR_ASSIGN);
                  break;
                }

                case FandangoParser::QUESTION: {
                  setState(2838);
                  match(FandangoParser::QUESTION);
                  break;
                }

                case FandangoParser::DOT: {
                  setState(2839);
                  match(FandangoParser::DOT);
                  break;
                }

                case FandangoParser::DOTDOT: {
                  setState(2840);
                  match(FandangoParser::DOTDOT);
                  break;
                }

                case FandangoParser::ELLIPSIS: {
                  setState(2841);
                  match(FandangoParser::ELLIPSIS);
                  break;
                }

                case FandangoParser::STAR: {
                  setState(2842);
                  match(FandangoParser::STAR);
                  break;
                }

                case FandangoParser::OPEN_PAREN: {
                  setState(2843);
                  match(FandangoParser::OPEN_PAREN);
                  break;
                }

                case FandangoParser::CLOSE_PAREN: {
                  setState(2844);
                  match(FandangoParser::CLOSE_PAREN);
                  break;
                }

                case FandangoParser::COMMA: {
                  setState(2845);
                  match(FandangoParser::COMMA);
                  break;
                }

                case FandangoParser::COLON: {
                  setState(2846);
                  match(FandangoParser::COLON);
                  break;
                }

                case FandangoParser::SEMI_COLON: {
                  setState(2847);
                  match(FandangoParser::SEMI_COLON);
                  break;
                }

                case FandangoParser::POWER: {
                  setState(2848);
                  match(FandangoParser::POWER);
                  break;
                }

                case FandangoParser::ASSIGN: {
                  setState(2849);
                  match(FandangoParser::ASSIGN);
                  break;
                }

                case FandangoParser::OPEN_BRACK: {
                  setState(2850);
                  match(FandangoParser::OPEN_BRACK);
                  break;
                }

                case FandangoParser::CLOSE_BRACK: {
                  setState(2851);
                  match(FandangoParser::CLOSE_BRACK);
                  break;
                }

                case FandangoParser::OR_OP: {
                  setState(2852);
                  match(FandangoParser::OR_OP);
                  break;
                }

                case FandangoParser::XOR: {
                  setState(2853);
                  match(FandangoParser::XOR);
                  break;
                }

                case FandangoParser::AND_OP: {
                  setState(2854);
                  match(FandangoParser::AND_OP);
                  break;
                }

                case FandangoParser::LEFT_SHIFT: {
                  setState(2855);
                  match(FandangoParser::LEFT_SHIFT);
                  break;
                }

                case FandangoParser::RIGHT_SHIFT: {
                  setState(2856);
                  match(FandangoParser::RIGHT_SHIFT);
                  break;
                }

                case FandangoParser::ADD: {
                  setState(2857);
                  match(FandangoParser::ADD);
                  break;
                }

                case FandangoParser::MINUS: {
                  setState(2858);
                  match(FandangoParser::MINUS);
                  break;
                }

                case FandangoParser::DIV: {
                  setState(2859);
                  match(FandangoParser::DIV);
                  break;
                }

                case FandangoParser::MOD: {
                  setState(2860);
                  match(FandangoParser::MOD);
                  break;
                }

                case FandangoParser::IDIV: {
                  setState(2861);
                  match(FandangoParser::IDIV);
                  break;
                }

                case FandangoParser::NOT_OP: {
                  setState(2862);
                  match(FandangoParser::NOT_OP);
                  break;
                }

                case FandangoParser::OPEN_BRACE: {
                  setState(2863);
                  match(FandangoParser::OPEN_BRACE);
                  setState(2864);
                  match(FandangoParser::OPEN_BRACE);
                  break;
                }

                case FandangoParser::CLOSE_BRACE: {
                  setState(2865);
                  match(FandangoParser::CLOSE_BRACE);
                  setState(2866);
                  match(FandangoParser::CLOSE_BRACE);
                  break;
                }

                case FandangoParser::LESS_THAN: {
                  setState(2867);
                  match(FandangoParser::LESS_THAN);
                  break;
                }

                case FandangoParser::GREATER_THAN: {
                  setState(2868);
                  match(FandangoParser::GREATER_THAN);
                  break;
                }

                case FandangoParser::EQUALS: {
                  setState(2869);
                  match(FandangoParser::EQUALS);
                  break;
                }

                case FandangoParser::GT_EQ: {
                  setState(2870);
                  match(FandangoParser::GT_EQ);
                  break;
                }

                case FandangoParser::LT_EQ: {
                  setState(2871);
                  match(FandangoParser::LT_EQ);
                  break;
                }

                case FandangoParser::NOT_EQ_1: {
                  setState(2872);
                  match(FandangoParser::NOT_EQ_1);
                  break;
                }

                case FandangoParser::NOT_EQ_2: {
                  setState(2873);
                  match(FandangoParser::NOT_EQ_2);
                  break;
                }

                case FandangoParser::AT: {
                  setState(2874);
                  match(FandangoParser::AT);
                  break;
                }

                case FandangoParser::ARROW: {
                  setState(2875);
                  match(FandangoParser::ARROW);
                  break;
                }

                case FandangoParser::ADD_ASSIGN: {
                  setState(2876);
                  match(FandangoParser::ADD_ASSIGN);
                  break;
                }

                case FandangoParser::SUB_ASSIGN: {
                  setState(2877);
                  match(FandangoParser::SUB_ASSIGN);
                  break;
                }

                case FandangoParser::MULT_ASSIGN: {
                  setState(2878);
                  match(FandangoParser::MULT_ASSIGN);
                  break;
                }

                case FandangoParser::AT_ASSIGN: {
                  setState(2879);
                  match(FandangoParser::AT_ASSIGN);
                  break;
                }

                case FandangoParser::DIV_ASSIGN: {
                  setState(2880);
                  match(FandangoParser::DIV_ASSIGN);
                  break;
                }

                case FandangoParser::MOD_ASSIGN: {
                  setState(2881);
                  match(FandangoParser::MOD_ASSIGN);
                  break;
                }

                case FandangoParser::AND_ASSIGN: {
                  setState(2882);
                  match(FandangoParser::AND_ASSIGN);
                  break;
                }

                case FandangoParser::OR_ASSIGN: {
                  setState(2883);
                  match(FandangoParser::OR_ASSIGN);
                  break;
                }

                case FandangoParser::XOR_ASSIGN: {
                  setState(2884);
                  match(FandangoParser::XOR_ASSIGN);
                  break;
                }

                case FandangoParser::LEFT_SHIFT_ASSIGN: {
                  setState(2885);
                  match(FandangoParser::LEFT_SHIFT_ASSIGN);
                  break;
                }

                case FandangoParser::RIGHT_SHIFT_ASSIGN: {
                  setState(2886);
                  match(FandangoParser::RIGHT_SHIFT_ASSIGN);
                  break;
                }

                case FandangoParser::POWER_ASSIGN: {
                  setState(2887);
                  match(FandangoParser::POWER_ASSIGN);
                  break;
                }

                case FandangoParser::IDIV_ASSIGN: {
                  setState(2888);
                  match(FandangoParser::IDIV_ASSIGN);
                  break;
                }

                case FandangoParser::EXPR_ASSIGN: {
                  setState(2889);
                  match(FandangoParser::EXPR_ASSIGN);
                  break;
                }

                case FandangoParser::EXCL: {
                  setState(2890);
                  match(FandangoParser::EXCL);
                  break;
                }

                case FandangoParser::SKIP_: {
                  setState(2891);
                  match(FandangoParser::SKIP_);
                  break;
                }

                case FandangoParser::UNKNOWN_CHAR: {
                  setState(2892);
                  match(FandangoParser::UNKNOWN_CHAR);
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2895); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_replacement_fieldContext ------------------------------------------------------------------

FandangoParser::Fstring_replacement_fieldContext::Fstring_replacement_fieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Fstring_replacement_fieldContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::Fstring_replacement_fieldContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

FandangoParser::Yield_exprContext* FandangoParser::Fstring_replacement_fieldContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Fstring_replacement_fieldContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_replacement_fieldContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::Fstring_conversionContext* FandangoParser::Fstring_replacement_fieldContext::fstring_conversion() {
  return getRuleContext<FandangoParser::Fstring_conversionContext>(0);
}

FandangoParser::Fstring_full_format_specContext* FandangoParser::Fstring_replacement_fieldContext::fstring_full_format_spec() {
  return getRuleContext<FandangoParser::Fstring_full_format_specContext>(0);
}


size_t FandangoParser::Fstring_replacement_fieldContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_replacement_field;
}


std::any FandangoParser::Fstring_replacement_fieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_replacement_field(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::fstring_replacement_field() {
  Fstring_replacement_fieldContext *_localctx = _tracker.createInstance<Fstring_replacement_fieldContext>(_ctx, getState());
  enterRule(_localctx, 398, FandangoParser::RuleFstring_replacement_field);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2897);
    match(FandangoParser::OPEN_BRACE);
    setState(2900);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::YIELD: {
        setState(2898);
        yield_expr();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        setState(2899);
        star_expressions();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2903);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASSIGN) {
      setState(2902);
      match(FandangoParser::ASSIGN);
    }
    setState(2906);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::EXCL) {
      setState(2905);
      fstring_conversion();
    }
    setState(2909);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COLON) {
      setState(2908);
      fstring_full_format_spec();
    }
    setState(2911);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_conversionContext ------------------------------------------------------------------

FandangoParser::Fstring_conversionContext::Fstring_conversionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Fstring_conversionContext::EXCL() {
  return getToken(FandangoParser::EXCL, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Fstring_conversionContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}


size_t FandangoParser::Fstring_conversionContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_conversion;
}


std::any FandangoParser::Fstring_conversionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_conversion(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_conversionContext* FandangoParser::fstring_conversion() {
  Fstring_conversionContext *_localctx = _tracker.createInstance<Fstring_conversionContext>(_ctx, getState());
  enterRule(_localctx, 400, FandangoParser::RuleFstring_conversion);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2913);
    match(FandangoParser::EXCL);
    setState(2914);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_full_format_specContext ------------------------------------------------------------------

FandangoParser::Fstring_full_format_specContext::Fstring_full_format_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Fstring_full_format_specContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

std::vector<FandangoParser::Fstring_format_specContext *> FandangoParser::Fstring_full_format_specContext::fstring_format_spec() {
  return getRuleContexts<FandangoParser::Fstring_format_specContext>();
}

FandangoParser::Fstring_format_specContext* FandangoParser::Fstring_full_format_specContext::fstring_format_spec(size_t i) {
  return getRuleContext<FandangoParser::Fstring_format_specContext>(i);
}


size_t FandangoParser::Fstring_full_format_specContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_full_format_spec;
}


std::any FandangoParser::Fstring_full_format_specContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_full_format_spec(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_full_format_specContext* FandangoParser::fstring_full_format_spec() {
  Fstring_full_format_specContext *_localctx = _tracker.createInstance<Fstring_full_format_specContext>(_ctx, getState());
  enterRule(_localctx, 402, FandangoParser::RuleFstring_full_format_spec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2916);
    match(FandangoParser::COLON);
    setState(2920);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 349, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2917);
        fstring_format_spec(); 
      }
      setState(2922);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 349, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_format_specContext ------------------------------------------------------------------

FandangoParser::Fstring_format_specContext::Fstring_format_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::Fstring_format_specContext::fstring_replacement_field() {
  return getRuleContext<FandangoParser::Fstring_replacement_fieldContext>(0);
}

FandangoParser::Fstring_middleContext* FandangoParser::Fstring_format_specContext::fstring_middle() {
  return getRuleContext<FandangoParser::Fstring_middleContext>(0);
}


size_t FandangoParser::Fstring_format_specContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_format_spec;
}


std::any FandangoParser::Fstring_format_specContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_format_spec(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_format_specContext* FandangoParser::fstring_format_spec() {
  Fstring_format_specContext *_localctx = _tracker.createInstance<Fstring_format_specContext>(_ctx, getState());
  enterRule(_localctx, 404, FandangoParser::RuleFstring_format_spec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2925);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 350, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2923);
      fstring_replacement_field();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2924);
      fstring_middle();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FstringContext ------------------------------------------------------------------

FandangoParser::FstringContext::FstringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_START_QUOTE() {
  return getToken(FandangoParser::FSTRING_START_QUOTE, 0);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_END_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_QUOTE, 0);
}

std::vector<FandangoParser::Fstring_middle_no_quoteContext *> FandangoParser::FstringContext::fstring_middle_no_quote() {
  return getRuleContexts<FandangoParser::Fstring_middle_no_quoteContext>();
}

FandangoParser::Fstring_middle_no_quoteContext* FandangoParser::FstringContext::fstring_middle_no_quote(size_t i) {
  return getRuleContext<FandangoParser::Fstring_middle_no_quoteContext>(i);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_START_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_START_SINGLE_QUOTE, 0);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_END_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_SINGLE_QUOTE, 0);
}

std::vector<FandangoParser::Fstring_middle_no_single_quoteContext *> FandangoParser::FstringContext::fstring_middle_no_single_quote() {
  return getRuleContexts<FandangoParser::Fstring_middle_no_single_quoteContext>();
}

FandangoParser::Fstring_middle_no_single_quoteContext* FandangoParser::FstringContext::fstring_middle_no_single_quote(size_t i) {
  return getRuleContext<FandangoParser::Fstring_middle_no_single_quoteContext>(i);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_START_TRIPLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_START_TRIPLE_QUOTE, 0);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_END_TRIPLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_TRIPLE_QUOTE, 0);
}

std::vector<FandangoParser::Fstring_middle_breaks_no_triple_quoteContext *> FandangoParser::FstringContext::fstring_middle_breaks_no_triple_quote() {
  return getRuleContexts<FandangoParser::Fstring_middle_breaks_no_triple_quoteContext>();
}

FandangoParser::Fstring_middle_breaks_no_triple_quoteContext* FandangoParser::FstringContext::fstring_middle_breaks_no_triple_quote(size_t i) {
  return getRuleContext<FandangoParser::Fstring_middle_breaks_no_triple_quoteContext>(i);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_START_TRIPLE_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE, 0);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_END_TRIPLE_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_TRIPLE_SINGLE_QUOTE, 0);
}

std::vector<FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext *> FandangoParser::FstringContext::fstring_middle_breaks_no_triple_single_quote() {
  return getRuleContexts<FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext>();
}

FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext* FandangoParser::FstringContext::fstring_middle_breaks_no_triple_single_quote(size_t i) {
  return getRuleContext<FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext>(i);
}


size_t FandangoParser::FstringContext::getRuleIndex() const {
  return FandangoParser::RuleFstring;
}


std::any FandangoParser::FstringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::FstringContext* FandangoParser::fstring() {
  FstringContext *_localctx = _tracker.createInstance<FstringContext>(_ctx, getState());
  enterRule(_localctx, 406, FandangoParser::RuleFstring);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2959);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::FSTRING_START_QUOTE: {
        enterOuterAlt(_localctx, 1);
        setState(2927);
        match(FandangoParser::FSTRING_START_QUOTE);
        setState(2931);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -6341068275337659136) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 71)) & 63050394783186939) != 0)) {
          setState(2928);
          fstring_middle_no_quote();
          setState(2933);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2934);
        match(FandangoParser::FSTRING_END_QUOTE);
        break;
      }

      case FandangoParser::FSTRING_START_SINGLE_QUOTE: {
        enterOuterAlt(_localctx, 2);
        setState(2935);
        match(FandangoParser::FSTRING_START_SINGLE_QUOTE);
        setState(2939);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 6341068275337657600) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 71)) & 63050394783186939) != 0)) {
          setState(2936);
          fstring_middle_no_single_quote();
          setState(2941);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2942);
        match(FandangoParser::FSTRING_END_SINGLE_QUOTE);
        break;
      }

      case FandangoParser::FSTRING_START_TRIPLE_QUOTE: {
        enterOuterAlt(_localctx, 3);
        setState(2943);
        match(FandangoParser::FSTRING_START_TRIPLE_QUOTE);
        setState(2947);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -8646911284551353088) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 71)) & 72057594037927931) != 0)) {
          setState(2944);
          fstring_middle_breaks_no_triple_quote();
          setState(2949);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2950);
        match(FandangoParser::FSTRING_END_TRIPLE_QUOTE);
        break;
      }

      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE: {
        enterOuterAlt(_localctx, 4);
        setState(2951);
        match(FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE);
        setState(2955);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 5188146770730810624) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 71)) & 72057594037927931) != 0)) {
          setState(2952);
          fstring_middle_breaks_no_triple_single_quote();
          setState(2957);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2958);
        match(FandangoParser::FSTRING_END_TRIPLE_SINGLE_QUOTE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

FandangoParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::StringContext::STRING() {
  return getToken(FandangoParser::STRING, 0);
}


size_t FandangoParser::StringContext::getRuleIndex() const {
  return FandangoParser::RuleString;
}


std::any FandangoParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StringContext* FandangoParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 408, FandangoParser::RuleString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2961);
    match(FandangoParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringsContext ------------------------------------------------------------------

FandangoParser::StringsContext::StringsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::FstringContext *> FandangoParser::StringsContext::fstring() {
  return getRuleContexts<FandangoParser::FstringContext>();
}

FandangoParser::FstringContext* FandangoParser::StringsContext::fstring(size_t i) {
  return getRuleContext<FandangoParser::FstringContext>(i);
}

std::vector<FandangoParser::StringContext *> FandangoParser::StringsContext::string() {
  return getRuleContexts<FandangoParser::StringContext>();
}

FandangoParser::StringContext* FandangoParser::StringsContext::string(size_t i) {
  return getRuleContext<FandangoParser::StringContext>(i);
}


size_t FandangoParser::StringsContext::getRuleIndex() const {
  return FandangoParser::RuleStrings;
}


std::any FandangoParser::StringsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStrings(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StringsContext* FandangoParser::strings() {
  StringsContext *_localctx = _tracker.createInstance<StringsContext>(_ctx, getState());
  enterRule(_localctx, 410, FandangoParser::RuleStrings);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2965); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2965);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case FandangoParser::FSTRING_START_QUOTE:
                case FandangoParser::FSTRING_START_SINGLE_QUOTE:
                case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
                case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE: {
                  setState(2963);
                  fstring();
                  break;
                }

                case FandangoParser::STRING: {
                  setState(2964);
                  string();
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2967); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 357, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListContext ------------------------------------------------------------------

FandangoParser::ListContext::ListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::ListContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::ListContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::ListContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}


size_t FandangoParser::ListContext::getRuleIndex() const {
  return FandangoParser::RuleList;
}


std::any FandangoParser::ListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitList(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ListContext* FandangoParser::list() {
  ListContext *_localctx = _tracker.createInstance<ListContext>(_ctx, getState());
  enterRule(_localctx, 412, FandangoParser::RuleList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2969);
    match(FandangoParser::OPEN_BRACK);
    setState(2971);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 93071897) != 0)) {
      setState(2970);
      star_named_expressions();
    }
    setState(2973);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TupleContext ------------------------------------------------------------------

FandangoParser::TupleContext::TupleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::TupleContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::TupleContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Star_named_expressionContext* FandangoParser::TupleContext::star_named_expression() {
  return getRuleContext<FandangoParser::Star_named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::TupleContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::TupleContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}


size_t FandangoParser::TupleContext::getRuleIndex() const {
  return FandangoParser::RuleTuple;
}


std::any FandangoParser::TupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTuple(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::TupleContext* FandangoParser::tuple() {
  TupleContext *_localctx = _tracker.createInstance<TupleContext>(_ctx, getState());
  enterRule(_localctx, 414, FandangoParser::RuleTuple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2975);
    match(FandangoParser::OPEN_PAREN);
    setState(2980);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 93071897) != 0)) {
      setState(2976);
      star_named_expression();
      setState(2977);
      match(FandangoParser::COMMA);

      setState(2978);
      star_named_expressions();
    }
    setState(2982);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetContext ------------------------------------------------------------------

FandangoParser::SetContext::SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::SetContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::SetContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}

tree::TerminalNode* FandangoParser::SetContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::SetContext::getRuleIndex() const {
  return FandangoParser::RuleSet;
}


std::any FandangoParser::SetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSet(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SetContext* FandangoParser::set() {
  SetContext *_localctx = _tracker.createInstance<SetContext>(_ctx, getState());
  enterRule(_localctx, 416, FandangoParser::RuleSet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2984);
    match(FandangoParser::OPEN_BRACE);
    setState(2985);
    star_named_expressions();
    setState(2986);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DictContext ------------------------------------------------------------------

FandangoParser::DictContext::DictContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::DictContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::DictContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

FandangoParser::Double_starred_kvpairsContext* FandangoParser::DictContext::double_starred_kvpairs() {
  return getRuleContext<FandangoParser::Double_starred_kvpairsContext>(0);
}


size_t FandangoParser::DictContext::getRuleIndex() const {
  return FandangoParser::RuleDict;
}


std::any FandangoParser::DictContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDict(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DictContext* FandangoParser::dict() {
  DictContext *_localctx = _tracker.createInstance<DictContext>(_ctx, getState());
  enterRule(_localctx, 418, FandangoParser::RuleDict);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2988);
    match(FandangoParser::OPEN_BRACE);
    setState(2990);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 93071897) != 0)) {
      setState(2989);
      double_starred_kvpairs();
    }
    setState(2992);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Double_starred_kvpairsContext ------------------------------------------------------------------

FandangoParser::Double_starred_kvpairsContext::Double_starred_kvpairsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Double_starred_kvpairContext *> FandangoParser::Double_starred_kvpairsContext::double_starred_kvpair() {
  return getRuleContexts<FandangoParser::Double_starred_kvpairContext>();
}

FandangoParser::Double_starred_kvpairContext* FandangoParser::Double_starred_kvpairsContext::double_starred_kvpair(size_t i) {
  return getRuleContext<FandangoParser::Double_starred_kvpairContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Double_starred_kvpairsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Double_starred_kvpairsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Double_starred_kvpairsContext::getRuleIndex() const {
  return FandangoParser::RuleDouble_starred_kvpairs;
}


std::any FandangoParser::Double_starred_kvpairsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDouble_starred_kvpairs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Double_starred_kvpairsContext* FandangoParser::double_starred_kvpairs() {
  Double_starred_kvpairsContext *_localctx = _tracker.createInstance<Double_starred_kvpairsContext>(_ctx, getState());
  enterRule(_localctx, 420, FandangoParser::RuleDouble_starred_kvpairs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2994);
    double_starred_kvpair();
    setState(2999);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 361, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2995);
        match(FandangoParser::COMMA);
        setState(2996);
        double_starred_kvpair(); 
      }
      setState(3001);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 361, _ctx);
    }
    setState(3003);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(3002);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Double_starred_kvpairContext ------------------------------------------------------------------

FandangoParser::Double_starred_kvpairContext::Double_starred_kvpairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Double_starred_kvpairContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Double_starred_kvpairContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

FandangoParser::KvpairContext* FandangoParser::Double_starred_kvpairContext::kvpair() {
  return getRuleContext<FandangoParser::KvpairContext>(0);
}


size_t FandangoParser::Double_starred_kvpairContext::getRuleIndex() const {
  return FandangoParser::RuleDouble_starred_kvpair;
}


std::any FandangoParser::Double_starred_kvpairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDouble_starred_kvpair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Double_starred_kvpairContext* FandangoParser::double_starred_kvpair() {
  Double_starred_kvpairContext *_localctx = _tracker.createInstance<Double_starred_kvpairContext>(_ctx, getState());
  enterRule(_localctx, 422, FandangoParser::RuleDouble_starred_kvpair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3008);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 363, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3005);
      match(FandangoParser::POWER);
      setState(3006);
      bitwise_or(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3007);
      kvpair();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KvpairContext ------------------------------------------------------------------

FandangoParser::KvpairContext::KvpairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::KvpairContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::KvpairContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::KvpairContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}


size_t FandangoParser::KvpairContext::getRuleIndex() const {
  return FandangoParser::RuleKvpair;
}


std::any FandangoParser::KvpairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKvpair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KvpairContext* FandangoParser::kvpair() {
  KvpairContext *_localctx = _tracker.createInstance<KvpairContext>(_ctx, getState());
  enterRule(_localctx, 424, FandangoParser::RuleKvpair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3010);
    expression();
    setState(3011);
    match(FandangoParser::COLON);
    setState(3012);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_if_clausesContext ------------------------------------------------------------------

FandangoParser::For_if_clausesContext::For_if_clausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::For_if_clauseContext *> FandangoParser::For_if_clausesContext::for_if_clause() {
  return getRuleContexts<FandangoParser::For_if_clauseContext>();
}

FandangoParser::For_if_clauseContext* FandangoParser::For_if_clausesContext::for_if_clause(size_t i) {
  return getRuleContext<FandangoParser::For_if_clauseContext>(i);
}


size_t FandangoParser::For_if_clausesContext::getRuleIndex() const {
  return FandangoParser::RuleFor_if_clauses;
}


std::any FandangoParser::For_if_clausesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFor_if_clauses(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::For_if_clausesContext* FandangoParser::for_if_clauses() {
  For_if_clausesContext *_localctx = _tracker.createInstance<For_if_clausesContext>(_ctx, getState());
  enterRule(_localctx, 426, FandangoParser::RuleFor_if_clauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3015); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3014);
      for_if_clause();
      setState(3017); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::ASYNC

    || _la == FandangoParser::FOR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_if_clauseContext ------------------------------------------------------------------

FandangoParser::For_if_clauseContext::For_if_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::FOR() {
  return getToken(FandangoParser::FOR, 0);
}

FandangoParser::Star_targetsContext* FandangoParser::For_if_clauseContext::star_targets() {
  return getRuleContext<FandangoParser::Star_targetsContext>(0);
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

std::vector<FandangoParser::DisjunctionContext *> FandangoParser::For_if_clauseContext::disjunction() {
  return getRuleContexts<FandangoParser::DisjunctionContext>();
}

FandangoParser::DisjunctionContext* FandangoParser::For_if_clauseContext::disjunction(size_t i) {
  return getRuleContext<FandangoParser::DisjunctionContext>(i);
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::For_if_clauseContext::IF() {
  return getTokens(FandangoParser::IF);
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::IF(size_t i) {
  return getToken(FandangoParser::IF, i);
}


size_t FandangoParser::For_if_clauseContext::getRuleIndex() const {
  return FandangoParser::RuleFor_if_clause;
}


std::any FandangoParser::For_if_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFor_if_clause(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::For_if_clauseContext* FandangoParser::for_if_clause() {
  For_if_clauseContext *_localctx = _tracker.createInstance<For_if_clauseContext>(_ctx, getState());
  enterRule(_localctx, 428, FandangoParser::RuleFor_if_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3020);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASYNC) {
      setState(3019);
      match(FandangoParser::ASYNC);
    }
    setState(3022);
    match(FandangoParser::FOR);
    setState(3023);
    star_targets();
    setState(3024);
    match(FandangoParser::IN);
    setState(3025);
    disjunction();
    setState(3030);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::IF) {
      setState(3026);
      match(FandangoParser::IF);
      setState(3027);
      disjunction();
      setState(3032);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListcompContext ------------------------------------------------------------------

FandangoParser::ListcompContext::ListcompContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::ListcompContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::ListcompContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

FandangoParser::For_if_clausesContext* FandangoParser::ListcompContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::ListcompContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::ListcompContext::getRuleIndex() const {
  return FandangoParser::RuleListcomp;
}


std::any FandangoParser::ListcompContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitListcomp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ListcompContext* FandangoParser::listcomp() {
  ListcompContext *_localctx = _tracker.createInstance<ListcompContext>(_ctx, getState());
  enterRule(_localctx, 430, FandangoParser::RuleListcomp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3033);
    match(FandangoParser::OPEN_BRACK);
    setState(3034);
    named_expression();
    setState(3035);
    for_if_clauses();
    setState(3036);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetcompContext ------------------------------------------------------------------

FandangoParser::SetcompContext::SetcompContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::SetcompContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::SetcompContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

FandangoParser::For_if_clausesContext* FandangoParser::SetcompContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::SetcompContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::SetcompContext::getRuleIndex() const {
  return FandangoParser::RuleSetcomp;
}


std::any FandangoParser::SetcompContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSetcomp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SetcompContext* FandangoParser::setcomp() {
  SetcompContext *_localctx = _tracker.createInstance<SetcompContext>(_ctx, getState());
  enterRule(_localctx, 432, FandangoParser::RuleSetcomp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3038);
    match(FandangoParser::OPEN_BRACE);
    setState(3039);
    named_expression();
    setState(3040);
    for_if_clauses();
    setState(3041);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenexpContext ------------------------------------------------------------------

FandangoParser::GenexpContext::GenexpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::GenexpContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::For_if_clausesContext* FandangoParser::GenexpContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::GenexpContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Assignment_expressionContext* FandangoParser::GenexpContext::assignment_expression() {
  return getRuleContext<FandangoParser::Assignment_expressionContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::GenexpContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::GenexpContext::getRuleIndex() const {
  return FandangoParser::RuleGenexp;
}


std::any FandangoParser::GenexpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGenexp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::GenexpContext* FandangoParser::genexp() {
  GenexpContext *_localctx = _tracker.createInstance<GenexpContext>(_ctx, getState());
  enterRule(_localctx, 434, FandangoParser::RuleGenexp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3043);
    match(FandangoParser::OPEN_PAREN);
    setState(3046);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 367, _ctx)) {
    case 1: {
      setState(3044);
      assignment_expression();
      break;
    }

    case 2: {
      setState(3045);
      expression();
      break;
    }

    default:
      break;
    }
    setState(3048);
    for_if_clauses();
    setState(3049);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DictcompContext ------------------------------------------------------------------

FandangoParser::DictcompContext::DictcompContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::DictcompContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::KvpairContext* FandangoParser::DictcompContext::kvpair() {
  return getRuleContext<FandangoParser::KvpairContext>(0);
}

FandangoParser::For_if_clausesContext* FandangoParser::DictcompContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::DictcompContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::DictcompContext::getRuleIndex() const {
  return FandangoParser::RuleDictcomp;
}


std::any FandangoParser::DictcompContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDictcomp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DictcompContext* FandangoParser::dictcomp() {
  DictcompContext *_localctx = _tracker.createInstance<DictcompContext>(_ctx, getState());
  enterRule(_localctx, 436, FandangoParser::RuleDictcomp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3051);
    match(FandangoParser::OPEN_BRACE);
    setState(3052);
    kvpair();
    setState(3053);
    for_if_clauses();
    setState(3054);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentsContext ------------------------------------------------------------------

FandangoParser::ArgumentsContext::ArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ArgsContext* FandangoParser::ArgumentsContext::args() {
  return getRuleContext<FandangoParser::ArgsContext>(0);
}

tree::TerminalNode* FandangoParser::ArgumentsContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::ArgumentsContext::getRuleIndex() const {
  return FandangoParser::RuleArguments;
}


std::any FandangoParser::ArgumentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitArguments(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ArgumentsContext* FandangoParser::arguments() {
  ArgumentsContext *_localctx = _tracker.createInstance<ArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 438, FandangoParser::RuleArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3056);
    args();
    setState(3058);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(3057);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgsContext ------------------------------------------------------------------

FandangoParser::ArgsContext::ArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ArgContext *> FandangoParser::ArgsContext::arg() {
  return getRuleContexts<FandangoParser::ArgContext>();
}

FandangoParser::ArgContext* FandangoParser::ArgsContext::arg(size_t i) {
  return getRuleContext<FandangoParser::ArgContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::ArgsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::ArgsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

FandangoParser::KwargsContext* FandangoParser::ArgsContext::kwargs() {
  return getRuleContext<FandangoParser::KwargsContext>(0);
}


size_t FandangoParser::ArgsContext::getRuleIndex() const {
  return FandangoParser::RuleArgs;
}


std::any FandangoParser::ArgsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitArgs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ArgsContext* FandangoParser::args() {
  ArgsContext *_localctx = _tracker.createInstance<ArgsContext>(_ctx, getState());
  enterRule(_localctx, 440, FandangoParser::RuleArgs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(3073);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 371, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3060);
      arg();
      setState(3065);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 369, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3061);
          match(FandangoParser::COMMA);
          setState(3062);
          arg(); 
        }
        setState(3067);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 369, _ctx);
      }
      setState(3070);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx)) {
      case 1: {
        setState(3068);
        match(FandangoParser::COMMA);
        setState(3069);
        kwargs();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3072);
      kwargs();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgContext ------------------------------------------------------------------

FandangoParser::ArgContext::ArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Star_selectionContext* FandangoParser::ArgContext::star_selection() {
  return getRuleContext<FandangoParser::Star_selectionContext>(0);
}

FandangoParser::Starred_expressionContext* FandangoParser::ArgContext::starred_expression() {
  return getRuleContext<FandangoParser::Starred_expressionContext>(0);
}

FandangoParser::Assignment_expressionContext* FandangoParser::ArgContext::assignment_expression() {
  return getRuleContext<FandangoParser::Assignment_expressionContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::ArgContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::ArgContext::getRuleIndex() const {
  return FandangoParser::RuleArg;
}


std::any FandangoParser::ArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitArg(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ArgContext* FandangoParser::arg() {
  ArgContext *_localctx = _tracker.createInstance<ArgContext>(_ctx, getState());
  enterRule(_localctx, 442, FandangoParser::RuleArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3079);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 372, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3075);
      star_selection();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3076);
      starred_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3077);
      assignment_expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3078);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KwargsContext ------------------------------------------------------------------

FandangoParser::KwargsContext::KwargsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Kwarg_or_starredContext *> FandangoParser::KwargsContext::kwarg_or_starred() {
  return getRuleContexts<FandangoParser::Kwarg_or_starredContext>();
}

FandangoParser::Kwarg_or_starredContext* FandangoParser::KwargsContext::kwarg_or_starred(size_t i) {
  return getRuleContext<FandangoParser::Kwarg_or_starredContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::KwargsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::KwargsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

std::vector<FandangoParser::Kwarg_or_double_starredContext *> FandangoParser::KwargsContext::kwarg_or_double_starred() {
  return getRuleContexts<FandangoParser::Kwarg_or_double_starredContext>();
}

FandangoParser::Kwarg_or_double_starredContext* FandangoParser::KwargsContext::kwarg_or_double_starred(size_t i) {
  return getRuleContext<FandangoParser::Kwarg_or_double_starredContext>(i);
}


size_t FandangoParser::KwargsContext::getRuleIndex() const {
  return FandangoParser::RuleKwargs;
}


std::any FandangoParser::KwargsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwargs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KwargsContext* FandangoParser::kwargs() {
  KwargsContext *_localctx = _tracker.createInstance<KwargsContext>(_ctx, getState());
  enterRule(_localctx, 444, FandangoParser::RuleKwargs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(3114);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 377, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3081);
      kwarg_or_starred();
      setState(3086);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 373, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3082);
          match(FandangoParser::COMMA);
          setState(3083);
          kwarg_or_starred(); 
        }
        setState(3088);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 373, _ctx);
      }
      setState(3089);
      match(FandangoParser::COMMA);
      setState(3090);
      kwarg_or_double_starred();
      setState(3095);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 374, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3091);
          match(FandangoParser::COMMA);
          setState(3092);
          kwarg_or_double_starred(); 
        }
        setState(3097);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 374, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3098);
      kwarg_or_starred();
      setState(3103);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 375, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3099);
          match(FandangoParser::COMMA);
          setState(3100);
          kwarg_or_starred(); 
        }
        setState(3105);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 375, _ctx);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3106);
      kwarg_or_double_starred();
      setState(3111);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 376, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3107);
          match(FandangoParser::COMMA);
          setState(3108);
          kwarg_or_double_starred(); 
        }
        setState(3113);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 376, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Starred_expressionContext ------------------------------------------------------------------

FandangoParser::Starred_expressionContext::Starred_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Starred_expressionContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Starred_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Starred_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleStarred_expression;
}


std::any FandangoParser::Starred_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStarred_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Starred_expressionContext* FandangoParser::starred_expression() {
  Starred_expressionContext *_localctx = _tracker.createInstance<Starred_expressionContext>(_ctx, getState());
  enterRule(_localctx, 446, FandangoParser::RuleStarred_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3116);
    match(FandangoParser::STAR);
    setState(3117);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kwarg_or_starredContext ------------------------------------------------------------------

FandangoParser::Kwarg_or_starredContext::Kwarg_or_starredContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Kwarg_or_starredContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Kwarg_or_starredContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Kwarg_or_starredContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Starred_expressionContext* FandangoParser::Kwarg_or_starredContext::starred_expression() {
  return getRuleContext<FandangoParser::Starred_expressionContext>(0);
}


size_t FandangoParser::Kwarg_or_starredContext::getRuleIndex() const {
  return FandangoParser::RuleKwarg_or_starred;
}


std::any FandangoParser::Kwarg_or_starredContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwarg_or_starred(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Kwarg_or_starredContext* FandangoParser::kwarg_or_starred() {
  Kwarg_or_starredContext *_localctx = _tracker.createInstance<Kwarg_or_starredContext>(_ctx, getState());
  enterRule(_localctx, 448, FandangoParser::RuleKwarg_or_starred);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3124);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(3119);
        identifier();
        setState(3120);
        match(FandangoParser::ASSIGN);
        setState(3121);
        expression();
        break;
      }

      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 2);
        setState(3123);
        starred_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kwarg_or_double_starredContext ------------------------------------------------------------------

FandangoParser::Kwarg_or_double_starredContext::Kwarg_or_double_starredContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Kwarg_or_double_starredContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Kwarg_or_double_starredContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Kwarg_or_double_starredContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::Kwarg_or_double_starredContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}


size_t FandangoParser::Kwarg_or_double_starredContext::getRuleIndex() const {
  return FandangoParser::RuleKwarg_or_double_starred;
}


std::any FandangoParser::Kwarg_or_double_starredContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwarg_or_double_starred(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Kwarg_or_double_starredContext* FandangoParser::kwarg_or_double_starred() {
  Kwarg_or_double_starredContext *_localctx = _tracker.createInstance<Kwarg_or_double_starredContext>(_ctx, getState());
  enterRule(_localctx, 450, FandangoParser::RuleKwarg_or_double_starred);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3132);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(3126);
        identifier();
        setState(3127);
        match(FandangoParser::ASSIGN);
        setState(3128);
        expression();
        break;
      }

      case FandangoParser::POWER: {
        enterOuterAlt(_localctx, 2);
        setState(3130);
        match(FandangoParser::POWER);
        setState(3131);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targetsContext ------------------------------------------------------------------

FandangoParser::Star_targetsContext::Star_targetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_targetContext *> FandangoParser::Star_targetsContext::star_target() {
  return getRuleContexts<FandangoParser::Star_targetContext>();
}

FandangoParser::Star_targetContext* FandangoParser::Star_targetsContext::star_target(size_t i) {
  return getRuleContext<FandangoParser::Star_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_targetsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_targetsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_targetsContext::getRuleIndex() const {
  return FandangoParser::RuleStar_targets;
}


std::any FandangoParser::Star_targetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_targets(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targetsContext* FandangoParser::star_targets() {
  Star_targetsContext *_localctx = _tracker.createInstance<Star_targetsContext>(_ctx, getState());
  enterRule(_localctx, 452, FandangoParser::RuleStar_targets);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3134);
    star_target();
    setState(3139);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 380, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3135);
        match(FandangoParser::COMMA);
        setState(3136);
        star_target(); 
      }
      setState(3141);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 380, _ctx);
    }
    setState(3143);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(3142);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targets_list_seqContext ------------------------------------------------------------------

FandangoParser::Star_targets_list_seqContext::Star_targets_list_seqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_targetContext *> FandangoParser::Star_targets_list_seqContext::star_target() {
  return getRuleContexts<FandangoParser::Star_targetContext>();
}

FandangoParser::Star_targetContext* FandangoParser::Star_targets_list_seqContext::star_target(size_t i) {
  return getRuleContext<FandangoParser::Star_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_targets_list_seqContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_targets_list_seqContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_targets_list_seqContext::getRuleIndex() const {
  return FandangoParser::RuleStar_targets_list_seq;
}


std::any FandangoParser::Star_targets_list_seqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_targets_list_seq(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targets_list_seqContext* FandangoParser::star_targets_list_seq() {
  Star_targets_list_seqContext *_localctx = _tracker.createInstance<Star_targets_list_seqContext>(_ctx, getState());
  enterRule(_localctx, 454, FandangoParser::RuleStar_targets_list_seq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3145);
    star_target();
    setState(3150);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 382, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3146);
        match(FandangoParser::COMMA);
        setState(3147);
        star_target(); 
      }
      setState(3152);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 382, _ctx);
    }
    setState(3154);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(3153);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targets_tuple_seqContext ------------------------------------------------------------------

FandangoParser::Star_targets_tuple_seqContext::Star_targets_tuple_seqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_targetContext *> FandangoParser::Star_targets_tuple_seqContext::star_target() {
  return getRuleContexts<FandangoParser::Star_targetContext>();
}

FandangoParser::Star_targetContext* FandangoParser::Star_targets_tuple_seqContext::star_target(size_t i) {
  return getRuleContext<FandangoParser::Star_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_targets_tuple_seqContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_targets_tuple_seqContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_targets_tuple_seqContext::getRuleIndex() const {
  return FandangoParser::RuleStar_targets_tuple_seq;
}


std::any FandangoParser::Star_targets_tuple_seqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_targets_tuple_seq(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targets_tuple_seqContext* FandangoParser::star_targets_tuple_seq() {
  Star_targets_tuple_seqContext *_localctx = _tracker.createInstance<Star_targets_tuple_seqContext>(_ctx, getState());
  enterRule(_localctx, 456, FandangoParser::RuleStar_targets_tuple_seq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(3169);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 386, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3156);
      star_target();
      setState(3159); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(3157);
                match(FandangoParser::COMMA);
                setState(3158);
                star_target();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(3161); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(3164);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(3163);
        match(FandangoParser::COMMA);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3166);
      star_target();
      setState(3167);
      match(FandangoParser::COMMA);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targetContext ------------------------------------------------------------------

FandangoParser::Star_targetContext::Star_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_targetContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Star_targetContext* FandangoParser::Star_targetContext::star_target() {
  return getRuleContext<FandangoParser::Star_targetContext>(0);
}

FandangoParser::Target_with_star_atomContext* FandangoParser::Star_targetContext::target_with_star_atom() {
  return getRuleContext<FandangoParser::Target_with_star_atomContext>(0);
}


size_t FandangoParser::Star_targetContext::getRuleIndex() const {
  return FandangoParser::RuleStar_target;
}


std::any FandangoParser::Star_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targetContext* FandangoParser::star_target() {
  Star_targetContext *_localctx = _tracker.createInstance<Star_targetContext>(_ctx, getState());
  enterRule(_localctx, 458, FandangoParser::RuleStar_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3174);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 387, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3171);
      match(FandangoParser::STAR);
      setState(3172);
      star_target();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3173);
      target_with_star_atom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Target_with_star_atomContext ------------------------------------------------------------------

FandangoParser::Target_with_star_atomContext::Target_with_star_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::T_primaryContext* FandangoParser::Target_with_star_atomContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::Target_with_star_atomContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Target_with_star_atomContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Target_with_star_atomContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Target_with_star_atomContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Target_with_star_atomContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Star_atomContext* FandangoParser::Target_with_star_atomContext::star_atom() {
  return getRuleContext<FandangoParser::Star_atomContext>(0);
}


size_t FandangoParser::Target_with_star_atomContext::getRuleIndex() const {
  return FandangoParser::RuleTarget_with_star_atom;
}


std::any FandangoParser::Target_with_star_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTarget_with_star_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Target_with_star_atomContext* FandangoParser::target_with_star_atom() {
  Target_with_star_atomContext *_localctx = _tracker.createInstance<Target_with_star_atomContext>(_ctx, getState());
  enterRule(_localctx, 460, FandangoParser::RuleTarget_with_star_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3186);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 388, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3176);
      t_primary(0);
      setState(3177);
      match(FandangoParser::DOT);
      setState(3178);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3180);
      t_primary(0);
      setState(3181);
      match(FandangoParser::OPEN_BRACK);
      setState(3182);
      slices();
      setState(3183);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3185);
      star_atom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_atomContext ------------------------------------------------------------------

FandangoParser::Star_atomContext::Star_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Star_atomContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Target_with_star_atomContext* FandangoParser::Star_atomContext::target_with_star_atom() {
  return getRuleContext<FandangoParser::Target_with_star_atomContext>(0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Star_targets_tuple_seqContext* FandangoParser::Star_atomContext::star_targets_tuple_seq() {
  return getRuleContext<FandangoParser::Star_targets_tuple_seqContext>(0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Star_targets_list_seqContext* FandangoParser::Star_atomContext::star_targets_list_seq() {
  return getRuleContext<FandangoParser::Star_targets_list_seqContext>(0);
}


size_t FandangoParser::Star_atomContext::getRuleIndex() const {
  return FandangoParser::RuleStar_atom;
}


std::any FandangoParser::Star_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_atomContext* FandangoParser::star_atom() {
  Star_atomContext *_localctx = _tracker.createInstance<Star_atomContext>(_ctx, getState());
  enterRule(_localctx, 462, FandangoParser::RuleStar_atom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3203);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 391, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3188);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3189);
      match(FandangoParser::OPEN_PAREN);
      setState(3190);
      target_with_star_atom();
      setState(3191);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3193);
      match(FandangoParser::OPEN_PAREN);
      setState(3195);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540449684976566776) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 83896857) != 0)) {
        setState(3194);
        star_targets_tuple_seq();
      }
      setState(3197);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3198);
      match(FandangoParser::OPEN_BRACK);
      setState(3200);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540449684976566776) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 83896857) != 0)) {
        setState(3199);
        star_targets_list_seq();
      }
      setState(3202);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Single_targetContext ------------------------------------------------------------------

FandangoParser::Single_targetContext::Single_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Single_subscript_attribute_targetContext* FandangoParser::Single_targetContext::single_subscript_attribute_target() {
  return getRuleContext<FandangoParser::Single_subscript_attribute_targetContext>(0);
}

FandangoParser::IdentifierContext* FandangoParser::Single_targetContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Single_targetContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Single_targetContext* FandangoParser::Single_targetContext::single_target() {
  return getRuleContext<FandangoParser::Single_targetContext>(0);
}

tree::TerminalNode* FandangoParser::Single_targetContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}


size_t FandangoParser::Single_targetContext::getRuleIndex() const {
  return FandangoParser::RuleSingle_target;
}


std::any FandangoParser::Single_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSingle_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Single_targetContext* FandangoParser::single_target() {
  Single_targetContext *_localctx = _tracker.createInstance<Single_targetContext>(_ctx, getState());
  enterRule(_localctx, 464, FandangoParser::RuleSingle_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3211);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 392, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3205);
      single_subscript_attribute_target();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3206);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3207);
      match(FandangoParser::OPEN_PAREN);
      setState(3208);
      single_target();
      setState(3209);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Single_subscript_attribute_targetContext ------------------------------------------------------------------

FandangoParser::Single_subscript_attribute_targetContext::Single_subscript_attribute_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::T_primaryContext* FandangoParser::Single_subscript_attribute_targetContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::Single_subscript_attribute_targetContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Single_subscript_attribute_targetContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Single_subscript_attribute_targetContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Single_subscript_attribute_targetContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Single_subscript_attribute_targetContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::Single_subscript_attribute_targetContext::getRuleIndex() const {
  return FandangoParser::RuleSingle_subscript_attribute_target;
}


std::any FandangoParser::Single_subscript_attribute_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSingle_subscript_attribute_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Single_subscript_attribute_targetContext* FandangoParser::single_subscript_attribute_target() {
  Single_subscript_attribute_targetContext *_localctx = _tracker.createInstance<Single_subscript_attribute_targetContext>(_ctx, getState());
  enterRule(_localctx, 466, FandangoParser::RuleSingle_subscript_attribute_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3222);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 393, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3213);
      t_primary(0);
      setState(3214);
      match(FandangoParser::DOT);
      setState(3215);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3217);
      t_primary(0);
      setState(3218);
      match(FandangoParser::OPEN_BRACK);
      setState(3219);
      slices();
      setState(3220);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- T_primaryContext ------------------------------------------------------------------

FandangoParser::T_primaryContext::T_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AtomContext* FandangoParser::T_primaryContext::atom() {
  return getRuleContext<FandangoParser::AtomContext>(0);
}

FandangoParser::T_primaryContext* FandangoParser::T_primaryContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

FandangoParser::IdentifierContext* FandangoParser::T_primaryContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::T_primaryContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::GenexpContext* FandangoParser::T_primaryContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::T_primaryContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}


size_t FandangoParser::T_primaryContext::getRuleIndex() const {
  return FandangoParser::RuleT_primary;
}


std::any FandangoParser::T_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitT_primary(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::T_primaryContext* FandangoParser::t_primary() {
   return t_primary(0);
}

FandangoParser::T_primaryContext* FandangoParser::t_primary(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::T_primaryContext *_localctx = _tracker.createInstance<T_primaryContext>(_ctx, parentState);
  FandangoParser::T_primaryContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 468;
  enterRecursionRule(_localctx, 468, FandangoParser::RuleT_primary, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3225);
    atom();
    _ctx->stop = _input->LT(-1);
    setState(3245);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 396, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3243);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 395, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(3227);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(3228);
          match(FandangoParser::DOT);
          setState(3229);
          identifier();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(3230);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(3231);
          match(FandangoParser::OPEN_BRACK);
          setState(3232);
          slices();
          setState(3233);
          match(FandangoParser::CLOSE_BRACK);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(3235);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(3236);
          genexp();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(3237);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(3238);
          match(FandangoParser::OPEN_PAREN);
          setState(3240);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 74)) & 93071897) != 0)) {
            setState(3239);
            arguments();
          }
          setState(3242);
          match(FandangoParser::CLOSE_PAREN);
          break;
        }

        default:
          break;
        } 
      }
      setState(3247);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 396, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Del_targetsContext ------------------------------------------------------------------

FandangoParser::Del_targetsContext::Del_targetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Del_targetContext *> FandangoParser::Del_targetsContext::del_target() {
  return getRuleContexts<FandangoParser::Del_targetContext>();
}

FandangoParser::Del_targetContext* FandangoParser::Del_targetsContext::del_target(size_t i) {
  return getRuleContext<FandangoParser::Del_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Del_targetsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Del_targetsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Del_targetsContext::getRuleIndex() const {
  return FandangoParser::RuleDel_targets;
}


std::any FandangoParser::Del_targetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_targets(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_targetsContext* FandangoParser::del_targets() {
  Del_targetsContext *_localctx = _tracker.createInstance<Del_targetsContext>(_ctx, getState());
  enterRule(_localctx, 470, FandangoParser::RuleDel_targets);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3248);
    del_target();
    setState(3253);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 397, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3249);
        match(FandangoParser::COMMA);
        setState(3250);
        del_target(); 
      }
      setState(3255);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 397, _ctx);
    }
    setState(3257);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(3256);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Del_targetContext ------------------------------------------------------------------

FandangoParser::Del_targetContext::Del_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::T_primaryContext* FandangoParser::Del_targetContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::Del_targetContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Del_targetContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Del_targetContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Del_targetContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Del_targetContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Del_t_atomContext* FandangoParser::Del_targetContext::del_t_atom() {
  return getRuleContext<FandangoParser::Del_t_atomContext>(0);
}


size_t FandangoParser::Del_targetContext::getRuleIndex() const {
  return FandangoParser::RuleDel_target;
}


std::any FandangoParser::Del_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_targetContext* FandangoParser::del_target() {
  Del_targetContext *_localctx = _tracker.createInstance<Del_targetContext>(_ctx, getState());
  enterRule(_localctx, 472, FandangoParser::RuleDel_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3269);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 399, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3259);
      t_primary(0);
      setState(3260);
      match(FandangoParser::DOT);
      setState(3261);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3263);
      t_primary(0);
      setState(3264);
      match(FandangoParser::OPEN_BRACK);
      setState(3265);
      slices();
      setState(3266);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3268);
      del_t_atom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Del_t_atomContext ------------------------------------------------------------------

FandangoParser::Del_t_atomContext::Del_t_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Del_t_atomContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Del_targetsContext* FandangoParser::Del_t_atomContext::del_targets() {
  return getRuleContext<FandangoParser::Del_targetsContext>(0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::Del_t_atomContext::getRuleIndex() const {
  return FandangoParser::RuleDel_t_atom;
}


std::any FandangoParser::Del_t_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_t_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_t_atomContext* FandangoParser::del_t_atom() {
  Del_t_atomContext *_localctx = _tracker.createInstance<Del_t_atomContext>(_ctx, getState());
  enterRule(_localctx, 474, FandangoParser::RuleDel_t_atom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3282);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(3271);
        identifier();
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(3272);
        match(FandangoParser::OPEN_PAREN);
        setState(3274);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 540449684976566776) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 74)) & 83896857) != 0)) {
          setState(3273);
          del_targets();
        }
        setState(3276);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

      case FandangoParser::OPEN_BRACK: {
        enterOuterAlt(_localctx, 3);
        setState(3277);
        match(FandangoParser::OPEN_BRACK);
        setState(3279);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 540449684976566776) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 74)) & 83896857) != 0)) {
          setState(3278);
          del_targets();
        }
        setState(3281);
        match(FandangoParser::CLOSE_BRACK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_expressionsContext ------------------------------------------------------------------

FandangoParser::Type_expressionsContext::Type_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::Type_expressionsContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::Type_expressionsContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Type_expressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Type_expressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

tree::TerminalNode* FandangoParser::Type_expressionsContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

tree::TerminalNode* FandangoParser::Type_expressionsContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}


size_t FandangoParser::Type_expressionsContext::getRuleIndex() const {
  return FandangoParser::RuleType_expressions;
}


std::any FandangoParser::Type_expressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_expressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_expressionsContext* FandangoParser::type_expressions() {
  Type_expressionsContext *_localctx = _tracker.createInstance<Type_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 476, FandangoParser::RuleType_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(3341);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 407, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3284);
      expression();
      setState(3289);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 403, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3285);
          match(FandangoParser::COMMA);
          setState(3286);
          expression(); 
        }
        setState(3291);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 403, _ctx);
      }
      setState(3292);
      match(FandangoParser::COMMA);
      setState(3293);
      match(FandangoParser::STAR);
      setState(3294);
      expression();
      setState(3295);
      match(FandangoParser::COMMA);
      setState(3296);
      match(FandangoParser::POWER);
      setState(3297);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3299);
      expression();
      setState(3304);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 404, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3300);
          match(FandangoParser::COMMA);
          setState(3301);
          expression(); 
        }
        setState(3306);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 404, _ctx);
      }
      setState(3307);
      match(FandangoParser::COMMA);
      setState(3308);
      match(FandangoParser::STAR);
      setState(3309);
      expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3311);
      expression();
      setState(3316);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 405, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3312);
          match(FandangoParser::COMMA);
          setState(3313);
          expression(); 
        }
        setState(3318);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 405, _ctx);
      }
      setState(3319);
      match(FandangoParser::COMMA);
      setState(3320);
      match(FandangoParser::POWER);
      setState(3321);
      expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3323);
      match(FandangoParser::STAR);
      setState(3324);
      expression();
      setState(3325);
      match(FandangoParser::COMMA);
      setState(3326);
      match(FandangoParser::POWER);
      setState(3327);
      expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3329);
      match(FandangoParser::STAR);
      setState(3330);
      expression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3331);
      match(FandangoParser::POWER);
      setState(3332);
      expression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(3333);
      expression();
      setState(3338);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::COMMA) {
        setState(3334);
        match(FandangoParser::COMMA);
        setState(3335);
        expression();
        setState(3340);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_type_commentContext ------------------------------------------------------------------

FandangoParser::Func_type_commentContext::Func_type_commentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Func_type_commentContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}


size_t FandangoParser::Func_type_commentContext::getRuleIndex() const {
  return FandangoParser::RuleFunc_type_comment;
}


std::any FandangoParser::Func_type_commentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunc_type_comment(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Func_type_commentContext* FandangoParser::func_type_comment() {
  Func_type_commentContext *_localctx = _tracker.createInstance<Func_type_commentContext>(_ctx, getState());
  enterRule(_localctx, 478, FandangoParser::RuleFunc_type_comment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3343);
    match(FandangoParser::NEWLINE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

FandangoParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::IdentifierContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::IdentifierContext::ANY() {
  return getToken(FandangoParser::ANY, 0);
}

tree::TerminalNode* FandangoParser::IdentifierContext::ALL() {
  return getToken(FandangoParser::ALL, 0);
}

tree::TerminalNode* FandangoParser::IdentifierContext::LEN() {
  return getToken(FandangoParser::LEN, 0);
}


size_t FandangoParser::IdentifierContext::getRuleIndex() const {
  return FandangoParser::RuleIdentifier;
}


std::any FandangoParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::IdentifierContext* FandangoParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 480, FandangoParser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3345);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540431955284459520) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool FandangoParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 14: return generator_callSempred(antlrcpp::downCast<Generator_callContext *>(context), predicateIndex);
    case 29: return dot_selectionSempred(antlrcpp::downCast<Dot_selectionContext *>(context), predicateIndex);
    case 66: return dotted_nameSempred(antlrcpp::downCast<Dotted_nameContext *>(context), predicateIndex);
    case 120: return name_or_attrSempred(antlrcpp::downCast<Name_or_attrContext *>(context), predicateIndex);
    case 164: return bitwise_orSempred(antlrcpp::downCast<Bitwise_orContext *>(context), predicateIndex);
    case 165: return bitwise_xorSempred(antlrcpp::downCast<Bitwise_xorContext *>(context), predicateIndex);
    case 166: return bitwise_andSempred(antlrcpp::downCast<Bitwise_andContext *>(context), predicateIndex);
    case 167: return shift_exprSempred(antlrcpp::downCast<Shift_exprContext *>(context), predicateIndex);
    case 168: return sumSempred(antlrcpp::downCast<SumContext *>(context), predicateIndex);
    case 169: return termSempred(antlrcpp::downCast<TermContext *>(context), predicateIndex);
    case 173: return primarySempred(antlrcpp::downCast<PrimaryContext *>(context), predicateIndex);
    case 234: return t_primarySempred(antlrcpp::downCast<T_primaryContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool FandangoParser::generator_callSempred(Generator_callContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 4);
    case 1: return precpred(_ctx, 3);
    case 2: return precpred(_ctx, 2);
    case 3: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool FandangoParser::dot_selectionSempred(Dot_selectionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 4: return precpred(_ctx, 2);
    case 5: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool FandangoParser::dotted_nameSempred(Dotted_nameContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::name_or_attrSempred(Name_or_attrContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 7: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::bitwise_orSempred(Bitwise_orContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::bitwise_xorSempred(Bitwise_xorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::bitwise_andSempred(Bitwise_andContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::shift_exprSempred(Shift_exprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 3);
    case 12: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::sumSempred(SumContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 13: return precpred(_ctx, 3);
    case 14: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::termSempred(TermContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 15: return precpred(_ctx, 6);
    case 16: return precpred(_ctx, 5);
    case 17: return precpred(_ctx, 4);
    case 18: return precpred(_ctx, 3);
    case 19: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::primarySempred(PrimaryContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 20: return precpred(_ctx, 5);
    case 21: return precpred(_ctx, 4);
    case 22: return precpred(_ctx, 3);
    case 23: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::t_primarySempred(T_primaryContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 24: return precpred(_ctx, 5);
    case 25: return precpred(_ctx, 4);
    case 26: return precpred(_ctx, 3);
    case 27: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

void FandangoParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  fandangoparserParserInitialize();
#else
  ::antlr4::internal::call_once(fandangoparserParserOnceFlag, fandangoparserParserInitialize);
#endif
}
