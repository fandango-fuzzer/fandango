
// Generated from language/FandangoParser.g4 by ANTLR 4.13.2


#include "FandangoParserVisitor.h"

#include "FandangoParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct FandangoParserStaticData final {
  FandangoParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  FandangoParserStaticData(const FandangoParserStaticData&) = delete;
  FandangoParserStaticData(FandangoParserStaticData&&) = delete;
  FandangoParserStaticData& operator=(const FandangoParserStaticData&) = delete;
  FandangoParserStaticData& operator=(FandangoParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag fandangoparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<FandangoParserStaticData> fandangoparserParserStaticData = nullptr;

void fandangoparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (fandangoparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(fandangoparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<FandangoParserStaticData>(
    std::vector<std::string>{
      "fandango", "program", "statement", "production", "alternative", "concatenation", 
      "operator", "kleene", "plus", "option", "repeat", "symbol", "nonterminal_right", 
      "nonterminal", "generator_call", "char_set", "constraint", "implies", 
      "quantifier", "quantifier_in_line", "formula_disjunction", "formula_conjunction", 
      "formula_atom", "formula_comparison", "expr", "selector_length", "star_selection_or_dot_selection", 
      "star_selection", "dot_selection", "selection", "base_selection", 
      "rs_pairs", "rs_pair", "rs_slices", "rs_slice", "python", "python_tag", 
      "python_file", "interactive", "eval", "func_type", "statements", "stmt", 
      "statement_newline", "simple_stmts", "simple_stmt", "compound_stmt", 
      "assignment", "annotated_rhs", "augassign", "return_stmt", "raise_stmt", 
      "global_stmt", "nonlocal_stmt", "del_stmt", "yield_stmt", "assert_stmt", 
      "import_stmt", "import_name", "import_from", "import_from_targets", 
      "import_from_as_names", "import_from_as_name", "dotted_as_names", 
      "dotted_as_name", "dotted_name", "block", "decorators", "class_def", 
      "class_def_raw", "function_def", "function_def_raw", "params", "parameters", 
      "slash_no_default", "slash_with_default", "star_etc", "kwds", "param_no_default", 
      "param_no_default_star_annotation", "param_with_default", "param_maybe_default", 
      "param", "param_star_annotation", "annotation", "star_annotation", 
      "default", "if_stmt", "elif_stmt", "else_block", "while_stmt", "for_stmt", 
      "with_stmt", "with_item", "try_stmt", "except_block", "except_star_block", 
      "finally_block", "match_stmt", "subject_expr", "case_block", "guard", 
      "patterns", "pattern", "as_pattern", "or_pattern", "closed_pattern", 
      "literal_pattern", "literal_expr", "complex_number", "signed_number", 
      "signed_real_number", "real_number", "imaginary_number", "capture_pattern", 
      "pattern_capture_target", "wildcard_pattern", "value_pattern", "attr", 
      "name_or_attr", "group_pattern", "sequence_pattern", "open_sequence_pattern", 
      "maybe_sequence_pattern", "maybe_star_pattern", "star_pattern", "mapping_pattern", 
      "items_pattern", "key_value_pattern", "double_star_pattern", "class_pattern", 
      "positional_patterns", "keyword_patterns", "keyword_pattern", "type_alias", 
      "type_params", "type_param_seq", "type_param", "type_param_bound", 
      "expressions", "expression", "yield_expr", "star_expressions", "star_expression", 
      "star_named_expressions", "star_named_expression", "assignment_expression", 
      "named_expression", "disjunction", "conjunction", "inversion", "comparison", 
      "compare_op_bitwise_or_pair", "eq_bitwise_or", "noteq_bitwise_or", 
      "lte_bitwise_or", "lt_bitwise_or", "gte_bitwise_or", "gt_bitwise_or", 
      "notin_bitwise_or", "in_bitwise_or", "isnot_bitwise_or", "is_bitwise_or", 
      "bitwise_or", "bitwise_xor", "bitwise_and", "shift_expr", "sum", "term", 
      "factor", "power", "await_primary", "primary", "slices", "slice", 
      "atom", "group", "lambdef", "lambda_params", "lambda_parameters", 
      "lambda_slash_no_default", "lambda_slash_with_default", "lambda_star_etc", 
      "lambda_kwds", "lambda_param_no_default", "lambda_param_with_default", 
      "lambda_param_maybe_default", "lambda_param", "fstring_middle_no_quote", 
      "fstring_middle_no_single_quote", "fstring_middle_breaks_no_triple_quote", 
      "fstring_middle_breaks_no_triple_single_quote", "fstring_any_no_quote", 
      "fstring_any_no_single_quote", "fstring_middle", "fstring_any_breaks_no_triple_quote", 
      "fstring_any_breaks_no_triple_single_quote", "fstring_any", "fstring_replacement_field", 
      "fstring_conversion", "fstring_full_format_spec", "fstring_format_spec", 
      "fstring", "string", "strings", "list", "tuple", "set", "dict", "double_starred_kvpairs", 
      "double_starred_kvpair", "kvpair", "for_if_clauses", "for_if_clause", 
      "listcomp", "setcomp", "genexp", "dictcomp", "arguments", "args", 
      "arg", "kwargs", "starred_expression", "kwarg_or_starred", "kwarg_or_double_starred", 
      "star_targets", "star_targets_list_seq", "star_targets_tuple_seq", 
      "star_target", "target_with_star_atom", "star_atom", "single_target", 
      "single_subscript_attribute_target", "t_primary", "del_targets", "del_target", 
      "del_t_atom", "type_expressions", "func_type_comment", "identifier"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "'<py>'", "'</py>'", "'and'", 
      "'as'", "'assert'", "'async'", "'await'", "'break'", "'case'", "'class'", 
      "'continue'", "'def'", "'del'", "'elif'", "'else'", "'except'", "'False'", 
      "'finally'", "'for'", "'from'", "'global'", "'if'", "'import'", "'in'", 
      "'is'", "'lambda'", "'match'", "'None'", "'nonlocal'", "'not'", "'or'", 
      "'pass'", "'raise'", "'return'", "'True'", "'try'", "'type'", "'while'", 
      "'where'", "'with'", "'yield'", "'forall'", "'exists'", "'maximizing'", 
      "'minimizing'", "'any'", "'all'", "'len'", "", "", "'\"\"\"'", "'''''", 
      "'\"'", "'''", "", "", "", "", "", "", "", "'::='", "'\\u003F'", "'\\'", 
      "'...'", "'..'", "'.'", "'*'", "'('", "')'", "','", "':'", "';'", 
      "'**'", "'='", "'['", "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'", 
      "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", "'}'", "'<'", "'>'", 
      "'=='", "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", 
      "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", 
      "'**='", "'//='", "':='", "'!'"
    },
    std::vector<std::string>{
      "", "INDENT", "DEDENT", "FSTRING_START_QUOTE", "FSTRING_START_SINGLE_QUOTE", 
      "FSTRING_START_TRIPLE_QUOTE", "FSTRING_START_TRIPLE_SINGLE_QUOTE", 
      "STRING", "NUMBER", "INTEGER", "PYTHON_START", "PYTHON_END", "AND", 
      "AS", "ASSERT", "ASYNC", "AWAIT", "BREAK", "CASE", "CLASS", "CONTINUE", 
      "DEF", "DEL", "ELIF", "ELSE", "EXCEPT", "FALSE", "FINALLY", "FOR", 
      "FROM", "GLOBAL", "IF", "IMPORT", "IN", "IS", "LAMBDA", "MATCH", "NONE", 
      "NONLOCAL", "NOT", "OR", "PASS", "RAISE", "RETURN", "TRUE", "TRY", 
      "TYPE", "WHILE", "WHERE", "WITH", "YIELD", "FORALL", "EXISTS", "MAXIMIZING", 
      "MINIMIZING", "ANY", "ALL", "LEN", "NAME", "STRING_LITERAL", "FSTRING_END_TRIPLE_QUOTE", 
      "FSTRING_END_TRIPLE_SINGLE_QUOTE", "FSTRING_END_QUOTE", "FSTRING_END_SINGLE_QUOTE", 
      "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", 
      "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", "GRAMMAR_ASSIGN", "QUESTION", 
      "BACKSLASH", "ELLIPSIS", "DOTDOT", "DOT", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
      "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", 
      "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", 
      "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", "LESS_THAN", 
      "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", 
      "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", 
      "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", 
      "EXPR_ASSIGN", "EXCL", "NEWLINE", "SKIP_", "UNKNOWN_CHAR", "UNDERSCORE"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,127,3313,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,1,0,1,0,1,0,1,1,5,1,485,8,1,
  	10,1,12,1,488,9,1,1,1,1,1,5,1,492,8,1,10,1,12,1,495,9,1,5,1,497,8,1,10,
  	1,12,1,500,9,1,1,2,1,2,1,2,3,2,505,8,2,1,3,5,3,508,8,3,10,3,12,3,511,
  	9,3,1,3,1,3,1,3,1,3,1,3,3,3,518,8,3,1,3,1,3,4,3,522,8,3,11,3,12,3,523,
  	1,3,3,3,527,8,3,1,3,5,3,530,8,3,10,3,12,3,533,9,3,1,3,5,3,536,8,3,10,
  	3,12,3,539,9,3,1,3,1,3,1,3,1,3,1,3,3,3,546,8,3,1,3,1,3,4,3,550,8,3,11,
  	3,12,3,551,1,3,3,3,555,8,3,1,3,5,3,558,8,3,10,3,12,3,561,9,3,1,3,5,3,
  	564,8,3,10,3,12,3,567,9,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,575,8,3,1,3,1,3,
  	4,3,579,8,3,11,3,12,3,580,1,3,3,3,584,8,3,1,3,5,3,587,8,3,10,3,12,3,590,
  	9,3,3,3,592,8,3,1,4,1,4,1,4,5,4,597,8,4,10,4,12,4,600,9,4,1,5,1,5,5,5,
  	604,8,5,10,5,12,5,607,9,5,1,6,1,6,1,6,1,6,1,6,3,6,614,8,6,1,7,1,7,1,7,
  	1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,
  	633,8,10,1,10,1,10,3,10,637,8,10,1,10,1,10,3,10,641,8,10,1,11,1,11,1,
  	11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,652,8,11,1,12,1,12,1,12,1,12,3,
  	12,658,8,12,1,12,1,12,1,12,3,12,663,8,12,1,12,1,12,1,12,1,13,1,13,1,13,
  	1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,14,1,14,3,14,688,8,14,1,14,5,14,691,8,14,10,14,12,14,694,9,14,
  	1,15,1,15,3,15,698,8,15,1,15,1,15,1,15,1,16,5,16,704,8,16,10,16,12,16,
  	707,9,16,1,16,1,16,1,16,5,16,712,8,16,10,16,12,16,715,9,16,1,16,5,16,
  	718,8,16,10,16,12,16,721,9,16,1,16,1,16,1,16,1,16,4,16,727,8,16,11,16,
  	12,16,728,1,16,3,16,732,8,16,1,16,5,16,735,8,16,10,16,12,16,738,9,16,
  	1,16,5,16,741,8,16,10,16,12,16,744,9,16,1,16,1,16,1,16,1,16,4,16,750,
  	8,16,11,16,12,16,751,1,16,3,16,755,8,16,1,16,5,16,758,8,16,10,16,12,16,
  	761,9,16,1,16,1,16,1,16,3,16,766,8,16,1,17,1,17,1,17,1,17,1,17,1,17,3,
  	17,774,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,
  	18,787,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,
  	18,800,8,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,808,8,18,1,18,1,18,1,18,
  	1,18,1,18,4,18,815,8,18,11,18,12,18,816,1,18,3,18,820,8,18,1,18,1,18,
  	1,18,1,18,1,18,1,18,1,18,3,18,829,8,18,1,18,1,18,1,18,1,18,1,18,1,18,
  	4,18,837,8,18,11,18,12,18,838,1,18,3,18,842,8,18,1,18,1,18,1,18,1,18,
  	1,18,1,18,1,18,3,18,851,8,18,1,18,1,18,1,18,1,18,1,18,1,18,4,18,859,8,
  	18,11,18,12,18,860,1,18,3,18,864,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
  	18,3,18,873,8,18,1,18,1,18,1,18,1,18,1,18,1,18,4,18,881,8,18,11,18,12,
  	18,882,1,18,3,18,886,8,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,894,8,18,
  	1,18,1,18,1,18,1,18,1,18,4,18,901,8,18,11,18,12,18,902,1,18,3,18,906,
  	8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,915,8,18,1,18,1,18,1,18,
  	1,18,1,18,1,18,4,18,923,8,18,11,18,12,18,924,1,18,3,18,928,8,18,1,18,
  	1,18,1,18,1,18,1,18,1,18,1,18,3,18,937,8,18,1,18,1,18,1,18,1,18,1,18,
  	1,18,4,18,945,8,18,11,18,12,18,946,1,18,3,18,950,8,18,1,18,1,18,1,18,
  	1,18,1,18,1,18,1,18,3,18,959,8,18,1,18,1,18,1,18,1,18,1,18,1,18,4,18,
  	967,8,18,11,18,12,18,968,1,18,3,18,972,8,18,1,18,1,18,1,18,4,18,977,8,
  	18,11,18,12,18,978,1,18,3,18,982,8,18,3,18,984,8,18,1,19,1,19,1,19,1,
  	19,1,19,1,19,3,19,992,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
  	19,1,19,1,19,3,19,1005,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
  	19,1,19,1,19,1,19,3,19,1019,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
  	19,1,19,1,19,1,19,1,19,3,19,1033,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
  	19,1,19,1,19,1,19,1,19,3,19,1046,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
  	19,1,19,1,19,1,19,1,19,3,19,1059,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
  	19,1,19,1,19,1,19,1,19,1,19,3,19,1073,8,19,1,19,1,19,1,19,1,19,1,19,1,
  	19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,1087,8,19,1,19,1,19,1,19,1,19,1,
  	19,1,19,3,19,1095,8,19,1,20,1,20,1,20,5,20,1100,8,20,10,20,12,20,1103,
  	9,20,1,21,1,21,1,21,5,21,1108,8,21,10,21,12,21,1111,9,21,1,22,1,22,1,
  	22,1,22,1,22,1,22,3,22,1119,8,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
  	24,1,24,1,24,1,24,1,24,3,24,1133,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,25,3,25,1145,8,25,1,26,1,26,3,26,1149,8,26,1,27,1,27,1,
  	27,1,27,3,27,1155,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,5,
  	28,1166,8,28,10,28,12,28,1169,9,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
  	1,29,1,29,1,29,1,29,3,29,1182,8,29,1,30,1,30,1,30,1,30,1,30,3,30,1189,
  	8,30,1,31,1,31,1,31,5,31,1194,8,31,10,31,12,31,1197,9,31,1,31,3,31,1200,
  	8,31,1,32,1,32,1,32,1,32,3,32,1206,8,32,1,33,1,33,1,33,5,33,1211,8,33,
  	10,33,12,33,1214,9,33,1,33,3,33,1217,8,33,1,34,1,34,3,34,1221,8,34,1,
  	34,1,34,3,34,1225,8,34,1,34,3,34,1228,8,34,1,34,1,34,3,34,1232,8,34,1,
  	34,1,34,3,34,1236,8,34,3,34,1238,8,34,1,35,1,35,3,35,1242,8,35,1,36,5,
  	36,1245,8,36,10,36,12,36,1248,9,36,1,36,1,36,5,36,1252,8,36,10,36,12,
  	36,1255,9,36,1,37,3,37,1258,8,37,1,37,3,37,1261,8,37,1,38,1,38,1,39,1,
  	39,5,39,1267,8,39,10,39,12,39,1270,9,39,1,39,3,39,1273,8,39,1,40,1,40,
  	3,40,1277,8,40,1,40,1,40,1,40,1,40,5,40,1283,8,40,10,40,12,40,1286,9,
  	40,1,40,3,40,1289,8,40,1,41,1,41,4,41,1293,8,41,11,41,12,41,1294,1,42,
  	1,42,3,42,1299,8,42,1,43,1,43,1,43,1,43,1,43,3,43,1306,8,43,1,44,1,44,
  	1,44,5,44,1311,8,44,10,44,12,44,1314,9,44,1,44,3,44,1317,8,44,1,44,4,
  	44,1320,8,44,11,44,12,44,1321,1,44,5,44,1325,8,44,10,44,12,44,1328,9,
  	44,1,44,3,44,1331,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
  	45,1,45,1,45,1,45,1,45,3,45,1347,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,
  	46,1,46,3,46,1357,8,46,1,47,1,47,1,47,1,47,1,47,3,47,1364,8,47,1,47,1,
  	47,1,47,1,47,1,47,3,47,1371,8,47,1,47,1,47,1,47,1,47,3,47,1377,8,47,1,
  	47,1,47,1,47,4,47,1382,8,47,11,47,12,47,1383,1,47,1,47,3,47,1388,8,47,
  	1,47,1,47,1,47,1,47,3,47,1394,8,47,3,47,1396,8,47,1,48,1,48,3,48,1400,
  	8,48,1,49,1,49,1,50,1,50,3,50,1406,8,50,1,51,1,51,1,51,1,51,3,51,1412,
  	8,51,1,51,3,51,1415,8,51,1,52,1,52,1,52,1,52,5,52,1421,8,52,10,52,12,
  	52,1424,9,52,1,53,1,53,1,53,1,53,5,53,1430,8,53,10,53,12,53,1433,9,53,
  	1,54,1,54,1,54,1,55,1,55,1,56,1,56,1,56,1,56,3,56,1444,8,56,1,57,1,57,
  	3,57,1448,8,57,1,58,1,58,1,58,1,59,1,59,5,59,1455,8,59,10,59,12,59,1458,
  	9,59,1,59,1,59,1,59,1,59,1,59,1,59,4,59,1466,8,59,11,59,12,59,1467,1,
  	59,1,59,3,59,1472,8,59,1,60,1,60,1,60,3,60,1477,8,60,1,60,1,60,1,60,1,
  	60,3,60,1483,8,60,1,61,1,61,1,61,5,61,1488,8,61,10,61,12,61,1491,9,61,
  	1,62,1,62,1,62,3,62,1496,8,62,1,63,1,63,1,63,5,63,1501,8,63,10,63,12,
  	63,1504,9,63,1,64,1,64,1,64,3,64,1509,8,64,1,65,1,65,1,65,1,65,1,65,1,
  	65,5,65,1517,8,65,10,65,12,65,1520,9,65,1,66,1,66,1,66,1,66,1,66,1,66,
  	3,66,1528,8,66,1,67,1,67,1,67,1,67,4,67,1534,8,67,11,67,12,67,1535,1,
  	68,3,68,1539,8,68,1,68,1,68,1,69,1,69,1,69,3,69,1546,8,69,1,69,1,69,3,
  	69,1550,8,69,1,69,3,69,1553,8,69,1,69,1,69,1,69,1,70,3,70,1559,8,70,1,
  	70,1,70,1,71,3,71,1564,8,71,1,71,1,71,1,71,3,71,1569,8,71,1,71,1,71,3,
  	71,1573,8,71,1,71,1,71,1,71,3,71,1578,8,71,1,71,1,71,3,71,1582,8,71,1,
  	71,1,71,1,72,1,72,1,73,1,73,5,73,1590,8,73,10,73,12,73,1593,9,73,1,73,
  	5,73,1596,8,73,10,73,12,73,1599,9,73,1,73,3,73,1602,8,73,1,73,1,73,5,
  	73,1606,8,73,10,73,12,73,1609,9,73,1,73,3,73,1612,8,73,1,73,4,73,1615,
  	8,73,11,73,12,73,1616,1,73,5,73,1620,8,73,10,73,12,73,1623,9,73,1,73,
  	3,73,1626,8,73,1,73,4,73,1629,8,73,11,73,12,73,1630,1,73,3,73,1634,8,
  	73,1,73,3,73,1637,8,73,1,74,4,74,1640,8,74,11,74,12,74,1641,1,74,1,74,
  	3,74,1646,8,74,1,75,5,75,1649,8,75,10,75,12,75,1652,9,75,1,75,4,75,1655,
  	8,75,11,75,12,75,1656,1,75,1,75,3,75,1661,8,75,1,76,1,76,1,76,5,76,1666,
  	8,76,10,76,12,76,1669,9,76,1,76,3,76,1672,8,76,1,76,1,76,1,76,5,76,1677,
  	8,76,10,76,12,76,1680,9,76,1,76,3,76,1683,8,76,1,76,1,76,1,76,4,76,1688,
  	8,76,11,76,12,76,1689,1,76,3,76,1693,8,76,1,76,3,76,1696,8,76,1,77,1,
  	77,1,77,1,78,1,78,1,78,1,78,3,78,1705,8,78,1,79,1,79,1,79,1,79,3,79,1711,
  	8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1720,8,80,1,81,1,81,3,81,
  	1724,8,81,1,81,1,81,1,81,1,81,3,81,1730,8,81,3,81,1732,8,81,1,82,1,82,
  	3,82,1736,8,82,1,83,1,83,1,83,1,84,1,84,1,84,1,85,1,85,1,85,1,86,1,86,
  	1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1761,
  	8,87,3,87,1763,8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
  	1,88,3,88,1776,8,88,3,88,1778,8,88,1,89,1,89,1,89,1,89,1,90,1,90,1,90,
  	1,90,1,90,3,90,1789,8,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1798,
  	8,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1808,8,91,3,91,1810,
  	8,91,1,92,1,92,1,92,1,92,1,92,5,92,1817,8,92,10,92,12,92,1820,9,92,1,
  	92,3,92,1823,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,5,92,1833,8,
  	92,10,92,12,92,1836,9,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
  	5,92,1847,8,92,10,92,12,92,1850,9,92,1,92,3,92,1853,8,92,1,92,1,92,1,
  	92,1,92,1,92,1,92,1,92,1,92,1,92,5,92,1864,8,92,10,92,12,92,1867,9,92,
  	1,92,1,92,1,92,3,92,1872,8,92,1,93,1,93,1,93,1,93,1,93,3,93,1879,8,93,
  	1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,4,94,1890,8,94,11,94,12,
  	94,1891,1,94,3,94,1895,8,94,1,94,3,94,1898,8,94,1,94,1,94,1,94,1,94,4,
  	94,1904,8,94,11,94,12,94,1905,1,94,3,94,1909,8,94,1,94,3,94,1912,8,94,
  	3,94,1914,8,94,1,95,1,95,1,95,1,95,3,95,1920,8,95,1,95,1,95,1,95,1,95,
  	1,95,1,95,3,95,1928,8,95,1,96,1,96,1,96,1,96,1,96,3,96,1935,8,96,1,96,
  	1,96,1,96,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,4,98,1950,
  	8,98,11,98,12,98,1951,1,98,1,98,1,99,1,99,1,99,3,99,1959,8,99,1,99,3,
  	99,1962,8,99,1,100,1,100,1,100,3,100,1967,8,100,1,100,1,100,1,100,1,101,
  	1,101,1,101,1,102,1,102,3,102,1977,8,102,1,103,1,103,3,103,1981,8,103,
  	1,104,1,104,1,104,1,104,1,105,1,105,1,105,5,105,1990,8,105,10,105,12,
  	105,1993,9,105,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,
  	2003,8,106,1,107,1,107,1,107,1,107,1,107,1,107,3,107,2011,8,107,1,108,
  	1,108,1,108,1,108,1,108,1,108,3,108,2019,8,108,1,109,1,109,1,109,1,109,
  	1,109,1,109,1,109,1,109,3,109,2029,8,109,1,110,1,110,1,110,3,110,2034,
  	8,110,1,111,1,111,1,111,3,111,2039,8,111,1,112,1,112,1,113,1,113,1,114,
  	1,114,1,115,1,115,1,116,1,116,1,117,1,117,1,118,1,118,1,118,1,118,1,119,
  	1,119,1,119,1,119,1,119,1,119,5,119,2063,8,119,10,119,12,119,2066,9,119,
  	1,120,1,120,1,120,1,120,1,121,1,121,3,121,2074,8,121,1,121,1,121,1,121,
  	3,121,2079,8,121,1,121,3,121,2082,8,121,1,122,1,122,1,122,3,122,2087,
  	8,122,1,123,1,123,1,123,5,123,2092,8,123,10,123,12,123,2095,9,123,1,123,
  	3,123,2098,8,123,1,124,1,124,3,124,2102,8,124,1,125,1,125,1,125,1,125,
  	3,125,2108,8,125,1,126,1,126,1,126,1,126,1,126,3,126,2115,8,126,1,126,
  	1,126,1,126,1,126,1,126,1,126,1,126,3,126,2124,8,126,1,126,1,126,1,126,
  	1,126,1,126,3,126,2131,8,126,1,126,1,126,3,126,2135,8,126,1,127,1,127,
  	1,127,5,127,2140,8,127,10,127,12,127,2143,9,127,1,128,1,128,3,128,2147,
  	8,128,1,128,1,128,1,128,1,129,1,129,1,129,1,130,1,130,1,130,1,130,1,130,
  	1,130,1,130,1,130,3,130,2163,8,130,1,130,1,130,1,130,1,130,1,130,1,130,
  	3,130,2171,8,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,3,130,
  	2181,8,130,1,130,1,130,3,130,2185,8,130,1,131,1,131,1,131,5,131,2190,
  	8,131,10,131,12,131,2193,9,131,1,132,1,132,1,132,5,132,2198,8,132,10,
  	132,12,132,2201,9,132,1,133,1,133,1,133,1,133,1,134,1,134,1,134,3,134,
  	2210,8,134,1,134,1,134,1,134,1,135,1,135,1,135,1,135,1,136,1,136,1,136,
  	5,136,2222,8,136,10,136,12,136,2225,9,136,1,136,3,136,2228,8,136,1,137,
  	1,137,3,137,2232,8,137,1,137,1,137,1,137,1,137,3,137,2238,8,137,1,138,
  	1,138,1,138,1,139,1,139,1,139,5,139,2246,8,139,10,139,12,139,2249,9,139,
  	1,139,3,139,2252,8,139,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,
  	3,140,2262,8,140,1,141,1,141,1,141,1,141,1,141,3,141,2269,8,141,3,141,
  	2271,8,141,1,142,1,142,1,142,5,142,2276,8,142,10,142,12,142,2279,9,142,
  	1,142,3,142,2282,8,142,1,143,1,143,1,143,1,143,3,143,2288,8,143,1,144,
  	1,144,1,144,5,144,2293,8,144,10,144,12,144,2296,9,144,1,144,3,144,2299,
  	8,144,1,145,1,145,1,145,3,145,2304,8,145,1,146,1,146,1,146,1,146,1,147,
  	1,147,3,147,2312,8,147,1,148,1,148,1,148,5,148,2317,8,148,10,148,12,148,
  	2320,9,148,1,149,1,149,1,149,5,149,2325,8,149,10,149,12,149,2328,9,149,
  	1,150,1,150,1,150,3,150,2333,8,150,1,151,1,151,5,151,2337,8,151,10,151,
  	12,151,2340,9,151,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,
  	1,152,3,152,2352,8,152,1,153,1,153,1,153,1,154,1,154,1,154,1,154,3,154,
  	2361,8,154,1,155,1,155,1,155,1,156,1,156,1,156,1,157,1,157,1,157,1,158,
  	1,158,1,158,1,159,1,159,1,159,1,159,1,160,1,160,1,160,1,161,1,161,1,161,
  	1,161,1,162,1,162,1,162,1,163,1,163,1,163,1,163,1,163,1,163,5,163,2395,
  	8,163,10,163,12,163,2398,9,163,1,164,1,164,1,164,1,164,1,164,1,164,5,
  	164,2406,8,164,10,164,12,164,2409,9,164,1,165,1,165,1,165,1,165,1,165,
  	1,165,5,165,2417,8,165,10,165,12,165,2420,9,165,1,166,1,166,1,166,1,166,
  	1,166,1,166,1,166,1,166,1,166,5,166,2431,8,166,10,166,12,166,2434,9,166,
  	1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,5,167,2445,8,167,
  	10,167,12,167,2448,9,167,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,
  	168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,5,168,
  	2468,8,168,10,168,12,168,2471,9,168,1,169,1,169,1,169,1,169,1,169,1,169,
  	1,169,3,169,2480,8,169,1,170,1,170,1,170,1,170,1,170,3,170,2487,8,170,
  	1,171,1,171,1,171,3,171,2492,8,171,1,172,1,172,1,172,1,172,1,172,1,172,
  	1,172,1,172,1,172,1,172,1,172,3,172,2505,8,172,1,172,1,172,1,172,1,172,
  	1,172,1,172,5,172,2513,8,172,10,172,12,172,2516,9,172,1,173,1,173,3,173,
  	2520,8,173,1,173,1,173,1,173,3,173,2525,8,173,5,173,2527,8,173,10,173,
  	12,173,2530,9,173,1,173,3,173,2533,8,173,1,174,3,174,2536,8,174,1,174,
  	1,174,3,174,2540,8,174,1,174,1,174,3,174,2544,8,174,3,174,2546,8,174,
  	1,174,3,174,2549,8,174,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
  	1,175,1,175,3,175,2561,8,175,1,175,1,175,3,175,2565,8,175,1,175,1,175,
  	1,175,1,175,3,175,2571,8,175,1,175,3,175,2574,8,175,1,176,1,176,1,176,
  	3,176,2579,8,176,1,176,1,176,1,177,1,177,3,177,2585,8,177,1,177,1,177,
  	1,177,1,178,1,178,1,179,1,179,5,179,2594,8,179,10,179,12,179,2597,9,179,
  	1,179,5,179,2600,8,179,10,179,12,179,2603,9,179,1,179,3,179,2606,8,179,
  	1,179,1,179,5,179,2610,8,179,10,179,12,179,2613,9,179,1,179,3,179,2616,
  	8,179,1,179,4,179,2619,8,179,11,179,12,179,2620,1,179,5,179,2624,8,179,
  	10,179,12,179,2627,9,179,1,179,3,179,2630,8,179,1,179,4,179,2633,8,179,
  	11,179,12,179,2634,1,179,3,179,2638,8,179,1,179,3,179,2641,8,179,1,180,
  	4,180,2644,8,180,11,180,12,180,2645,1,180,1,180,3,180,2650,8,180,1,181,
  	5,181,2653,8,181,10,181,12,181,2656,9,181,1,181,4,181,2659,8,181,11,181,
  	12,181,2660,1,181,1,181,3,181,2665,8,181,1,182,1,182,1,182,5,182,2670,
  	8,182,10,182,12,182,2673,9,182,1,182,3,182,2676,8,182,1,182,1,182,1,182,
  	4,182,2681,8,182,11,182,12,182,2682,1,182,3,182,2686,8,182,1,182,3,182,
  	2689,8,182,1,183,1,183,1,183,1,184,1,184,3,184,2696,8,184,1,185,1,185,
  	1,185,3,185,2701,8,185,1,186,1,186,3,186,2705,8,186,1,186,3,186,2708,
  	8,186,1,187,1,187,1,188,1,188,3,188,2714,8,188,1,189,1,189,3,189,2718,
  	8,189,1,190,1,190,3,190,2722,8,190,1,191,1,191,3,191,2726,8,191,1,192,
  	1,192,1,192,3,192,2731,8,192,1,193,1,193,1,193,3,193,2736,8,193,1,194,
  	1,194,1,194,3,194,2741,8,194,1,195,1,195,1,195,3,195,2746,8,195,1,196,
  	1,196,1,196,3,196,2751,8,196,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
  	1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
  	1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
  	1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
  	1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
  	1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
  	1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
  	1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
  	1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
  	1,197,1,197,1,197,4,197,2859,8,197,11,197,12,197,2860,1,198,1,198,1,198,
  	3,198,2866,8,198,1,198,3,198,2869,8,198,1,198,3,198,2872,8,198,1,198,
  	3,198,2875,8,198,1,198,1,198,1,199,1,199,1,199,1,200,1,200,5,200,2884,
  	8,200,10,200,12,200,2887,9,200,1,201,1,201,3,201,2891,8,201,1,202,1,202,
  	5,202,2895,8,202,10,202,12,202,2898,9,202,1,202,1,202,1,202,5,202,2903,
  	8,202,10,202,12,202,2906,9,202,1,202,1,202,1,202,5,202,2911,8,202,10,
  	202,12,202,2914,9,202,1,202,1,202,1,202,5,202,2919,8,202,10,202,12,202,
  	2922,9,202,1,202,3,202,2925,8,202,1,203,1,203,1,204,1,204,4,204,2931,
  	8,204,11,204,12,204,2932,1,205,1,205,3,205,2937,8,205,1,205,1,205,1,206,
  	1,206,1,206,1,206,1,206,3,206,2946,8,206,1,206,1,206,1,207,1,207,1,207,
  	1,207,1,208,1,208,3,208,2956,8,208,1,208,1,208,1,209,1,209,1,209,5,209,
  	2963,8,209,10,209,12,209,2966,9,209,1,209,3,209,2969,8,209,1,210,1,210,
  	1,210,3,210,2974,8,210,1,211,1,211,1,211,1,211,1,212,4,212,2981,8,212,
  	11,212,12,212,2982,1,213,3,213,2986,8,213,1,213,1,213,1,213,1,213,1,213,
  	1,213,5,213,2994,8,213,10,213,12,213,2997,9,213,1,214,1,214,1,214,1,214,
  	1,214,1,215,1,215,1,215,1,215,1,215,1,216,1,216,1,216,3,216,3012,8,216,
  	1,216,1,216,1,216,1,217,1,217,1,217,1,217,1,217,1,218,1,218,3,218,3024,
  	8,218,1,219,1,219,1,219,5,219,3029,8,219,10,219,12,219,3032,9,219,1,219,
  	1,219,3,219,3036,8,219,1,219,3,219,3039,8,219,1,220,1,220,1,220,1,220,
  	3,220,3045,8,220,1,221,1,221,1,221,5,221,3050,8,221,10,221,12,221,3053,
  	9,221,1,221,1,221,1,221,1,221,5,221,3059,8,221,10,221,12,221,3062,9,221,
  	1,221,1,221,1,221,5,221,3067,8,221,10,221,12,221,3070,9,221,1,221,1,221,
  	1,221,5,221,3075,8,221,10,221,12,221,3078,9,221,3,221,3080,8,221,1,222,
  	1,222,1,222,1,223,1,223,1,223,1,223,1,223,3,223,3090,8,223,1,224,1,224,
  	1,224,1,224,1,224,1,224,3,224,3098,8,224,1,225,1,225,1,225,5,225,3103,
  	8,225,10,225,12,225,3106,9,225,1,225,3,225,3109,8,225,1,226,1,226,1,226,
  	5,226,3114,8,226,10,226,12,226,3117,9,226,1,226,3,226,3120,8,226,1,227,
  	1,227,1,227,4,227,3125,8,227,11,227,12,227,3126,1,227,3,227,3130,8,227,
  	1,227,1,227,1,227,3,227,3135,8,227,1,228,1,228,1,228,3,228,3140,8,228,
  	1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,3,229,3152,
  	8,229,1,230,1,230,1,230,1,230,1,230,1,230,1,230,3,230,3161,8,230,1,230,
  	1,230,1,230,3,230,3166,8,230,1,230,3,230,3169,8,230,1,231,1,231,1,231,
  	1,231,1,231,1,231,3,231,3177,8,231,1,232,1,232,1,232,1,232,1,232,1,232,
  	1,232,1,232,1,232,3,232,3188,8,232,1,233,1,233,1,233,1,233,1,233,1,233,
  	1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,3206,
  	8,233,1,233,5,233,3209,8,233,10,233,12,233,3212,9,233,1,234,1,234,1,234,
  	5,234,3217,8,234,10,234,12,234,3220,9,234,1,234,3,234,3223,8,234,1,235,
  	1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,3,235,3235,8,235,
  	1,236,1,236,1,236,3,236,3240,8,236,1,236,1,236,1,236,3,236,3245,8,236,
  	1,236,3,236,3248,8,236,1,237,1,237,1,237,5,237,3253,8,237,10,237,12,237,
  	3256,9,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
  	5,237,3268,8,237,10,237,12,237,3271,9,237,1,237,1,237,1,237,1,237,1,237,
  	1,237,1,237,5,237,3280,8,237,10,237,12,237,3283,9,237,1,237,1,237,1,237,
  	1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
  	1,237,1,237,5,237,3302,8,237,10,237,12,237,3305,9,237,3,237,3307,8,237,
  	1,238,1,238,1,239,1,239,1,239,0,12,28,56,130,238,326,328,330,332,334,
  	336,344,466,240,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
  	40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
  	86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
  	124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
  	160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
  	196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
  	232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
  	268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,
  	304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,
  	340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,
  	376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,
  	412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,
  	448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,0,5,2,
  	1,82,82,124,124,1,0,100,106,1,0,109,121,2,0,74,74,76,76,1,0,55,58,3732,
  	0,480,1,0,0,0,2,486,1,0,0,0,4,504,1,0,0,0,6,591,1,0,0,0,8,593,1,0,0,0,
  	10,601,1,0,0,0,12,613,1,0,0,0,14,615,1,0,0,0,16,618,1,0,0,0,18,621,1,
  	0,0,0,20,640,1,0,0,0,22,651,1,0,0,0,24,653,1,0,0,0,26,667,1,0,0,0,28,
  	671,1,0,0,0,30,695,1,0,0,0,32,765,1,0,0,0,34,773,1,0,0,0,36,983,1,0,0,
  	0,38,1094,1,0,0,0,40,1096,1,0,0,0,42,1104,1,0,0,0,44,1118,1,0,0,0,46,
  	1120,1,0,0,0,48,1132,1,0,0,0,50,1144,1,0,0,0,52,1148,1,0,0,0,54,1154,
  	1,0,0,0,56,1156,1,0,0,0,58,1181,1,0,0,0,60,1188,1,0,0,0,62,1190,1,0,0,
  	0,64,1201,1,0,0,0,66,1207,1,0,0,0,68,1237,1,0,0,0,70,1241,1,0,0,0,72,
  	1246,1,0,0,0,74,1257,1,0,0,0,76,1262,1,0,0,0,78,1264,1,0,0,0,80,1274,
  	1,0,0,0,82,1292,1,0,0,0,84,1298,1,0,0,0,86,1305,1,0,0,0,88,1307,1,0,0,
  	0,90,1346,1,0,0,0,92,1356,1,0,0,0,94,1395,1,0,0,0,96,1399,1,0,0,0,98,
  	1401,1,0,0,0,100,1403,1,0,0,0,102,1414,1,0,0,0,104,1416,1,0,0,0,106,1425,
  	1,0,0,0,108,1434,1,0,0,0,110,1437,1,0,0,0,112,1439,1,0,0,0,114,1447,1,
  	0,0,0,116,1449,1,0,0,0,118,1471,1,0,0,0,120,1482,1,0,0,0,122,1484,1,0,
  	0,0,124,1492,1,0,0,0,126,1497,1,0,0,0,128,1505,1,0,0,0,130,1510,1,0,0,
  	0,132,1527,1,0,0,0,134,1533,1,0,0,0,136,1538,1,0,0,0,138,1542,1,0,0,0,
  	140,1558,1,0,0,0,142,1563,1,0,0,0,144,1585,1,0,0,0,146,1636,1,0,0,0,148,
  	1639,1,0,0,0,150,1650,1,0,0,0,152,1695,1,0,0,0,154,1697,1,0,0,0,156,1704,
  	1,0,0,0,158,1710,1,0,0,0,160,1719,1,0,0,0,162,1731,1,0,0,0,164,1733,1,
  	0,0,0,166,1737,1,0,0,0,168,1740,1,0,0,0,170,1743,1,0,0,0,172,1746,1,0,
  	0,0,174,1762,1,0,0,0,176,1777,1,0,0,0,178,1779,1,0,0,0,180,1783,1,0,0,
  	0,182,1809,1,0,0,0,184,1871,1,0,0,0,186,1878,1,0,0,0,188,1913,1,0,0,0,
  	190,1927,1,0,0,0,192,1929,1,0,0,0,194,1939,1,0,0,0,196,1943,1,0,0,0,198,
  	1961,1,0,0,0,200,1963,1,0,0,0,202,1971,1,0,0,0,204,1976,1,0,0,0,206,1980,
  	1,0,0,0,208,1982,1,0,0,0,210,1986,1,0,0,0,212,2002,1,0,0,0,214,2010,1,
  	0,0,0,216,2018,1,0,0,0,218,2028,1,0,0,0,220,2033,1,0,0,0,222,2038,1,0,
  	0,0,224,2040,1,0,0,0,226,2042,1,0,0,0,228,2044,1,0,0,0,230,2046,1,0,0,
  	0,232,2048,1,0,0,0,234,2050,1,0,0,0,236,2052,1,0,0,0,238,2056,1,0,0,0,
  	240,2067,1,0,0,0,242,2081,1,0,0,0,244,2083,1,0,0,0,246,2088,1,0,0,0,248,
  	2101,1,0,0,0,250,2107,1,0,0,0,252,2134,1,0,0,0,254,2136,1,0,0,0,256,2146,
  	1,0,0,0,258,2151,1,0,0,0,260,2184,1,0,0,0,262,2186,1,0,0,0,264,2194,1,
  	0,0,0,266,2202,1,0,0,0,268,2206,1,0,0,0,270,2214,1,0,0,0,272,2218,1,0,
  	0,0,274,2237,1,0,0,0,276,2239,1,0,0,0,278,2242,1,0,0,0,280,2261,1,0,0,
  	0,282,2270,1,0,0,0,284,2272,1,0,0,0,286,2287,1,0,0,0,288,2289,1,0,0,0,
  	290,2303,1,0,0,0,292,2305,1,0,0,0,294,2311,1,0,0,0,296,2313,1,0,0,0,298,
  	2321,1,0,0,0,300,2332,1,0,0,0,302,2334,1,0,0,0,304,2351,1,0,0,0,306,2353,
  	1,0,0,0,308,2360,1,0,0,0,310,2362,1,0,0,0,312,2365,1,0,0,0,314,2368,1,
  	0,0,0,316,2371,1,0,0,0,318,2374,1,0,0,0,320,2378,1,0,0,0,322,2381,1,0,
  	0,0,324,2385,1,0,0,0,326,2388,1,0,0,0,328,2399,1,0,0,0,330,2410,1,0,0,
  	0,332,2421,1,0,0,0,334,2435,1,0,0,0,336,2449,1,0,0,0,338,2479,1,0,0,0,
  	340,2486,1,0,0,0,342,2491,1,0,0,0,344,2493,1,0,0,0,346,2519,1,0,0,0,348,
  	2548,1,0,0,0,350,2573,1,0,0,0,352,2575,1,0,0,0,354,2582,1,0,0,0,356,2589,
  	1,0,0,0,358,2640,1,0,0,0,360,2643,1,0,0,0,362,2654,1,0,0,0,364,2688,1,
  	0,0,0,366,2690,1,0,0,0,368,2693,1,0,0,0,370,2697,1,0,0,0,372,2702,1,0,
  	0,0,374,2709,1,0,0,0,376,2713,1,0,0,0,378,2717,1,0,0,0,380,2721,1,0,0,
  	0,382,2725,1,0,0,0,384,2730,1,0,0,0,386,2735,1,0,0,0,388,2740,1,0,0,0,
  	390,2745,1,0,0,0,392,2750,1,0,0,0,394,2858,1,0,0,0,396,2862,1,0,0,0,398,
  	2878,1,0,0,0,400,2881,1,0,0,0,402,2890,1,0,0,0,404,2924,1,0,0,0,406,2926,
  	1,0,0,0,408,2930,1,0,0,0,410,2934,1,0,0,0,412,2940,1,0,0,0,414,2949,1,
  	0,0,0,416,2953,1,0,0,0,418,2959,1,0,0,0,420,2973,1,0,0,0,422,2975,1,0,
  	0,0,424,2980,1,0,0,0,426,2985,1,0,0,0,428,2998,1,0,0,0,430,3003,1,0,0,
  	0,432,3008,1,0,0,0,434,3016,1,0,0,0,436,3021,1,0,0,0,438,3038,1,0,0,0,
  	440,3044,1,0,0,0,442,3079,1,0,0,0,444,3081,1,0,0,0,446,3089,1,0,0,0,448,
  	3097,1,0,0,0,450,3099,1,0,0,0,452,3110,1,0,0,0,454,3134,1,0,0,0,456,3139,
  	1,0,0,0,458,3151,1,0,0,0,460,3168,1,0,0,0,462,3176,1,0,0,0,464,3187,1,
  	0,0,0,466,3189,1,0,0,0,468,3213,1,0,0,0,470,3234,1,0,0,0,472,3247,1,0,
  	0,0,474,3306,1,0,0,0,476,3308,1,0,0,0,478,3310,1,0,0,0,480,481,3,2,1,
  	0,481,482,5,0,0,1,482,1,1,0,0,0,483,485,5,124,0,0,484,483,1,0,0,0,485,
  	488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,498,1,0,0,0,488,486,1,
  	0,0,0,489,493,3,4,2,0,490,492,5,124,0,0,491,490,1,0,0,0,492,495,1,0,0,
  	0,493,491,1,0,0,0,493,494,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,496,
  	489,1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,3,1,0,
  	0,0,500,498,1,0,0,0,501,505,3,6,3,0,502,505,3,32,16,0,503,505,3,70,35,
  	0,504,501,1,0,0,0,504,502,1,0,0,0,504,503,1,0,0,0,505,5,1,0,0,0,506,508,
  	5,1,0,0,507,506,1,0,0,0,508,511,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,
  	0,510,512,1,0,0,0,511,509,1,0,0,0,512,513,3,26,13,0,513,514,5,71,0,0,
  	514,517,3,8,4,0,515,516,5,122,0,0,516,518,3,280,140,0,517,515,1,0,0,0,
  	517,518,1,0,0,0,518,526,1,0,0,0,519,527,5,82,0,0,520,522,5,124,0,0,521,
  	520,1,0,0,0,522,523,1,0,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,527,1,
  	0,0,0,525,527,5,0,0,1,526,519,1,0,0,0,526,521,1,0,0,0,526,525,1,0,0,0,
  	527,531,1,0,0,0,528,530,5,2,0,0,529,528,1,0,0,0,530,533,1,0,0,0,531,529,
  	1,0,0,0,531,532,1,0,0,0,532,592,1,0,0,0,533,531,1,0,0,0,534,536,5,1,0,
  	0,535,534,1,0,0,0,536,539,1,0,0,0,537,535,1,0,0,0,537,538,1,0,0,0,538,
  	540,1,0,0,0,539,537,1,0,0,0,540,541,3,26,13,0,541,542,5,71,0,0,542,545,
  	3,8,4,0,543,544,5,84,0,0,544,546,3,280,140,0,545,543,1,0,0,0,545,546,
  	1,0,0,0,546,554,1,0,0,0,547,555,5,82,0,0,548,550,5,124,0,0,549,548,1,
  	0,0,0,550,551,1,0,0,0,551,549,1,0,0,0,551,552,1,0,0,0,552,555,1,0,0,0,
  	553,555,5,0,0,1,554,547,1,0,0,0,554,549,1,0,0,0,554,553,1,0,0,0,555,559,
  	1,0,0,0,556,558,5,2,0,0,557,556,1,0,0,0,558,561,1,0,0,0,559,557,1,0,0,
  	0,559,560,1,0,0,0,560,592,1,0,0,0,561,559,1,0,0,0,562,564,5,1,0,0,563,
  	562,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,568,1,
  	0,0,0,567,565,1,0,0,0,568,569,3,26,13,0,569,570,5,71,0,0,570,574,3,8,
  	4,0,571,572,5,81,0,0,572,573,5,81,0,0,573,575,3,280,140,0,574,571,1,0,
  	0,0,574,575,1,0,0,0,575,583,1,0,0,0,576,584,5,82,0,0,577,579,5,124,0,
  	0,578,577,1,0,0,0,579,580,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,
  	584,1,0,0,0,582,584,5,0,0,1,583,576,1,0,0,0,583,578,1,0,0,0,583,582,1,
  	0,0,0,584,588,1,0,0,0,585,587,5,2,0,0,586,585,1,0,0,0,587,590,1,0,0,0,
  	588,586,1,0,0,0,588,589,1,0,0,0,589,592,1,0,0,0,590,588,1,0,0,0,591,509,
  	1,0,0,0,591,537,1,0,0,0,591,565,1,0,0,0,592,7,1,0,0,0,593,598,3,10,5,
  	0,594,595,5,87,0,0,595,597,3,10,5,0,596,594,1,0,0,0,597,600,1,0,0,0,598,
  	596,1,0,0,0,598,599,1,0,0,0,599,9,1,0,0,0,600,598,1,0,0,0,601,605,3,12,
  	6,0,602,604,3,12,6,0,603,602,1,0,0,0,604,607,1,0,0,0,605,603,1,0,0,0,
  	605,606,1,0,0,0,606,11,1,0,0,0,607,605,1,0,0,0,608,614,3,22,11,0,609,
  	614,3,14,7,0,610,614,3,16,8,0,611,614,3,18,9,0,612,614,3,20,10,0,613,
  	608,1,0,0,0,613,609,1,0,0,0,613,610,1,0,0,0,613,611,1,0,0,0,613,612,1,
  	0,0,0,614,13,1,0,0,0,615,616,3,22,11,0,616,617,5,77,0,0,617,15,1,0,0,
  	0,618,619,3,22,11,0,619,620,5,92,0,0,620,17,1,0,0,0,621,622,3,22,11,0,
  	622,623,5,72,0,0,623,19,1,0,0,0,624,625,3,22,11,0,625,626,5,98,0,0,626,
  	627,3,280,140,0,627,628,5,99,0,0,628,641,1,0,0,0,629,630,3,22,11,0,630,
  	632,5,98,0,0,631,633,3,280,140,0,632,631,1,0,0,0,632,633,1,0,0,0,633,
  	634,1,0,0,0,634,636,5,80,0,0,635,637,3,280,140,0,636,635,1,0,0,0,636,
  	637,1,0,0,0,637,638,1,0,0,0,638,639,5,99,0,0,639,641,1,0,0,0,640,624,
  	1,0,0,0,640,629,1,0,0,0,641,21,1,0,0,0,642,652,3,24,12,0,643,652,3,406,
  	203,0,644,652,5,8,0,0,645,652,3,28,14,0,646,652,3,30,15,0,647,648,5,78,
  	0,0,648,649,3,8,4,0,649,650,5,79,0,0,650,652,1,0,0,0,651,642,1,0,0,0,
  	651,643,1,0,0,0,651,644,1,0,0,0,651,645,1,0,0,0,651,646,1,0,0,0,651,647,
  	1,0,0,0,652,23,1,0,0,0,653,662,5,100,0,0,654,655,3,478,239,0,655,656,
  	5,81,0,0,656,658,1,0,0,0,657,654,1,0,0,0,657,658,1,0,0,0,658,659,1,0,
  	0,0,659,660,3,478,239,0,660,661,5,81,0,0,661,663,1,0,0,0,662,657,1,0,
  	0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,665,3,478,239,0,665,666,5,101,
  	0,0,666,25,1,0,0,0,667,668,5,100,0,0,668,669,3,478,239,0,669,670,5,101,
  	0,0,670,27,1,0,0,0,671,672,6,14,-1,0,672,673,3,478,239,0,673,692,1,0,
  	0,0,674,675,10,4,0,0,675,676,5,76,0,0,676,691,3,478,239,0,677,678,10,
  	3,0,0,678,679,5,85,0,0,679,680,3,346,173,0,680,681,5,86,0,0,681,691,1,
  	0,0,0,682,683,10,2,0,0,683,691,3,432,216,0,684,685,10,1,0,0,685,687,5,
  	78,0,0,686,688,3,436,218,0,687,686,1,0,0,0,687,688,1,0,0,0,688,689,1,
  	0,0,0,689,691,5,79,0,0,690,674,1,0,0,0,690,677,1,0,0,0,690,682,1,0,0,
  	0,690,684,1,0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,1,0,0,0,693,
  	29,1,0,0,0,694,692,1,0,0,0,695,697,5,85,0,0,696,698,5,88,0,0,697,696,
  	1,0,0,0,697,698,1,0,0,0,698,699,1,0,0,0,699,700,3,406,203,0,700,701,5,
  	86,0,0,701,31,1,0,0,0,702,704,5,1,0,0,703,702,1,0,0,0,704,707,1,0,0,0,
  	705,703,1,0,0,0,705,706,1,0,0,0,706,708,1,0,0,0,707,705,1,0,0,0,708,709,
  	5,48,0,0,709,713,3,34,17,0,710,712,5,2,0,0,711,710,1,0,0,0,712,715,1,
  	0,0,0,713,711,1,0,0,0,713,714,1,0,0,0,714,766,1,0,0,0,715,713,1,0,0,0,
  	716,718,5,1,0,0,717,716,1,0,0,0,718,721,1,0,0,0,719,717,1,0,0,0,719,720,
  	1,0,0,0,720,722,1,0,0,0,721,719,1,0,0,0,722,723,5,54,0,0,723,731,3,48,
  	24,0,724,732,5,82,0,0,725,727,5,124,0,0,726,725,1,0,0,0,727,728,1,0,0,
  	0,728,726,1,0,0,0,728,729,1,0,0,0,729,732,1,0,0,0,730,732,5,0,0,1,731,
  	724,1,0,0,0,731,726,1,0,0,0,731,730,1,0,0,0,732,736,1,0,0,0,733,735,5,
  	2,0,0,734,733,1,0,0,0,735,738,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,
  	737,766,1,0,0,0,738,736,1,0,0,0,739,741,5,1,0,0,740,739,1,0,0,0,741,744,
  	1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,745,1,0,0,0,744,742,1,0,0,
  	0,745,746,5,53,0,0,746,754,3,48,24,0,747,755,5,82,0,0,748,750,5,124,0,
  	0,749,748,1,0,0,0,750,751,1,0,0,0,751,749,1,0,0,0,751,752,1,0,0,0,752,
  	755,1,0,0,0,753,755,5,0,0,1,754,747,1,0,0,0,754,749,1,0,0,0,754,753,1,
  	0,0,0,755,759,1,0,0,0,756,758,5,2,0,0,757,756,1,0,0,0,758,761,1,0,0,0,
  	759,757,1,0,0,0,759,760,1,0,0,0,760,766,1,0,0,0,761,759,1,0,0,0,762,763,
  	3,34,17,0,763,764,5,82,0,0,764,766,1,0,0,0,765,705,1,0,0,0,765,719,1,
  	0,0,0,765,742,1,0,0,0,765,762,1,0,0,0,766,33,1,0,0,0,767,768,3,40,20,
  	0,768,769,5,108,0,0,769,770,3,40,20,0,770,771,7,0,0,0,771,774,1,0,0,0,
  	772,774,3,36,18,0,773,767,1,0,0,0,773,772,1,0,0,0,774,35,1,0,0,0,775,
  	776,5,51,0,0,776,777,3,26,13,0,777,778,5,33,0,0,778,779,3,56,28,0,779,
  	786,5,81,0,0,780,781,5,124,0,0,781,782,5,1,0,0,782,783,3,36,18,0,783,
  	784,5,2,0,0,784,787,1,0,0,0,785,787,3,36,18,0,786,780,1,0,0,0,786,785,
  	1,0,0,0,787,984,1,0,0,0,788,789,5,52,0,0,789,790,3,26,13,0,790,791,5,
  	33,0,0,791,792,3,56,28,0,792,799,5,81,0,0,793,794,5,124,0,0,794,795,5,
  	1,0,0,795,796,3,36,18,0,796,797,5,2,0,0,797,800,1,0,0,0,798,800,3,36,
  	18,0,799,793,1,0,0,0,799,798,1,0,0,0,800,984,1,0,0,0,801,802,5,55,0,0,
  	802,803,5,78,0,0,803,804,3,38,19,0,804,807,5,28,0,0,805,808,3,26,13,0,
  	806,808,3,478,239,0,807,805,1,0,0,0,807,806,1,0,0,0,808,809,1,0,0,0,809,
  	810,5,33,0,0,810,811,3,54,27,0,811,819,5,79,0,0,812,820,5,82,0,0,813,
  	815,5,124,0,0,814,813,1,0,0,0,815,816,1,0,0,0,816,814,1,0,0,0,816,817,
  	1,0,0,0,817,820,1,0,0,0,818,820,5,0,0,1,819,812,1,0,0,0,819,814,1,0,0,
  	0,819,818,1,0,0,0,820,984,1,0,0,0,821,822,5,55,0,0,822,823,5,78,0,0,823,
  	824,5,85,0,0,824,825,3,38,19,0,825,828,5,28,0,0,826,829,3,26,13,0,827,
  	829,3,478,239,0,828,826,1,0,0,0,828,827,1,0,0,0,829,830,1,0,0,0,830,831,
  	5,33,0,0,831,832,3,54,27,0,832,833,5,86,0,0,833,841,5,79,0,0,834,842,
  	5,82,0,0,835,837,5,124,0,0,836,835,1,0,0,0,837,838,1,0,0,0,838,836,1,
  	0,0,0,838,839,1,0,0,0,839,842,1,0,0,0,840,842,5,0,0,1,841,834,1,0,0,0,
  	841,836,1,0,0,0,841,840,1,0,0,0,842,984,1,0,0,0,843,844,5,55,0,0,844,
  	845,5,78,0,0,845,846,5,78,0,0,846,847,3,38,19,0,847,850,5,28,0,0,848,
  	851,3,26,13,0,849,851,3,478,239,0,850,848,1,0,0,0,850,849,1,0,0,0,851,
  	852,1,0,0,0,852,853,5,33,0,0,853,854,3,54,27,0,854,855,5,86,0,0,855,863,
  	5,79,0,0,856,864,5,82,0,0,857,859,5,124,0,0,858,857,1,0,0,0,859,860,1,
  	0,0,0,860,858,1,0,0,0,860,861,1,0,0,0,861,864,1,0,0,0,862,864,5,0,0,1,
  	863,856,1,0,0,0,863,858,1,0,0,0,863,862,1,0,0,0,864,984,1,0,0,0,865,866,
  	5,55,0,0,866,867,5,78,0,0,867,868,5,98,0,0,868,869,3,38,19,0,869,872,
  	5,28,0,0,870,873,3,26,13,0,871,873,3,478,239,0,872,870,1,0,0,0,872,871,
  	1,0,0,0,873,874,1,0,0,0,874,875,5,33,0,0,875,876,3,54,27,0,876,877,5,
  	99,0,0,877,885,5,79,0,0,878,886,5,82,0,0,879,881,5,124,0,0,880,879,1,
  	0,0,0,881,882,1,0,0,0,882,880,1,0,0,0,882,883,1,0,0,0,883,886,1,0,0,0,
  	884,886,5,0,0,1,885,878,1,0,0,0,885,880,1,0,0,0,885,884,1,0,0,0,886,984,
  	1,0,0,0,887,888,5,56,0,0,888,889,5,78,0,0,889,890,3,38,19,0,890,893,5,
  	28,0,0,891,894,3,26,13,0,892,894,3,478,239,0,893,891,1,0,0,0,893,892,
  	1,0,0,0,894,895,1,0,0,0,895,896,5,33,0,0,896,897,3,54,27,0,897,905,5,
  	79,0,0,898,906,5,82,0,0,899,901,5,124,0,0,900,899,1,0,0,0,901,902,1,0,
  	0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,906,1,0,0,0,904,906,5,0,0,1,905,
  	898,1,0,0,0,905,900,1,0,0,0,905,904,1,0,0,0,906,984,1,0,0,0,907,908,5,
  	56,0,0,908,909,5,78,0,0,909,910,5,78,0,0,910,911,3,38,19,0,911,914,5,
  	28,0,0,912,915,3,26,13,0,913,915,3,478,239,0,914,912,1,0,0,0,914,913,
  	1,0,0,0,915,916,1,0,0,0,916,917,5,33,0,0,917,918,3,54,27,0,918,919,5,
  	79,0,0,919,927,5,79,0,0,920,928,5,82,0,0,921,923,5,124,0,0,922,921,1,
  	0,0,0,923,924,1,0,0,0,924,922,1,0,0,0,924,925,1,0,0,0,925,928,1,0,0,0,
  	926,928,5,0,0,1,927,920,1,0,0,0,927,922,1,0,0,0,927,926,1,0,0,0,928,984,
  	1,0,0,0,929,930,5,56,0,0,930,931,5,78,0,0,931,932,5,85,0,0,932,933,3,
  	38,19,0,933,936,5,28,0,0,934,937,3,26,13,0,935,937,3,478,239,0,936,934,
  	1,0,0,0,936,935,1,0,0,0,937,938,1,0,0,0,938,939,5,33,0,0,939,940,3,54,
  	27,0,940,941,5,86,0,0,941,949,5,79,0,0,942,950,5,82,0,0,943,945,5,124,
  	0,0,944,943,1,0,0,0,945,946,1,0,0,0,946,944,1,0,0,0,946,947,1,0,0,0,947,
  	950,1,0,0,0,948,950,5,0,0,1,949,942,1,0,0,0,949,944,1,0,0,0,949,948,1,
  	0,0,0,950,984,1,0,0,0,951,952,5,56,0,0,952,953,5,78,0,0,953,954,5,98,
  	0,0,954,955,3,38,19,0,955,958,5,28,0,0,956,959,3,26,13,0,957,959,3,478,
  	239,0,958,956,1,0,0,0,958,957,1,0,0,0,959,960,1,0,0,0,960,961,5,33,0,
  	0,961,962,3,54,27,0,962,963,5,99,0,0,963,971,5,79,0,0,964,972,5,82,0,
  	0,965,967,5,124,0,0,966,965,1,0,0,0,967,968,1,0,0,0,968,966,1,0,0,0,968,
  	969,1,0,0,0,969,972,1,0,0,0,970,972,5,0,0,1,971,964,1,0,0,0,971,966,1,
  	0,0,0,971,970,1,0,0,0,972,984,1,0,0,0,973,981,3,40,20,0,974,982,5,82,
  	0,0,975,977,5,124,0,0,976,975,1,0,0,0,977,978,1,0,0,0,978,976,1,0,0,0,
  	978,979,1,0,0,0,979,982,1,0,0,0,980,982,5,0,0,1,981,974,1,0,0,0,981,976,
  	1,0,0,0,981,980,1,0,0,0,982,984,1,0,0,0,983,775,1,0,0,0,983,788,1,0,0,
  	0,983,801,1,0,0,0,983,821,1,0,0,0,983,843,1,0,0,0,983,865,1,0,0,0,983,
  	887,1,0,0,0,983,907,1,0,0,0,983,929,1,0,0,0,983,951,1,0,0,0,983,973,1,
  	0,0,0,984,37,1,0,0,0,985,986,5,55,0,0,986,987,5,78,0,0,987,988,3,38,19,
  	0,988,991,5,28,0,0,989,992,3,26,13,0,990,992,3,478,239,0,991,989,1,0,
  	0,0,991,990,1,0,0,0,992,993,1,0,0,0,993,994,5,33,0,0,994,995,3,54,27,
  	0,995,996,5,79,0,0,996,1095,1,0,0,0,997,998,5,55,0,0,998,999,5,78,0,0,
  	999,1000,5,85,0,0,1000,1001,3,38,19,0,1001,1004,5,28,0,0,1002,1005,3,
  	26,13,0,1003,1005,3,478,239,0,1004,1002,1,0,0,0,1004,1003,1,0,0,0,1005,
  	1006,1,0,0,0,1006,1007,5,33,0,0,1007,1008,3,54,27,0,1008,1009,5,86,0,
  	0,1009,1010,5,79,0,0,1010,1095,1,0,0,0,1011,1012,5,55,0,0,1012,1013,5,
  	78,0,0,1013,1014,5,78,0,0,1014,1015,3,38,19,0,1015,1018,5,28,0,0,1016,
  	1019,3,26,13,0,1017,1019,3,478,239,0,1018,1016,1,0,0,0,1018,1017,1,0,
  	0,0,1019,1020,1,0,0,0,1020,1021,5,33,0,0,1021,1022,3,54,27,0,1022,1023,
  	5,86,0,0,1023,1024,5,79,0,0,1024,1095,1,0,0,0,1025,1026,5,55,0,0,1026,
  	1027,5,78,0,0,1027,1028,5,98,0,0,1028,1029,3,38,19,0,1029,1032,5,28,0,
  	0,1030,1033,3,26,13,0,1031,1033,3,478,239,0,1032,1030,1,0,0,0,1032,1031,
  	1,0,0,0,1033,1034,1,0,0,0,1034,1035,5,33,0,0,1035,1036,3,54,27,0,1036,
  	1037,5,99,0,0,1037,1038,5,79,0,0,1038,1095,1,0,0,0,1039,1040,5,56,0,0,
  	1040,1041,5,78,0,0,1041,1042,3,38,19,0,1042,1045,5,28,0,0,1043,1046,3,
  	26,13,0,1044,1046,3,478,239,0,1045,1043,1,0,0,0,1045,1044,1,0,0,0,1046,
  	1047,1,0,0,0,1047,1048,5,33,0,0,1048,1049,3,54,27,0,1049,1050,5,79,0,
  	0,1050,1095,1,0,0,0,1051,1052,5,56,0,0,1052,1053,5,78,0,0,1053,1054,5,
  	78,0,0,1054,1055,3,38,19,0,1055,1058,5,28,0,0,1056,1059,3,26,13,0,1057,
  	1059,3,478,239,0,1058,1056,1,0,0,0,1058,1057,1,0,0,0,1059,1060,1,0,0,
  	0,1060,1061,5,33,0,0,1061,1062,3,54,27,0,1062,1063,5,79,0,0,1063,1064,
  	5,79,0,0,1064,1095,1,0,0,0,1065,1066,5,56,0,0,1066,1067,5,78,0,0,1067,
  	1068,5,85,0,0,1068,1069,3,38,19,0,1069,1072,5,28,0,0,1070,1073,3,26,13,
  	0,1071,1073,3,478,239,0,1072,1070,1,0,0,0,1072,1071,1,0,0,0,1073,1074,
  	1,0,0,0,1074,1075,5,33,0,0,1075,1076,3,54,27,0,1076,1077,5,86,0,0,1077,
  	1078,5,79,0,0,1078,1095,1,0,0,0,1079,1080,5,56,0,0,1080,1081,5,78,0,0,
  	1081,1082,5,98,0,0,1082,1083,3,38,19,0,1083,1086,5,28,0,0,1084,1087,3,
  	26,13,0,1085,1087,3,478,239,0,1086,1084,1,0,0,0,1086,1085,1,0,0,0,1087,
  	1088,1,0,0,0,1088,1089,5,33,0,0,1089,1090,3,54,27,0,1090,1091,5,99,0,
  	0,1091,1092,5,79,0,0,1092,1095,1,0,0,0,1093,1095,3,40,20,0,1094,985,1,
  	0,0,0,1094,997,1,0,0,0,1094,1011,1,0,0,0,1094,1025,1,0,0,0,1094,1039,
  	1,0,0,0,1094,1051,1,0,0,0,1094,1065,1,0,0,0,1094,1079,1,0,0,0,1094,1093,
  	1,0,0,0,1095,39,1,0,0,0,1096,1101,3,42,21,0,1097,1098,5,40,0,0,1098,1100,
  	3,42,21,0,1099,1097,1,0,0,0,1100,1103,1,0,0,0,1101,1099,1,0,0,0,1101,
  	1102,1,0,0,0,1102,41,1,0,0,0,1103,1101,1,0,0,0,1104,1109,3,44,22,0,1105,
  	1106,5,12,0,0,1106,1108,3,44,22,0,1107,1105,1,0,0,0,1108,1111,1,0,0,0,
  	1109,1107,1,0,0,0,1109,1110,1,0,0,0,1110,43,1,0,0,0,1111,1109,1,0,0,0,
  	1112,1119,3,46,23,0,1113,1114,5,78,0,0,1114,1115,3,34,17,0,1115,1116,
  	5,79,0,0,1116,1119,1,0,0,0,1117,1119,3,48,24,0,1118,1112,1,0,0,0,1118,
  	1113,1,0,0,0,1118,1117,1,0,0,0,1119,45,1,0,0,0,1120,1121,3,48,24,0,1121,
  	1122,7,1,0,0,1122,1123,3,48,24,0,1123,47,1,0,0,0,1124,1133,3,50,25,0,
  	1125,1133,3,300,150,0,1126,1127,3,300,150,0,1127,1128,5,31,0,0,1128,1129,
  	3,300,150,0,1129,1130,5,24,0,0,1130,1131,3,300,150,0,1131,1133,1,0,0,
  	0,1132,1124,1,0,0,0,1132,1125,1,0,0,0,1132,1126,1,0,0,0,1133,49,1,0,0,
  	0,1134,1135,5,87,0,0,1135,1136,3,56,28,0,1136,1137,5,87,0,0,1137,1145,
  	1,0,0,0,1138,1139,5,57,0,0,1139,1140,5,78,0,0,1140,1141,3,54,27,0,1141,
  	1142,5,79,0,0,1142,1145,1,0,0,0,1143,1145,3,52,26,0,1144,1134,1,0,0,0,
  	1144,1138,1,0,0,0,1144,1143,1,0,0,0,1145,51,1,0,0,0,1146,1149,3,54,27,
  	0,1147,1149,3,56,28,0,1148,1146,1,0,0,0,1148,1147,1,0,0,0,1149,53,1,0,
  	0,0,1150,1151,5,77,0,0,1151,1155,3,56,28,0,1152,1153,5,83,0,0,1153,1155,
  	3,56,28,0,1154,1150,1,0,0,0,1154,1152,1,0,0,0,1155,55,1,0,0,0,1156,1157,
  	6,28,-1,0,1157,1158,3,58,29,0,1158,1167,1,0,0,0,1159,1160,10,2,0,0,1160,
  	1161,5,76,0,0,1161,1166,3,58,29,0,1162,1163,10,1,0,0,1163,1164,5,75,0,
  	0,1164,1166,3,58,29,0,1165,1159,1,0,0,0,1165,1162,1,0,0,0,1166,1169,1,
  	0,0,0,1167,1165,1,0,0,0,1167,1168,1,0,0,0,1168,57,1,0,0,0,1169,1167,1,
  	0,0,0,1170,1171,3,60,30,0,1171,1172,5,85,0,0,1172,1173,3,66,33,0,1173,
  	1174,5,86,0,0,1174,1182,1,0,0,0,1175,1176,3,60,30,0,1176,1177,5,98,0,
  	0,1177,1178,3,62,31,0,1178,1179,5,99,0,0,1179,1182,1,0,0,0,1180,1182,
  	3,60,30,0,1181,1170,1,0,0,0,1181,1175,1,0,0,0,1181,1180,1,0,0,0,1182,
  	59,1,0,0,0,1183,1189,3,26,13,0,1184,1185,5,78,0,0,1185,1186,3,56,28,0,
  	1186,1187,5,79,0,0,1187,1189,1,0,0,0,1188,1183,1,0,0,0,1188,1184,1,0,
  	0,0,1189,61,1,0,0,0,1190,1195,3,64,32,0,1191,1192,5,80,0,0,1192,1194,
  	3,64,32,0,1193,1191,1,0,0,0,1194,1197,1,0,0,0,1195,1193,1,0,0,0,1195,
  	1196,1,0,0,0,1196,1199,1,0,0,0,1197,1195,1,0,0,0,1198,1200,5,80,0,0,1199,
  	1198,1,0,0,0,1199,1200,1,0,0,0,1200,63,1,0,0,0,1201,1202,5,77,0,0,1202,
  	1205,3,26,13,0,1203,1204,5,81,0,0,1204,1206,3,68,34,0,1205,1203,1,0,0,
  	0,1205,1206,1,0,0,0,1206,65,1,0,0,0,1207,1212,3,68,34,0,1208,1209,5,80,
  	0,0,1209,1211,3,68,34,0,1210,1208,1,0,0,0,1211,1214,1,0,0,0,1212,1210,
  	1,0,0,0,1212,1213,1,0,0,0,1213,1216,1,0,0,0,1214,1212,1,0,0,0,1215,1217,
  	5,80,0,0,1216,1215,1,0,0,0,1216,1217,1,0,0,0,1217,67,1,0,0,0,1218,1238,
  	5,8,0,0,1219,1221,5,8,0,0,1220,1219,1,0,0,0,1220,1221,1,0,0,0,1221,1222,
  	1,0,0,0,1222,1224,5,81,0,0,1223,1225,5,8,0,0,1224,1223,1,0,0,0,1224,1225,
  	1,0,0,0,1225,1238,1,0,0,0,1226,1228,5,8,0,0,1227,1226,1,0,0,0,1227,1228,
  	1,0,0,0,1228,1229,1,0,0,0,1229,1231,5,81,0,0,1230,1232,5,8,0,0,1231,1230,
  	1,0,0,0,1231,1232,1,0,0,0,1232,1233,1,0,0,0,1233,1235,5,81,0,0,1234,1236,
  	5,8,0,0,1235,1234,1,0,0,0,1235,1236,1,0,0,0,1236,1238,1,0,0,0,1237,1218,
  	1,0,0,0,1237,1220,1,0,0,0,1237,1227,1,0,0,0,1238,69,1,0,0,0,1239,1242,
  	3,92,46,0,1240,1242,3,90,45,0,1241,1239,1,0,0,0,1241,1240,1,0,0,0,1242,
  	71,1,0,0,0,1243,1245,5,124,0,0,1244,1243,1,0,0,0,1245,1248,1,0,0,0,1246,
  	1244,1,0,0,0,1246,1247,1,0,0,0,1247,1249,1,0,0,0,1248,1246,1,0,0,0,1249,
  	1253,3,84,42,0,1250,1252,5,124,0,0,1251,1250,1,0,0,0,1252,1255,1,0,0,
  	0,1253,1251,1,0,0,0,1253,1254,1,0,0,0,1254,73,1,0,0,0,1255,1253,1,0,0,
  	0,1256,1258,3,82,41,0,1257,1256,1,0,0,0,1257,1258,1,0,0,0,1258,1260,1,
  	0,0,0,1259,1261,5,0,0,1,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,75,1,
  	0,0,0,1262,1263,3,86,43,0,1263,77,1,0,0,0,1264,1268,3,278,139,0,1265,
  	1267,5,124,0,0,1266,1265,1,0,0,0,1267,1270,1,0,0,0,1268,1266,1,0,0,0,
  	1268,1269,1,0,0,0,1269,1272,1,0,0,0,1270,1268,1,0,0,0,1271,1273,5,0,0,
  	1,1272,1271,1,0,0,0,1272,1273,1,0,0,0,1273,79,1,0,0,0,1274,1276,5,78,
  	0,0,1275,1277,3,474,237,0,1276,1275,1,0,0,0,1276,1277,1,0,0,0,1277,1278,
  	1,0,0,0,1278,1279,5,79,0,0,1279,1280,5,108,0,0,1280,1284,3,280,140,0,
  	1281,1283,5,124,0,0,1282,1281,1,0,0,0,1283,1286,1,0,0,0,1284,1282,1,0,
  	0,0,1284,1285,1,0,0,0,1285,1288,1,0,0,0,1286,1284,1,0,0,0,1287,1289,5,
  	0,0,1,1288,1287,1,0,0,0,1288,1289,1,0,0,0,1289,81,1,0,0,0,1290,1293,3,
  	84,42,0,1291,1293,5,124,0,0,1292,1290,1,0,0,0,1292,1291,1,0,0,0,1293,
  	1294,1,0,0,0,1294,1292,1,0,0,0,1294,1295,1,0,0,0,1295,83,1,0,0,0,1296,
  	1299,3,92,46,0,1297,1299,3,88,44,0,1298,1296,1,0,0,0,1298,1297,1,0,0,
  	0,1299,85,1,0,0,0,1300,1301,3,92,46,0,1301,1302,5,124,0,0,1302,1306,1,
  	0,0,0,1303,1306,3,88,44,0,1304,1306,5,124,0,0,1305,1300,1,0,0,0,1305,
  	1303,1,0,0,0,1305,1304,1,0,0,0,1306,87,1,0,0,0,1307,1312,3,90,45,0,1308,
  	1309,5,82,0,0,1309,1311,3,90,45,0,1310,1308,1,0,0,0,1311,1314,1,0,0,0,
  	1312,1310,1,0,0,0,1312,1313,1,0,0,0,1313,1316,1,0,0,0,1314,1312,1,0,0,
  	0,1315,1317,5,82,0,0,1316,1315,1,0,0,0,1316,1317,1,0,0,0,1317,1330,1,
  	0,0,0,1318,1320,5,124,0,0,1319,1318,1,0,0,0,1320,1321,1,0,0,0,1321,1319,
  	1,0,0,0,1321,1322,1,0,0,0,1322,1331,1,0,0,0,1323,1325,5,124,0,0,1324,
  	1323,1,0,0,0,1325,1328,1,0,0,0,1326,1324,1,0,0,0,1326,1327,1,0,0,0,1327,
  	1329,1,0,0,0,1328,1326,1,0,0,0,1329,1331,5,0,0,1,1330,1319,1,0,0,0,1330,
  	1326,1,0,0,0,1331,89,1,0,0,0,1332,1347,3,94,47,0,1333,1347,3,268,134,
  	0,1334,1347,3,284,142,0,1335,1347,3,100,50,0,1336,1347,3,114,57,0,1337,
  	1347,3,102,51,0,1338,1347,5,41,0,0,1339,1347,3,108,54,0,1340,1347,3,110,
  	55,0,1341,1347,3,112,56,0,1342,1347,5,17,0,0,1343,1347,5,20,0,0,1344,
  	1347,3,104,52,0,1345,1347,3,106,53,0,1346,1332,1,0,0,0,1346,1333,1,0,
  	0,0,1346,1334,1,0,0,0,1346,1335,1,0,0,0,1346,1336,1,0,0,0,1346,1337,1,
  	0,0,0,1346,1338,1,0,0,0,1346,1339,1,0,0,0,1346,1340,1,0,0,0,1346,1341,
  	1,0,0,0,1346,1342,1,0,0,0,1346,1343,1,0,0,0,1346,1344,1,0,0,0,1346,1345,
  	1,0,0,0,1347,91,1,0,0,0,1348,1357,3,140,70,0,1349,1357,3,174,87,0,1350,
  	1357,3,136,68,0,1351,1357,3,184,92,0,1352,1357,3,182,91,0,1353,1357,3,
  	188,94,0,1354,1357,3,180,90,0,1355,1357,3,196,98,0,1356,1348,1,0,0,0,
  	1356,1349,1,0,0,0,1356,1350,1,0,0,0,1356,1351,1,0,0,0,1356,1352,1,0,0,
  	0,1356,1353,1,0,0,0,1356,1354,1,0,0,0,1356,1355,1,0,0,0,1357,93,1,0,0,
  	0,1358,1359,3,478,239,0,1359,1360,5,81,0,0,1360,1363,3,280,140,0,1361,
  	1362,5,84,0,0,1362,1364,3,96,48,0,1363,1361,1,0,0,0,1363,1364,1,0,0,0,
  	1364,1396,1,0,0,0,1365,1366,5,78,0,0,1366,1367,3,462,231,0,1367,1368,
  	5,79,0,0,1368,1371,1,0,0,0,1369,1371,3,464,232,0,1370,1365,1,0,0,0,1370,
  	1369,1,0,0,0,1371,1372,1,0,0,0,1372,1373,5,81,0,0,1373,1376,3,280,140,
  	0,1374,1375,5,84,0,0,1375,1377,3,96,48,0,1376,1374,1,0,0,0,1376,1377,
  	1,0,0,0,1377,1396,1,0,0,0,1378,1379,3,450,225,0,1379,1380,5,84,0,0,1380,
  	1382,1,0,0,0,1381,1378,1,0,0,0,1382,1383,1,0,0,0,1383,1381,1,0,0,0,1383,
  	1384,1,0,0,0,1384,1387,1,0,0,0,1385,1388,3,282,141,0,1386,1388,3,284,
  	142,0,1387,1385,1,0,0,0,1387,1386,1,0,0,0,1388,1396,1,0,0,0,1389,1390,
  	3,462,231,0,1390,1393,3,98,49,0,1391,1394,3,282,141,0,1392,1394,3,284,
  	142,0,1393,1391,1,0,0,0,1393,1392,1,0,0,0,1394,1396,1,0,0,0,1395,1358,
  	1,0,0,0,1395,1370,1,0,0,0,1395,1381,1,0,0,0,1395,1389,1,0,0,0,1396,95,
  	1,0,0,0,1397,1400,3,282,141,0,1398,1400,3,284,142,0,1399,1397,1,0,0,0,
  	1399,1398,1,0,0,0,1400,97,1,0,0,0,1401,1402,7,2,0,0,1402,99,1,0,0,0,1403,
  	1405,5,43,0,0,1404,1406,3,284,142,0,1405,1404,1,0,0,0,1405,1406,1,0,0,
  	0,1406,101,1,0,0,0,1407,1408,5,42,0,0,1408,1411,3,280,140,0,1409,1410,
  	5,29,0,0,1410,1412,3,280,140,0,1411,1409,1,0,0,0,1411,1412,1,0,0,0,1412,
  	1415,1,0,0,0,1413,1415,5,42,0,0,1414,1407,1,0,0,0,1414,1413,1,0,0,0,1415,
  	103,1,0,0,0,1416,1417,5,30,0,0,1417,1422,3,478,239,0,1418,1419,5,80,0,
  	0,1419,1421,3,478,239,0,1420,1418,1,0,0,0,1421,1424,1,0,0,0,1422,1420,
  	1,0,0,0,1422,1423,1,0,0,0,1423,105,1,0,0,0,1424,1422,1,0,0,0,1425,1426,
  	5,38,0,0,1426,1431,3,478,239,0,1427,1428,5,80,0,0,1428,1430,3,478,239,
  	0,1429,1427,1,0,0,0,1430,1433,1,0,0,0,1431,1429,1,0,0,0,1431,1432,1,0,
  	0,0,1432,107,1,0,0,0,1433,1431,1,0,0,0,1434,1435,5,22,0,0,1435,1436,3,
  	468,234,0,1436,109,1,0,0,0,1437,1438,3,282,141,0,1438,111,1,0,0,0,1439,
  	1440,5,14,0,0,1440,1443,3,280,140,0,1441,1442,5,80,0,0,1442,1444,3,280,
  	140,0,1443,1441,1,0,0,0,1443,1444,1,0,0,0,1444,113,1,0,0,0,1445,1448,
  	3,116,58,0,1446,1448,3,118,59,0,1447,1445,1,0,0,0,1447,1446,1,0,0,0,1448,
  	115,1,0,0,0,1449,1450,5,32,0,0,1450,1451,3,126,63,0,1451,117,1,0,0,0,
  	1452,1456,5,29,0,0,1453,1455,7,3,0,0,1454,1453,1,0,0,0,1455,1458,1,0,
  	0,0,1456,1454,1,0,0,0,1456,1457,1,0,0,0,1457,1459,1,0,0,0,1458,1456,1,
  	0,0,0,1459,1460,3,130,65,0,1460,1461,5,32,0,0,1461,1462,3,120,60,0,1462,
  	1472,1,0,0,0,1463,1465,5,29,0,0,1464,1466,7,3,0,0,1465,1464,1,0,0,0,1466,
  	1467,1,0,0,0,1467,1465,1,0,0,0,1467,1468,1,0,0,0,1468,1469,1,0,0,0,1469,
  	1470,5,32,0,0,1470,1472,3,120,60,0,1471,1452,1,0,0,0,1471,1463,1,0,0,
  	0,1472,119,1,0,0,0,1473,1474,5,78,0,0,1474,1476,3,122,61,0,1475,1477,
  	5,80,0,0,1476,1475,1,0,0,0,1476,1477,1,0,0,0,1477,1478,1,0,0,0,1478,1479,
  	5,79,0,0,1479,1483,1,0,0,0,1480,1483,3,122,61,0,1481,1483,5,77,0,0,1482,
  	1473,1,0,0,0,1482,1480,1,0,0,0,1482,1481,1,0,0,0,1483,121,1,0,0,0,1484,
  	1489,3,124,62,0,1485,1486,5,80,0,0,1486,1488,3,124,62,0,1487,1485,1,0,
  	0,0,1488,1491,1,0,0,0,1489,1487,1,0,0,0,1489,1490,1,0,0,0,1490,123,1,
  	0,0,0,1491,1489,1,0,0,0,1492,1495,3,478,239,0,1493,1494,5,13,0,0,1494,
  	1496,3,478,239,0,1495,1493,1,0,0,0,1495,1496,1,0,0,0,1496,125,1,0,0,0,
  	1497,1502,3,128,64,0,1498,1499,5,80,0,0,1499,1501,3,128,64,0,1500,1498,
  	1,0,0,0,1501,1504,1,0,0,0,1502,1500,1,0,0,0,1502,1503,1,0,0,0,1503,127,
  	1,0,0,0,1504,1502,1,0,0,0,1505,1508,3,130,65,0,1506,1507,5,13,0,0,1507,
  	1509,3,478,239,0,1508,1506,1,0,0,0,1508,1509,1,0,0,0,1509,129,1,0,0,0,
  	1510,1511,6,65,-1,0,1511,1512,3,478,239,0,1512,1518,1,0,0,0,1513,1514,
  	10,2,0,0,1514,1515,5,76,0,0,1515,1517,3,478,239,0,1516,1513,1,0,0,0,1517,
  	1520,1,0,0,0,1518,1516,1,0,0,0,1518,1519,1,0,0,0,1519,131,1,0,0,0,1520,
  	1518,1,0,0,0,1521,1522,5,124,0,0,1522,1523,5,1,0,0,1523,1524,3,82,41,
  	0,1524,1525,5,2,0,0,1525,1528,1,0,0,0,1526,1528,3,88,44,0,1527,1521,1,
  	0,0,0,1527,1526,1,0,0,0,1528,133,1,0,0,0,1529,1530,5,107,0,0,1530,1531,
  	3,294,147,0,1531,1532,5,124,0,0,1532,1534,1,0,0,0,1533,1529,1,0,0,0,1534,
  	1535,1,0,0,0,1535,1533,1,0,0,0,1535,1536,1,0,0,0,1536,135,1,0,0,0,1537,
  	1539,3,134,67,0,1538,1537,1,0,0,0,1538,1539,1,0,0,0,1539,1540,1,0,0,0,
  	1540,1541,3,138,69,0,1541,137,1,0,0,0,1542,1543,5,19,0,0,1543,1545,3,
  	478,239,0,1544,1546,3,270,135,0,1545,1544,1,0,0,0,1545,1546,1,0,0,0,1546,
  	1552,1,0,0,0,1547,1549,5,78,0,0,1548,1550,3,436,218,0,1549,1548,1,0,0,
  	0,1549,1550,1,0,0,0,1550,1551,1,0,0,0,1551,1553,5,79,0,0,1552,1547,1,
  	0,0,0,1552,1553,1,0,0,0,1553,1554,1,0,0,0,1554,1555,5,81,0,0,1555,1556,
  	3,132,66,0,1556,139,1,0,0,0,1557,1559,3,134,67,0,1558,1557,1,0,0,0,1558,
  	1559,1,0,0,0,1559,1560,1,0,0,0,1560,1561,3,142,71,0,1561,141,1,0,0,0,
  	1562,1564,5,15,0,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,1565,1,0,
  	0,0,1565,1566,5,21,0,0,1566,1568,3,478,239,0,1567,1569,3,270,135,0,1568,
  	1567,1,0,0,0,1568,1569,1,0,0,0,1569,1570,1,0,0,0,1570,1572,5,78,0,0,1571,
  	1573,3,144,72,0,1572,1571,1,0,0,0,1572,1573,1,0,0,0,1573,1574,1,0,0,0,
  	1574,1577,5,79,0,0,1575,1576,5,108,0,0,1576,1578,3,280,140,0,1577,1575,
  	1,0,0,0,1577,1578,1,0,0,0,1578,1579,1,0,0,0,1579,1581,5,81,0,0,1580,1582,
  	3,476,238,0,1581,1580,1,0,0,0,1581,1582,1,0,0,0,1582,1583,1,0,0,0,1583,
  	1584,3,132,66,0,1584,143,1,0,0,0,1585,1586,3,146,73,0,1586,145,1,0,0,
  	0,1587,1591,3,148,74,0,1588,1590,3,156,78,0,1589,1588,1,0,0,0,1590,1593,
  	1,0,0,0,1591,1589,1,0,0,0,1591,1592,1,0,0,0,1592,1597,1,0,0,0,1593,1591,
  	1,0,0,0,1594,1596,3,160,80,0,1595,1594,1,0,0,0,1596,1599,1,0,0,0,1597,
  	1595,1,0,0,0,1597,1598,1,0,0,0,1598,1601,1,0,0,0,1599,1597,1,0,0,0,1600,
  	1602,3,152,76,0,1601,1600,1,0,0,0,1601,1602,1,0,0,0,1602,1637,1,0,0,0,
  	1603,1607,3,150,75,0,1604,1606,3,160,80,0,1605,1604,1,0,0,0,1606,1609,
  	1,0,0,0,1607,1605,1,0,0,0,1607,1608,1,0,0,0,1608,1611,1,0,0,0,1609,1607,
  	1,0,0,0,1610,1612,3,152,76,0,1611,1610,1,0,0,0,1611,1612,1,0,0,0,1612,
  	1637,1,0,0,0,1613,1615,3,156,78,0,1614,1613,1,0,0,0,1615,1616,1,0,0,0,
  	1616,1614,1,0,0,0,1616,1617,1,0,0,0,1617,1621,1,0,0,0,1618,1620,3,160,
  	80,0,1619,1618,1,0,0,0,1620,1623,1,0,0,0,1621,1619,1,0,0,0,1621,1622,
  	1,0,0,0,1622,1625,1,0,0,0,1623,1621,1,0,0,0,1624,1626,3,152,76,0,1625,
  	1624,1,0,0,0,1625,1626,1,0,0,0,1626,1637,1,0,0,0,1627,1629,3,160,80,0,
  	1628,1627,1,0,0,0,1629,1630,1,0,0,0,1630,1628,1,0,0,0,1630,1631,1,0,0,
  	0,1631,1633,1,0,0,0,1632,1634,3,152,76,0,1633,1632,1,0,0,0,1633,1634,
  	1,0,0,0,1634,1637,1,0,0,0,1635,1637,3,152,76,0,1636,1587,1,0,0,0,1636,
  	1603,1,0,0,0,1636,1614,1,0,0,0,1636,1628,1,0,0,0,1636,1635,1,0,0,0,1637,
  	147,1,0,0,0,1638,1640,3,156,78,0,1639,1638,1,0,0,0,1640,1641,1,0,0,0,
  	1641,1639,1,0,0,0,1641,1642,1,0,0,0,1642,1643,1,0,0,0,1643,1645,5,94,
  	0,0,1644,1646,5,80,0,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,149,1,
  	0,0,0,1647,1649,3,156,78,0,1648,1647,1,0,0,0,1649,1652,1,0,0,0,1650,1648,
  	1,0,0,0,1650,1651,1,0,0,0,1651,1654,1,0,0,0,1652,1650,1,0,0,0,1653,1655,
  	3,160,80,0,1654,1653,1,0,0,0,1655,1656,1,0,0,0,1656,1654,1,0,0,0,1656,
  	1657,1,0,0,0,1657,1658,1,0,0,0,1658,1660,5,94,0,0,1659,1661,5,80,0,0,
  	1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,151,1,0,0,0,1662,1663,5,77,0,
  	0,1663,1667,3,156,78,0,1664,1666,3,162,81,0,1665,1664,1,0,0,0,1666,1669,
  	1,0,0,0,1667,1665,1,0,0,0,1667,1668,1,0,0,0,1668,1671,1,0,0,0,1669,1667,
  	1,0,0,0,1670,1672,3,154,77,0,1671,1670,1,0,0,0,1671,1672,1,0,0,0,1672,
  	1696,1,0,0,0,1673,1674,5,77,0,0,1674,1678,3,158,79,0,1675,1677,3,162,
  	81,0,1676,1675,1,0,0,0,1677,1680,1,0,0,0,1678,1676,1,0,0,0,1678,1679,
  	1,0,0,0,1679,1682,1,0,0,0,1680,1678,1,0,0,0,1681,1683,3,154,77,0,1682,
  	1681,1,0,0,0,1682,1683,1,0,0,0,1683,1696,1,0,0,0,1684,1685,5,77,0,0,1685,
  	1687,5,80,0,0,1686,1688,3,162,81,0,1687,1686,1,0,0,0,1688,1689,1,0,0,
  	0,1689,1687,1,0,0,0,1689,1690,1,0,0,0,1690,1692,1,0,0,0,1691,1693,3,154,
  	77,0,1692,1691,1,0,0,0,1692,1693,1,0,0,0,1693,1696,1,0,0,0,1694,1696,
  	3,154,77,0,1695,1662,1,0,0,0,1695,1673,1,0,0,0,1695,1684,1,0,0,0,1695,
  	1694,1,0,0,0,1696,153,1,0,0,0,1697,1698,5,83,0,0,1698,1699,3,156,78,0,
  	1699,155,1,0,0,0,1700,1701,3,164,82,0,1701,1702,5,80,0,0,1702,1705,1,
  	0,0,0,1703,1705,3,164,82,0,1704,1700,1,0,0,0,1704,1703,1,0,0,0,1705,157,
  	1,0,0,0,1706,1707,3,166,83,0,1707,1708,5,80,0,0,1708,1711,1,0,0,0,1709,
  	1711,3,166,83,0,1710,1706,1,0,0,0,1710,1709,1,0,0,0,1711,159,1,0,0,0,
  	1712,1713,3,164,82,0,1713,1714,3,172,86,0,1714,1715,5,80,0,0,1715,1720,
  	1,0,0,0,1716,1717,3,164,82,0,1717,1718,3,172,86,0,1718,1720,1,0,0,0,1719,
  	1712,1,0,0,0,1719,1716,1,0,0,0,1720,161,1,0,0,0,1721,1723,3,164,82,0,
  	1722,1724,3,172,86,0,1723,1722,1,0,0,0,1723,1724,1,0,0,0,1724,1725,1,
  	0,0,0,1725,1726,5,80,0,0,1726,1732,1,0,0,0,1727,1729,3,164,82,0,1728,
  	1730,3,172,86,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1732,1,0,0,0,
  	1731,1721,1,0,0,0,1731,1727,1,0,0,0,1732,163,1,0,0,0,1733,1735,3,478,
  	239,0,1734,1736,3,168,84,0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,165,
  	1,0,0,0,1737,1738,3,478,239,0,1738,1739,3,170,85,0,1739,167,1,0,0,0,1740,
  	1741,5,81,0,0,1741,1742,3,280,140,0,1742,169,1,0,0,0,1743,1744,5,81,0,
  	0,1744,1745,3,286,143,0,1745,171,1,0,0,0,1746,1747,5,84,0,0,1747,1748,
  	3,280,140,0,1748,173,1,0,0,0,1749,1750,5,31,0,0,1750,1751,3,294,147,0,
  	1751,1752,5,81,0,0,1752,1753,3,132,66,0,1753,1754,3,176,88,0,1754,1763,
  	1,0,0,0,1755,1756,5,31,0,0,1756,1757,3,294,147,0,1757,1758,5,81,0,0,1758,
  	1760,3,132,66,0,1759,1761,3,178,89,0,1760,1759,1,0,0,0,1760,1761,1,0,
  	0,0,1761,1763,1,0,0,0,1762,1749,1,0,0,0,1762,1755,1,0,0,0,1763,175,1,
  	0,0,0,1764,1765,5,23,0,0,1765,1766,3,294,147,0,1766,1767,5,81,0,0,1767,
  	1768,3,132,66,0,1768,1769,3,176,88,0,1769,1778,1,0,0,0,1770,1771,5,23,
  	0,0,1771,1772,3,294,147,0,1772,1773,5,81,0,0,1773,1775,3,132,66,0,1774,
  	1776,3,178,89,0,1775,1774,1,0,0,0,1775,1776,1,0,0,0,1776,1778,1,0,0,0,
  	1777,1764,1,0,0,0,1777,1770,1,0,0,0,1778,177,1,0,0,0,1779,1780,5,24,0,
  	0,1780,1781,5,81,0,0,1781,1782,3,132,66,0,1782,179,1,0,0,0,1783,1784,
  	5,47,0,0,1784,1785,3,294,147,0,1785,1786,5,81,0,0,1786,1788,3,132,66,
  	0,1787,1789,3,178,89,0,1788,1787,1,0,0,0,1788,1789,1,0,0,0,1789,181,1,
  	0,0,0,1790,1791,5,28,0,0,1791,1792,3,450,225,0,1792,1793,5,33,0,0,1793,
  	1794,3,284,142,0,1794,1795,5,81,0,0,1795,1797,3,132,66,0,1796,1798,3,
  	178,89,0,1797,1796,1,0,0,0,1797,1798,1,0,0,0,1798,1810,1,0,0,0,1799,1800,
  	5,15,0,0,1800,1801,5,28,0,0,1801,1802,3,450,225,0,1802,1803,5,33,0,0,
  	1803,1804,3,284,142,0,1804,1805,5,81,0,0,1805,1807,3,132,66,0,1806,1808,
  	3,178,89,0,1807,1806,1,0,0,0,1807,1808,1,0,0,0,1808,1810,1,0,0,0,1809,
  	1790,1,0,0,0,1809,1799,1,0,0,0,1810,183,1,0,0,0,1811,1812,5,49,0,0,1812,
  	1813,5,78,0,0,1813,1818,3,186,93,0,1814,1815,5,80,0,0,1815,1817,3,186,
  	93,0,1816,1814,1,0,0,0,1817,1820,1,0,0,0,1818,1816,1,0,0,0,1818,1819,
  	1,0,0,0,1819,1822,1,0,0,0,1820,1818,1,0,0,0,1821,1823,5,80,0,0,1822,1821,
  	1,0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,0,0,1824,1825,5,79,0,0,1825,1826,
  	5,81,0,0,1826,1827,3,132,66,0,1827,1872,1,0,0,0,1828,1829,5,49,0,0,1829,
  	1834,3,186,93,0,1830,1831,5,80,0,0,1831,1833,3,186,93,0,1832,1830,1,0,
  	0,0,1833,1836,1,0,0,0,1834,1832,1,0,0,0,1834,1835,1,0,0,0,1835,1837,1,
  	0,0,0,1836,1834,1,0,0,0,1837,1838,5,81,0,0,1838,1839,3,132,66,0,1839,
  	1872,1,0,0,0,1840,1841,5,15,0,0,1841,1842,5,49,0,0,1842,1843,5,78,0,0,
  	1843,1848,3,186,93,0,1844,1845,5,80,0,0,1845,1847,3,186,93,0,1846,1844,
  	1,0,0,0,1847,1850,1,0,0,0,1848,1846,1,0,0,0,1848,1849,1,0,0,0,1849,1852,
  	1,0,0,0,1850,1848,1,0,0,0,1851,1853,5,80,0,0,1852,1851,1,0,0,0,1852,1853,
  	1,0,0,0,1853,1854,1,0,0,0,1854,1855,5,79,0,0,1855,1856,5,81,0,0,1856,
  	1857,3,132,66,0,1857,1872,1,0,0,0,1858,1859,5,15,0,0,1859,1860,5,49,0,
  	0,1860,1865,3,186,93,0,1861,1862,5,80,0,0,1862,1864,3,186,93,0,1863,1861,
  	1,0,0,0,1864,1867,1,0,0,0,1865,1863,1,0,0,0,1865,1866,1,0,0,0,1866,1868,
  	1,0,0,0,1867,1865,1,0,0,0,1868,1869,5,81,0,0,1869,1870,3,132,66,0,1870,
  	1872,1,0,0,0,1871,1811,1,0,0,0,1871,1828,1,0,0,0,1871,1840,1,0,0,0,1871,
  	1858,1,0,0,0,1872,185,1,0,0,0,1873,1874,3,280,140,0,1874,1875,5,13,0,
  	0,1875,1876,3,456,228,0,1876,1879,1,0,0,0,1877,1879,3,280,140,0,1878,
  	1873,1,0,0,0,1878,1877,1,0,0,0,1879,187,1,0,0,0,1880,1881,5,45,0,0,1881,
  	1882,5,81,0,0,1882,1883,3,132,66,0,1883,1884,3,194,97,0,1884,1914,1,0,
  	0,0,1885,1886,5,45,0,0,1886,1887,5,81,0,0,1887,1889,3,132,66,0,1888,1890,
  	3,190,95,0,1889,1888,1,0,0,0,1890,1891,1,0,0,0,1891,1889,1,0,0,0,1891,
  	1892,1,0,0,0,1892,1894,1,0,0,0,1893,1895,3,178,89,0,1894,1893,1,0,0,0,
  	1894,1895,1,0,0,0,1895,1897,1,0,0,0,1896,1898,3,194,97,0,1897,1896,1,
  	0,0,0,1897,1898,1,0,0,0,1898,1914,1,0,0,0,1899,1900,5,45,0,0,1900,1901,
  	5,81,0,0,1901,1903,3,132,66,0,1902,1904,3,192,96,0,1903,1902,1,0,0,0,
  	1904,1905,1,0,0,0,1905,1903,1,0,0,0,1905,1906,1,0,0,0,1906,1908,1,0,0,
  	0,1907,1909,3,178,89,0,1908,1907,1,0,0,0,1908,1909,1,0,0,0,1909,1911,
  	1,0,0,0,1910,1912,3,194,97,0,1911,1910,1,0,0,0,1911,1912,1,0,0,0,1912,
  	1914,1,0,0,0,1913,1880,1,0,0,0,1913,1885,1,0,0,0,1913,1899,1,0,0,0,1914,
  	189,1,0,0,0,1915,1916,5,25,0,0,1916,1919,3,280,140,0,1917,1918,5,13,0,
  	0,1918,1920,3,478,239,0,1919,1917,1,0,0,0,1919,1920,1,0,0,0,1920,1921,
  	1,0,0,0,1921,1922,5,81,0,0,1922,1923,3,132,66,0,1923,1928,1,0,0,0,1924,
  	1925,5,25,0,0,1925,1926,5,81,0,0,1926,1928,3,132,66,0,1927,1915,1,0,0,
  	0,1927,1924,1,0,0,0,1928,191,1,0,0,0,1929,1930,5,25,0,0,1930,1931,5,77,
  	0,0,1931,1934,3,280,140,0,1932,1933,5,13,0,0,1933,1935,3,478,239,0,1934,
  	1932,1,0,0,0,1934,1935,1,0,0,0,1935,1936,1,0,0,0,1936,1937,5,81,0,0,1937,
  	1938,3,132,66,0,1938,193,1,0,0,0,1939,1940,5,27,0,0,1940,1941,5,81,0,
  	0,1941,1942,3,132,66,0,1942,195,1,0,0,0,1943,1944,5,36,0,0,1944,1945,
  	3,198,99,0,1945,1946,5,81,0,0,1946,1947,5,124,0,0,1947,1949,5,1,0,0,1948,
  	1950,3,200,100,0,1949,1948,1,0,0,0,1950,1951,1,0,0,0,1951,1949,1,0,0,
  	0,1951,1952,1,0,0,0,1952,1953,1,0,0,0,1953,1954,5,2,0,0,1954,197,1,0,
  	0,0,1955,1956,3,290,145,0,1956,1958,5,80,0,0,1957,1959,3,288,144,0,1958,
  	1957,1,0,0,0,1958,1959,1,0,0,0,1959,1962,1,0,0,0,1960,1962,3,294,147,
  	0,1961,1955,1,0,0,0,1961,1960,1,0,0,0,1962,199,1,0,0,0,1963,1964,5,18,
  	0,0,1964,1966,3,204,102,0,1965,1967,3,202,101,0,1966,1965,1,0,0,0,1966,
  	1967,1,0,0,0,1967,1968,1,0,0,0,1968,1969,5,81,0,0,1969,1970,3,132,66,
  	0,1970,201,1,0,0,0,1971,1972,5,31,0,0,1972,1973,3,294,147,0,1973,203,
  	1,0,0,0,1974,1977,3,244,122,0,1975,1977,3,206,103,0,1976,1974,1,0,0,0,
  	1976,1975,1,0,0,0,1977,205,1,0,0,0,1978,1981,3,208,104,0,1979,1981,3,
  	210,105,0,1980,1978,1,0,0,0,1980,1979,1,0,0,0,1981,207,1,0,0,0,1982,1983,
  	3,210,105,0,1983,1984,5,13,0,0,1984,1985,3,230,115,0,1985,209,1,0,0,0,
  	1986,1991,3,212,106,0,1987,1988,5,87,0,0,1988,1990,3,212,106,0,1989,1987,
  	1,0,0,0,1990,1993,1,0,0,0,1991,1989,1,0,0,0,1991,1992,1,0,0,0,1992,211,
  	1,0,0,0,1993,1991,1,0,0,0,1994,2003,3,214,107,0,1995,2003,3,228,114,0,
  	1996,2003,3,232,116,0,1997,2003,3,234,117,0,1998,2003,3,240,120,0,1999,
  	2003,3,242,121,0,2000,2003,3,252,126,0,2001,2003,3,260,130,0,2002,1994,
  	1,0,0,0,2002,1995,1,0,0,0,2002,1996,1,0,0,0,2002,1997,1,0,0,0,2002,1998,
  	1,0,0,0,2002,1999,1,0,0,0,2002,2000,1,0,0,0,2002,2001,1,0,0,0,2003,213,
  	1,0,0,0,2004,2011,3,220,110,0,2005,2011,3,218,109,0,2006,2011,3,408,204,
  	0,2007,2011,5,37,0,0,2008,2011,5,44,0,0,2009,2011,5,26,0,0,2010,2004,
  	1,0,0,0,2010,2005,1,0,0,0,2010,2006,1,0,0,0,2010,2007,1,0,0,0,2010,2008,
  	1,0,0,0,2010,2009,1,0,0,0,2011,215,1,0,0,0,2012,2019,3,220,110,0,2013,
  	2019,3,218,109,0,2014,2019,3,408,204,0,2015,2019,5,37,0,0,2016,2019,5,
  	44,0,0,2017,2019,5,26,0,0,2018,2012,1,0,0,0,2018,2013,1,0,0,0,2018,2014,
  	1,0,0,0,2018,2015,1,0,0,0,2018,2016,1,0,0,0,2018,2017,1,0,0,0,2019,217,
  	1,0,0,0,2020,2021,3,222,111,0,2021,2022,5,92,0,0,2022,2023,3,226,113,
  	0,2023,2029,1,0,0,0,2024,2025,3,222,111,0,2025,2026,5,93,0,0,2026,2027,
  	3,226,113,0,2027,2029,1,0,0,0,2028,2020,1,0,0,0,2028,2024,1,0,0,0,2029,
  	219,1,0,0,0,2030,2034,5,8,0,0,2031,2032,5,93,0,0,2032,2034,5,8,0,0,2033,
  	2030,1,0,0,0,2033,2031,1,0,0,0,2034,221,1,0,0,0,2035,2039,3,224,112,0,
  	2036,2037,5,93,0,0,2037,2039,3,224,112,0,2038,2035,1,0,0,0,2038,2036,
  	1,0,0,0,2039,223,1,0,0,0,2040,2041,5,8,0,0,2041,225,1,0,0,0,2042,2043,
  	5,8,0,0,2043,227,1,0,0,0,2044,2045,3,230,115,0,2045,229,1,0,0,0,2046,
  	2047,3,478,239,0,2047,231,1,0,0,0,2048,2049,5,127,0,0,2049,233,1,0,0,
  	0,2050,2051,3,236,118,0,2051,235,1,0,0,0,2052,2053,3,238,119,0,2053,2054,
  	5,76,0,0,2054,2055,3,478,239,0,2055,237,1,0,0,0,2056,2057,6,119,-1,0,
  	2057,2058,3,478,239,0,2058,2064,1,0,0,0,2059,2060,10,2,0,0,2060,2061,
  	5,76,0,0,2061,2063,3,478,239,0,2062,2059,1,0,0,0,2063,2066,1,0,0,0,2064,
  	2062,1,0,0,0,2064,2065,1,0,0,0,2065,239,1,0,0,0,2066,2064,1,0,0,0,2067,
  	2068,5,78,0,0,2068,2069,3,206,103,0,2069,2070,5,79,0,0,2070,241,1,0,0,
  	0,2071,2073,5,85,0,0,2072,2074,3,246,123,0,2073,2072,1,0,0,0,2073,2074,
  	1,0,0,0,2074,2075,1,0,0,0,2075,2082,5,86,0,0,2076,2078,5,78,0,0,2077,
  	2079,3,244,122,0,2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,2080,1,0,0,
  	0,2080,2082,5,79,0,0,2081,2071,1,0,0,0,2081,2076,1,0,0,0,2082,243,1,0,
  	0,0,2083,2084,3,248,124,0,2084,2086,5,80,0,0,2085,2087,3,246,123,0,2086,
  	2085,1,0,0,0,2086,2087,1,0,0,0,2087,245,1,0,0,0,2088,2093,3,248,124,0,
  	2089,2090,5,80,0,0,2090,2092,3,248,124,0,2091,2089,1,0,0,0,2092,2095,
  	1,0,0,0,2093,2091,1,0,0,0,2093,2094,1,0,0,0,2094,2097,1,0,0,0,2095,2093,
  	1,0,0,0,2096,2098,5,80,0,0,2097,2096,1,0,0,0,2097,2098,1,0,0,0,2098,247,
  	1,0,0,0,2099,2102,3,250,125,0,2100,2102,3,206,103,0,2101,2099,1,0,0,0,
  	2101,2100,1,0,0,0,2102,249,1,0,0,0,2103,2104,5,77,0,0,2104,2108,3,230,
  	115,0,2105,2106,5,77,0,0,2106,2108,3,232,116,0,2107,2103,1,0,0,0,2107,
  	2105,1,0,0,0,2108,251,1,0,0,0,2109,2110,5,98,0,0,2110,2135,5,99,0,0,2111,
  	2112,5,98,0,0,2112,2114,3,258,129,0,2113,2115,5,80,0,0,2114,2113,1,0,
  	0,0,2114,2115,1,0,0,0,2115,2116,1,0,0,0,2116,2117,5,99,0,0,2117,2135,
  	1,0,0,0,2118,2119,5,98,0,0,2119,2120,3,254,127,0,2120,2121,5,80,0,0,2121,
  	2123,3,258,129,0,2122,2124,5,80,0,0,2123,2122,1,0,0,0,2123,2124,1,0,0,
  	0,2124,2125,1,0,0,0,2125,2126,5,99,0,0,2126,2135,1,0,0,0,2127,2128,5,
  	98,0,0,2128,2130,3,254,127,0,2129,2131,5,80,0,0,2130,2129,1,0,0,0,2130,
  	2131,1,0,0,0,2131,2132,1,0,0,0,2132,2133,5,99,0,0,2133,2135,1,0,0,0,2134,
  	2109,1,0,0,0,2134,2111,1,0,0,0,2134,2118,1,0,0,0,2134,2127,1,0,0,0,2135,
  	253,1,0,0,0,2136,2141,3,256,128,0,2137,2138,5,80,0,0,2138,2140,3,256,
  	128,0,2139,2137,1,0,0,0,2140,2143,1,0,0,0,2141,2139,1,0,0,0,2141,2142,
  	1,0,0,0,2142,255,1,0,0,0,2143,2141,1,0,0,0,2144,2147,3,216,108,0,2145,
  	2147,3,236,118,0,2146,2144,1,0,0,0,2146,2145,1,0,0,0,2147,2148,1,0,0,
  	0,2148,2149,5,81,0,0,2149,2150,3,206,103,0,2150,257,1,0,0,0,2151,2152,
  	5,83,0,0,2152,2153,3,230,115,0,2153,259,1,0,0,0,2154,2155,3,238,119,0,
  	2155,2156,5,78,0,0,2156,2157,5,79,0,0,2157,2185,1,0,0,0,2158,2159,3,238,
  	119,0,2159,2160,5,78,0,0,2160,2162,3,262,131,0,2161,2163,5,80,0,0,2162,
  	2161,1,0,0,0,2162,2163,1,0,0,0,2163,2164,1,0,0,0,2164,2165,5,79,0,0,2165,
  	2185,1,0,0,0,2166,2167,3,238,119,0,2167,2168,5,78,0,0,2168,2170,3,264,
  	132,0,2169,2171,5,80,0,0,2170,2169,1,0,0,0,2170,2171,1,0,0,0,2171,2172,
  	1,0,0,0,2172,2173,5,79,0,0,2173,2185,1,0,0,0,2174,2175,3,238,119,0,2175,
  	2176,5,78,0,0,2176,2177,3,262,131,0,2177,2178,5,80,0,0,2178,2180,3,264,
  	132,0,2179,2181,5,80,0,0,2180,2179,1,0,0,0,2180,2181,1,0,0,0,2181,2182,
  	1,0,0,0,2182,2183,5,79,0,0,2183,2185,1,0,0,0,2184,2154,1,0,0,0,2184,2158,
  	1,0,0,0,2184,2166,1,0,0,0,2184,2174,1,0,0,0,2185,261,1,0,0,0,2186,2191,
  	3,206,103,0,2187,2188,5,80,0,0,2188,2190,3,206,103,0,2189,2187,1,0,0,
  	0,2190,2193,1,0,0,0,2191,2189,1,0,0,0,2191,2192,1,0,0,0,2192,263,1,0,
  	0,0,2193,2191,1,0,0,0,2194,2199,3,266,133,0,2195,2196,5,80,0,0,2196,2198,
  	3,266,133,0,2197,2195,1,0,0,0,2198,2201,1,0,0,0,2199,2197,1,0,0,0,2199,
  	2200,1,0,0,0,2200,265,1,0,0,0,2201,2199,1,0,0,0,2202,2203,3,478,239,0,
  	2203,2204,5,84,0,0,2204,2205,3,206,103,0,2205,267,1,0,0,0,2206,2207,5,
  	46,0,0,2207,2209,3,478,239,0,2208,2210,3,270,135,0,2209,2208,1,0,0,0,
  	2209,2210,1,0,0,0,2210,2211,1,0,0,0,2211,2212,5,84,0,0,2212,2213,3,280,
  	140,0,2213,269,1,0,0,0,2214,2215,5,85,0,0,2215,2216,3,272,136,0,2216,
  	2217,5,86,0,0,2217,271,1,0,0,0,2218,2223,3,274,137,0,2219,2220,5,80,0,
  	0,2220,2222,3,274,137,0,2221,2219,1,0,0,0,2222,2225,1,0,0,0,2223,2221,
  	1,0,0,0,2223,2224,1,0,0,0,2224,2227,1,0,0,0,2225,2223,1,0,0,0,2226,2228,
  	5,80,0,0,2227,2226,1,0,0,0,2227,2228,1,0,0,0,2228,273,1,0,0,0,2229,2231,
  	3,478,239,0,2230,2232,3,276,138,0,2231,2230,1,0,0,0,2231,2232,1,0,0,0,
  	2232,2238,1,0,0,0,2233,2234,5,77,0,0,2234,2238,3,478,239,0,2235,2236,
  	5,83,0,0,2236,2238,3,478,239,0,2237,2229,1,0,0,0,2237,2233,1,0,0,0,2237,
  	2235,1,0,0,0,2238,275,1,0,0,0,2239,2240,5,81,0,0,2240,2241,3,280,140,
  	0,2241,277,1,0,0,0,2242,2247,3,280,140,0,2243,2244,5,80,0,0,2244,2246,
  	3,280,140,0,2245,2243,1,0,0,0,2246,2249,1,0,0,0,2247,2245,1,0,0,0,2247,
  	2248,1,0,0,0,2248,2251,1,0,0,0,2249,2247,1,0,0,0,2250,2252,5,80,0,0,2251,
  	2250,1,0,0,0,2251,2252,1,0,0,0,2252,279,1,0,0,0,2253,2254,3,296,148,0,
  	2254,2255,5,31,0,0,2255,2256,3,296,148,0,2256,2257,5,24,0,0,2257,2258,
  	3,280,140,0,2258,2262,1,0,0,0,2259,2262,3,296,148,0,2260,2262,3,354,177,
  	0,2261,2253,1,0,0,0,2261,2259,1,0,0,0,2261,2260,1,0,0,0,2262,281,1,0,
  	0,0,2263,2264,5,50,0,0,2264,2265,5,29,0,0,2265,2271,3,280,140,0,2266,
  	2268,5,50,0,0,2267,2269,3,284,142,0,2268,2267,1,0,0,0,2268,2269,1,0,0,
  	0,2269,2271,1,0,0,0,2270,2263,1,0,0,0,2270,2266,1,0,0,0,2271,283,1,0,
  	0,0,2272,2277,3,286,143,0,2273,2274,5,80,0,0,2274,2276,3,286,143,0,2275,
  	2273,1,0,0,0,2276,2279,1,0,0,0,2277,2275,1,0,0,0,2277,2278,1,0,0,0,2278,
  	2281,1,0,0,0,2279,2277,1,0,0,0,2280,2282,5,80,0,0,2281,2280,1,0,0,0,2281,
  	2282,1,0,0,0,2282,285,1,0,0,0,2283,2288,3,54,27,0,2284,2285,5,77,0,0,
  	2285,2288,3,326,163,0,2286,2288,3,280,140,0,2287,2283,1,0,0,0,2287,2284,
  	1,0,0,0,2287,2286,1,0,0,0,2288,287,1,0,0,0,2289,2294,3,290,145,0,2290,
  	2291,5,80,0,0,2291,2293,3,290,145,0,2292,2290,1,0,0,0,2293,2296,1,0,0,
  	0,2294,2292,1,0,0,0,2294,2295,1,0,0,0,2295,2298,1,0,0,0,2296,2294,1,0,
  	0,0,2297,2299,5,80,0,0,2298,2297,1,0,0,0,2298,2299,1,0,0,0,2299,289,1,
  	0,0,0,2300,2301,5,77,0,0,2301,2304,3,326,163,0,2302,2304,3,294,147,0,
  	2303,2300,1,0,0,0,2303,2302,1,0,0,0,2304,291,1,0,0,0,2305,2306,3,478,
  	239,0,2306,2307,5,122,0,0,2307,2308,3,280,140,0,2308,293,1,0,0,0,2309,
  	2312,3,292,146,0,2310,2312,3,280,140,0,2311,2309,1,0,0,0,2311,2310,1,
  	0,0,0,2312,295,1,0,0,0,2313,2318,3,298,149,0,2314,2315,5,40,0,0,2315,
  	2317,3,298,149,0,2316,2314,1,0,0,0,2317,2320,1,0,0,0,2318,2316,1,0,0,
  	0,2318,2319,1,0,0,0,2319,297,1,0,0,0,2320,2318,1,0,0,0,2321,2326,3,300,
  	150,0,2322,2323,5,12,0,0,2323,2325,3,300,150,0,2324,2322,1,0,0,0,2325,
  	2328,1,0,0,0,2326,2324,1,0,0,0,2326,2327,1,0,0,0,2327,299,1,0,0,0,2328,
  	2326,1,0,0,0,2329,2330,5,39,0,0,2330,2333,3,300,150,0,2331,2333,3,302,
  	151,0,2332,2329,1,0,0,0,2332,2331,1,0,0,0,2333,301,1,0,0,0,2334,2338,
  	3,326,163,0,2335,2337,3,304,152,0,2336,2335,1,0,0,0,2337,2340,1,0,0,0,
  	2338,2336,1,0,0,0,2338,2339,1,0,0,0,2339,303,1,0,0,0,2340,2338,1,0,0,
  	0,2341,2352,3,306,153,0,2342,2352,3,308,154,0,2343,2352,3,310,155,0,2344,
  	2352,3,312,156,0,2345,2352,3,314,157,0,2346,2352,3,316,158,0,2347,2352,
  	3,318,159,0,2348,2352,3,320,160,0,2349,2352,3,322,161,0,2350,2352,3,324,
  	162,0,2351,2341,1,0,0,0,2351,2342,1,0,0,0,2351,2343,1,0,0,0,2351,2344,
  	1,0,0,0,2351,2345,1,0,0,0,2351,2346,1,0,0,0,2351,2347,1,0,0,0,2351,2348,
  	1,0,0,0,2351,2349,1,0,0,0,2351,2350,1,0,0,0,2352,305,1,0,0,0,2353,2354,
  	5,102,0,0,2354,2355,3,326,163,0,2355,307,1,0,0,0,2356,2357,5,106,0,0,
  	2357,2361,3,326,163,0,2358,2359,5,105,0,0,2359,2361,3,326,163,0,2360,
  	2356,1,0,0,0,2360,2358,1,0,0,0,2361,309,1,0,0,0,2362,2363,5,104,0,0,2363,
  	2364,3,326,163,0,2364,311,1,0,0,0,2365,2366,5,100,0,0,2366,2367,3,326,
  	163,0,2367,313,1,0,0,0,2368,2369,5,103,0,0,2369,2370,3,326,163,0,2370,
  	315,1,0,0,0,2371,2372,5,101,0,0,2372,2373,3,326,163,0,2373,317,1,0,0,
  	0,2374,2375,5,39,0,0,2375,2376,5,33,0,0,2376,2377,3,326,163,0,2377,319,
  	1,0,0,0,2378,2379,5,33,0,0,2379,2380,3,326,163,0,2380,321,1,0,0,0,2381,
  	2382,5,34,0,0,2382,2383,5,39,0,0,2383,2384,3,326,163,0,2384,323,1,0,0,
  	0,2385,2386,5,34,0,0,2386,2387,3,326,163,0,2387,325,1,0,0,0,2388,2389,
  	6,163,-1,0,2389,2390,3,328,164,0,2390,2396,1,0,0,0,2391,2392,10,2,0,0,
  	2392,2393,5,87,0,0,2393,2395,3,328,164,0,2394,2391,1,0,0,0,2395,2398,
  	1,0,0,0,2396,2394,1,0,0,0,2396,2397,1,0,0,0,2397,327,1,0,0,0,2398,2396,
  	1,0,0,0,2399,2400,6,164,-1,0,2400,2401,3,330,165,0,2401,2407,1,0,0,0,
  	2402,2403,10,2,0,0,2403,2404,5,88,0,0,2404,2406,3,330,165,0,2405,2402,
  	1,0,0,0,2406,2409,1,0,0,0,2407,2405,1,0,0,0,2407,2408,1,0,0,0,2408,329,
  	1,0,0,0,2409,2407,1,0,0,0,2410,2411,6,165,-1,0,2411,2412,3,332,166,0,
  	2412,2418,1,0,0,0,2413,2414,10,2,0,0,2414,2415,5,89,0,0,2415,2417,3,332,
  	166,0,2416,2413,1,0,0,0,2417,2420,1,0,0,0,2418,2416,1,0,0,0,2418,2419,
  	1,0,0,0,2419,331,1,0,0,0,2420,2418,1,0,0,0,2421,2422,6,166,-1,0,2422,
  	2423,3,334,167,0,2423,2432,1,0,0,0,2424,2425,10,3,0,0,2425,2426,5,90,
  	0,0,2426,2431,3,334,167,0,2427,2428,10,2,0,0,2428,2429,5,91,0,0,2429,
  	2431,3,334,167,0,2430,2424,1,0,0,0,2430,2427,1,0,0,0,2431,2434,1,0,0,
  	0,2432,2430,1,0,0,0,2432,2433,1,0,0,0,2433,333,1,0,0,0,2434,2432,1,0,
  	0,0,2435,2436,6,167,-1,0,2436,2437,3,336,168,0,2437,2446,1,0,0,0,2438,
  	2439,10,3,0,0,2439,2440,5,92,0,0,2440,2445,3,336,168,0,2441,2442,10,2,
  	0,0,2442,2443,5,93,0,0,2443,2445,3,336,168,0,2444,2438,1,0,0,0,2444,2441,
  	1,0,0,0,2445,2448,1,0,0,0,2446,2444,1,0,0,0,2446,2447,1,0,0,0,2447,335,
  	1,0,0,0,2448,2446,1,0,0,0,2449,2450,6,168,-1,0,2450,2451,3,338,169,0,
  	2451,2469,1,0,0,0,2452,2453,10,6,0,0,2453,2454,5,77,0,0,2454,2468,3,338,
  	169,0,2455,2456,10,5,0,0,2456,2457,5,94,0,0,2457,2468,3,338,169,0,2458,
  	2459,10,4,0,0,2459,2460,5,96,0,0,2460,2468,3,338,169,0,2461,2462,10,3,
  	0,0,2462,2463,5,95,0,0,2463,2468,3,338,169,0,2464,2465,10,2,0,0,2465,
  	2466,5,107,0,0,2466,2468,3,338,169,0,2467,2452,1,0,0,0,2467,2455,1,0,
  	0,0,2467,2458,1,0,0,0,2467,2461,1,0,0,0,2467,2464,1,0,0,0,2468,2471,1,
  	0,0,0,2469,2467,1,0,0,0,2469,2470,1,0,0,0,2470,337,1,0,0,0,2471,2469,
  	1,0,0,0,2472,2473,5,92,0,0,2473,2480,3,338,169,0,2474,2475,5,93,0,0,2475,
  	2480,3,338,169,0,2476,2477,5,97,0,0,2477,2480,3,338,169,0,2478,2480,3,
  	340,170,0,2479,2472,1,0,0,0,2479,2474,1,0,0,0,2479,2476,1,0,0,0,2479,
  	2478,1,0,0,0,2480,339,1,0,0,0,2481,2482,3,342,171,0,2482,2483,5,83,0,
  	0,2483,2484,3,338,169,0,2484,2487,1,0,0,0,2485,2487,3,342,171,0,2486,
  	2481,1,0,0,0,2486,2485,1,0,0,0,2487,341,1,0,0,0,2488,2489,5,16,0,0,2489,
  	2492,3,344,172,0,2490,2492,3,344,172,0,2491,2488,1,0,0,0,2491,2490,1,
  	0,0,0,2492,343,1,0,0,0,2493,2494,6,172,-1,0,2494,2495,3,350,175,0,2495,
  	2514,1,0,0,0,2496,2497,10,5,0,0,2497,2498,5,76,0,0,2498,2513,3,478,239,
  	0,2499,2500,10,4,0,0,2500,2513,3,432,216,0,2501,2502,10,3,0,0,2502,2504,
  	5,78,0,0,2503,2505,3,436,218,0,2504,2503,1,0,0,0,2504,2505,1,0,0,0,2505,
  	2506,1,0,0,0,2506,2513,5,79,0,0,2507,2508,10,2,0,0,2508,2509,5,85,0,0,
  	2509,2510,3,346,173,0,2510,2511,5,86,0,0,2511,2513,1,0,0,0,2512,2496,
  	1,0,0,0,2512,2499,1,0,0,0,2512,2501,1,0,0,0,2512,2507,1,0,0,0,2513,2516,
  	1,0,0,0,2514,2512,1,0,0,0,2514,2515,1,0,0,0,2515,345,1,0,0,0,2516,2514,
  	1,0,0,0,2517,2520,3,348,174,0,2518,2520,3,444,222,0,2519,2517,1,0,0,0,
  	2519,2518,1,0,0,0,2520,2528,1,0,0,0,2521,2524,5,80,0,0,2522,2525,3,348,
  	174,0,2523,2525,3,444,222,0,2524,2522,1,0,0,0,2524,2523,1,0,0,0,2525,
  	2527,1,0,0,0,2526,2521,1,0,0,0,2527,2530,1,0,0,0,2528,2526,1,0,0,0,2528,
  	2529,1,0,0,0,2529,2532,1,0,0,0,2530,2528,1,0,0,0,2531,2533,5,80,0,0,2532,
  	2531,1,0,0,0,2532,2533,1,0,0,0,2533,347,1,0,0,0,2534,2536,3,280,140,0,
  	2535,2534,1,0,0,0,2535,2536,1,0,0,0,2536,2537,1,0,0,0,2537,2539,5,81,
  	0,0,2538,2540,3,280,140,0,2539,2538,1,0,0,0,2539,2540,1,0,0,0,2540,2545,
  	1,0,0,0,2541,2543,5,81,0,0,2542,2544,3,280,140,0,2543,2542,1,0,0,0,2543,
  	2544,1,0,0,0,2544,2546,1,0,0,0,2545,2541,1,0,0,0,2545,2546,1,0,0,0,2546,
  	2549,1,0,0,0,2547,2549,3,294,147,0,2548,2535,1,0,0,0,2548,2547,1,0,0,
  	0,2549,349,1,0,0,0,2550,2574,3,50,25,0,2551,2574,3,478,239,0,2552,2574,
  	5,44,0,0,2553,2574,5,26,0,0,2554,2574,5,37,0,0,2555,2574,3,408,204,0,
  	2556,2574,5,8,0,0,2557,2561,3,412,206,0,2558,2561,3,352,176,0,2559,2561,
  	3,432,216,0,2560,2557,1,0,0,0,2560,2558,1,0,0,0,2560,2559,1,0,0,0,2561,
  	2574,1,0,0,0,2562,2565,3,410,205,0,2563,2565,3,428,214,0,2564,2562,1,
  	0,0,0,2564,2563,1,0,0,0,2565,2574,1,0,0,0,2566,2571,3,416,208,0,2567,
  	2571,3,414,207,0,2568,2571,3,434,217,0,2569,2571,3,430,215,0,2570,2566,
  	1,0,0,0,2570,2567,1,0,0,0,2570,2568,1,0,0,0,2570,2569,1,0,0,0,2571,2574,
  	1,0,0,0,2572,2574,5,74,0,0,2573,2550,1,0,0,0,2573,2551,1,0,0,0,2573,2552,
  	1,0,0,0,2573,2553,1,0,0,0,2573,2554,1,0,0,0,2573,2555,1,0,0,0,2573,2556,
  	1,0,0,0,2573,2560,1,0,0,0,2573,2564,1,0,0,0,2573,2570,1,0,0,0,2573,2572,
  	1,0,0,0,2574,351,1,0,0,0,2575,2578,5,78,0,0,2576,2579,3,282,141,0,2577,
  	2579,3,294,147,0,2578,2576,1,0,0,0,2578,2577,1,0,0,0,2579,2580,1,0,0,
  	0,2580,2581,5,79,0,0,2581,353,1,0,0,0,2582,2584,5,35,0,0,2583,2585,3,
  	356,178,0,2584,2583,1,0,0,0,2584,2585,1,0,0,0,2585,2586,1,0,0,0,2586,
  	2587,5,81,0,0,2587,2588,3,280,140,0,2588,355,1,0,0,0,2589,2590,3,358,
  	179,0,2590,357,1,0,0,0,2591,2595,3,360,180,0,2592,2594,3,368,184,0,2593,
  	2592,1,0,0,0,2594,2597,1,0,0,0,2595,2593,1,0,0,0,2595,2596,1,0,0,0,2596,
  	2601,1,0,0,0,2597,2595,1,0,0,0,2598,2600,3,370,185,0,2599,2598,1,0,0,
  	0,2600,2603,1,0,0,0,2601,2599,1,0,0,0,2601,2602,1,0,0,0,2602,2605,1,0,
  	0,0,2603,2601,1,0,0,0,2604,2606,3,364,182,0,2605,2604,1,0,0,0,2605,2606,
  	1,0,0,0,2606,2641,1,0,0,0,2607,2611,3,362,181,0,2608,2610,3,370,185,0,
  	2609,2608,1,0,0,0,2610,2613,1,0,0,0,2611,2609,1,0,0,0,2611,2612,1,0,0,
  	0,2612,2615,1,0,0,0,2613,2611,1,0,0,0,2614,2616,3,364,182,0,2615,2614,
  	1,0,0,0,2615,2616,1,0,0,0,2616,2641,1,0,0,0,2617,2619,3,368,184,0,2618,
  	2617,1,0,0,0,2619,2620,1,0,0,0,2620,2618,1,0,0,0,2620,2621,1,0,0,0,2621,
  	2625,1,0,0,0,2622,2624,3,370,185,0,2623,2622,1,0,0,0,2624,2627,1,0,0,
  	0,2625,2623,1,0,0,0,2625,2626,1,0,0,0,2626,2629,1,0,0,0,2627,2625,1,0,
  	0,0,2628,2630,3,364,182,0,2629,2628,1,0,0,0,2629,2630,1,0,0,0,2630,2641,
  	1,0,0,0,2631,2633,3,370,185,0,2632,2631,1,0,0,0,2633,2634,1,0,0,0,2634,
  	2632,1,0,0,0,2634,2635,1,0,0,0,2635,2637,1,0,0,0,2636,2638,3,364,182,
  	0,2637,2636,1,0,0,0,2637,2638,1,0,0,0,2638,2641,1,0,0,0,2639,2641,3,364,
  	182,0,2640,2591,1,0,0,0,2640,2607,1,0,0,0,2640,2618,1,0,0,0,2640,2632,
  	1,0,0,0,2640,2639,1,0,0,0,2641,359,1,0,0,0,2642,2644,3,368,184,0,2643,
  	2642,1,0,0,0,2644,2645,1,0,0,0,2645,2643,1,0,0,0,2645,2646,1,0,0,0,2646,
  	2647,1,0,0,0,2647,2649,5,94,0,0,2648,2650,5,80,0,0,2649,2648,1,0,0,0,
  	2649,2650,1,0,0,0,2650,361,1,0,0,0,2651,2653,3,368,184,0,2652,2651,1,
  	0,0,0,2653,2656,1,0,0,0,2654,2652,1,0,0,0,2654,2655,1,0,0,0,2655,2658,
  	1,0,0,0,2656,2654,1,0,0,0,2657,2659,3,370,185,0,2658,2657,1,0,0,0,2659,
  	2660,1,0,0,0,2660,2658,1,0,0,0,2660,2661,1,0,0,0,2661,2662,1,0,0,0,2662,
  	2664,5,94,0,0,2663,2665,5,80,0,0,2664,2663,1,0,0,0,2664,2665,1,0,0,0,
  	2665,363,1,0,0,0,2666,2667,5,77,0,0,2667,2671,3,368,184,0,2668,2670,3,
  	372,186,0,2669,2668,1,0,0,0,2670,2673,1,0,0,0,2671,2669,1,0,0,0,2671,
  	2672,1,0,0,0,2672,2675,1,0,0,0,2673,2671,1,0,0,0,2674,2676,3,366,183,
  	0,2675,2674,1,0,0,0,2675,2676,1,0,0,0,2676,2689,1,0,0,0,2677,2678,5,77,
  	0,0,2678,2680,5,80,0,0,2679,2681,3,372,186,0,2680,2679,1,0,0,0,2681,2682,
  	1,0,0,0,2682,2680,1,0,0,0,2682,2683,1,0,0,0,2683,2685,1,0,0,0,2684,2686,
  	3,366,183,0,2685,2684,1,0,0,0,2685,2686,1,0,0,0,2686,2689,1,0,0,0,2687,
  	2689,3,366,183,0,2688,2666,1,0,0,0,2688,2677,1,0,0,0,2688,2687,1,0,0,
  	0,2689,365,1,0,0,0,2690,2691,5,83,0,0,2691,2692,3,368,184,0,2692,367,
  	1,0,0,0,2693,2695,3,374,187,0,2694,2696,5,80,0,0,2695,2694,1,0,0,0,2695,
  	2696,1,0,0,0,2696,369,1,0,0,0,2697,2698,3,374,187,0,2698,2700,3,172,86,
  	0,2699,2701,5,80,0,0,2700,2699,1,0,0,0,2700,2701,1,0,0,0,2701,371,1,0,
  	0,0,2702,2704,3,374,187,0,2703,2705,3,172,86,0,2704,2703,1,0,0,0,2704,
  	2705,1,0,0,0,2705,2707,1,0,0,0,2706,2708,5,80,0,0,2707,2706,1,0,0,0,2707,
  	2708,1,0,0,0,2708,373,1,0,0,0,2709,2710,3,478,239,0,2710,375,1,0,0,0,
  	2711,2714,3,396,198,0,2712,2714,3,384,192,0,2713,2711,1,0,0,0,2713,2712,
  	1,0,0,0,2714,377,1,0,0,0,2715,2718,3,396,198,0,2716,2718,3,386,193,0,
  	2717,2715,1,0,0,0,2717,2716,1,0,0,0,2718,379,1,0,0,0,2719,2722,3,396,
  	198,0,2720,2722,3,390,195,0,2721,2719,1,0,0,0,2721,2720,1,0,0,0,2722,
  	381,1,0,0,0,2723,2726,3,396,198,0,2724,2726,3,392,196,0,2725,2723,1,0,
  	0,0,2725,2724,1,0,0,0,2726,383,1,0,0,0,2727,2731,3,394,197,0,2728,2731,
  	5,63,0,0,2729,2731,5,61,0,0,2730,2727,1,0,0,0,2730,2728,1,0,0,0,2730,
  	2729,1,0,0,0,2731,385,1,0,0,0,2732,2736,3,394,197,0,2733,2736,5,62,0,
  	0,2734,2736,5,60,0,0,2735,2732,1,0,0,0,2735,2733,1,0,0,0,2735,2734,1,
  	0,0,0,2736,387,1,0,0,0,2737,2741,3,394,197,0,2738,2741,5,63,0,0,2739,
  	2741,5,62,0,0,2740,2737,1,0,0,0,2740,2738,1,0,0,0,2740,2739,1,0,0,0,2741,
  	389,1,0,0,0,2742,2746,3,394,197,0,2743,2746,5,124,0,0,2744,2746,5,63,
  	0,0,2745,2742,1,0,0,0,2745,2743,1,0,0,0,2745,2744,1,0,0,0,2746,391,1,
  	0,0,0,2747,2751,3,394,197,0,2748,2751,5,124,0,0,2749,2751,5,62,0,0,2750,
  	2747,1,0,0,0,2750,2748,1,0,0,0,2750,2749,1,0,0,0,2751,393,1,0,0,0,2752,
  	2859,5,8,0,0,2753,2859,5,10,0,0,2754,2859,5,11,0,0,2755,2859,5,12,0,0,
  	2756,2859,5,13,0,0,2757,2859,5,14,0,0,2758,2859,5,15,0,0,2759,2859,5,
  	16,0,0,2760,2859,5,17,0,0,2761,2859,5,18,0,0,2762,2859,5,19,0,0,2763,
  	2859,5,20,0,0,2764,2859,5,21,0,0,2765,2859,5,22,0,0,2766,2859,5,23,0,
  	0,2767,2859,5,24,0,0,2768,2859,5,25,0,0,2769,2859,5,26,0,0,2770,2859,
  	5,27,0,0,2771,2859,5,28,0,0,2772,2859,5,29,0,0,2773,2859,5,30,0,0,2774,
  	2859,5,31,0,0,2775,2859,5,32,0,0,2776,2859,5,33,0,0,2777,2859,5,34,0,
  	0,2778,2859,5,35,0,0,2779,2859,5,36,0,0,2780,2859,5,37,0,0,2781,2859,
  	5,38,0,0,2782,2859,5,39,0,0,2783,2859,5,40,0,0,2784,2859,5,41,0,0,2785,
  	2859,5,42,0,0,2786,2859,5,43,0,0,2787,2859,5,44,0,0,2788,2859,5,45,0,
  	0,2789,2859,5,46,0,0,2790,2859,5,47,0,0,2791,2859,5,48,0,0,2792,2859,
  	5,49,0,0,2793,2859,5,50,0,0,2794,2859,5,51,0,0,2795,2859,5,52,0,0,2796,
  	2859,5,53,0,0,2797,2859,5,54,0,0,2798,2859,5,55,0,0,2799,2859,5,56,0,
  	0,2800,2859,5,57,0,0,2801,2859,5,58,0,0,2802,2859,5,71,0,0,2803,2859,
  	5,72,0,0,2804,2859,5,76,0,0,2805,2859,5,75,0,0,2806,2859,5,74,0,0,2807,
  	2859,5,77,0,0,2808,2859,5,78,0,0,2809,2859,5,79,0,0,2810,2859,5,80,0,
  	0,2811,2859,5,81,0,0,2812,2859,5,82,0,0,2813,2859,5,83,0,0,2814,2859,
  	5,84,0,0,2815,2859,5,85,0,0,2816,2859,5,86,0,0,2817,2859,5,87,0,0,2818,
  	2859,5,88,0,0,2819,2859,5,89,0,0,2820,2859,5,90,0,0,2821,2859,5,91,0,
  	0,2822,2859,5,92,0,0,2823,2859,5,93,0,0,2824,2859,5,94,0,0,2825,2859,
  	5,95,0,0,2826,2859,5,96,0,0,2827,2859,5,97,0,0,2828,2829,5,98,0,0,2829,
  	2859,5,98,0,0,2830,2831,5,99,0,0,2831,2859,5,99,0,0,2832,2859,5,100,0,
  	0,2833,2859,5,101,0,0,2834,2859,5,102,0,0,2835,2859,5,103,0,0,2836,2859,
  	5,104,0,0,2837,2859,5,105,0,0,2838,2859,5,106,0,0,2839,2859,5,107,0,0,
  	2840,2859,5,108,0,0,2841,2859,5,109,0,0,2842,2859,5,110,0,0,2843,2859,
  	5,111,0,0,2844,2859,5,112,0,0,2845,2859,5,113,0,0,2846,2859,5,114,0,0,
  	2847,2859,5,115,0,0,2848,2859,5,116,0,0,2849,2859,5,117,0,0,2850,2859,
  	5,118,0,0,2851,2859,5,119,0,0,2852,2859,5,120,0,0,2853,2859,5,121,0,0,
  	2854,2859,5,122,0,0,2855,2859,5,123,0,0,2856,2859,5,125,0,0,2857,2859,
  	5,126,0,0,2858,2752,1,0,0,0,2858,2753,1,0,0,0,2858,2754,1,0,0,0,2858,
  	2755,1,0,0,0,2858,2756,1,0,0,0,2858,2757,1,0,0,0,2858,2758,1,0,0,0,2858,
  	2759,1,0,0,0,2858,2760,1,0,0,0,2858,2761,1,0,0,0,2858,2762,1,0,0,0,2858,
  	2763,1,0,0,0,2858,2764,1,0,0,0,2858,2765,1,0,0,0,2858,2766,1,0,0,0,2858,
  	2767,1,0,0,0,2858,2768,1,0,0,0,2858,2769,1,0,0,0,2858,2770,1,0,0,0,2858,
  	2771,1,0,0,0,2858,2772,1,0,0,0,2858,2773,1,0,0,0,2858,2774,1,0,0,0,2858,
  	2775,1,0,0,0,2858,2776,1,0,0,0,2858,2777,1,0,0,0,2858,2778,1,0,0,0,2858,
  	2779,1,0,0,0,2858,2780,1,0,0,0,2858,2781,1,0,0,0,2858,2782,1,0,0,0,2858,
  	2783,1,0,0,0,2858,2784,1,0,0,0,2858,2785,1,0,0,0,2858,2786,1,0,0,0,2858,
  	2787,1,0,0,0,2858,2788,1,0,0,0,2858,2789,1,0,0,0,2858,2790,1,0,0,0,2858,
  	2791,1,0,0,0,2858,2792,1,0,0,0,2858,2793,1,0,0,0,2858,2794,1,0,0,0,2858,
  	2795,1,0,0,0,2858,2796,1,0,0,0,2858,2797,1,0,0,0,2858,2798,1,0,0,0,2858,
  	2799,1,0,0,0,2858,2800,1,0,0,0,2858,2801,1,0,0,0,2858,2802,1,0,0,0,2858,
  	2803,1,0,0,0,2858,2804,1,0,0,0,2858,2805,1,0,0,0,2858,2806,1,0,0,0,2858,
  	2807,1,0,0,0,2858,2808,1,0,0,0,2858,2809,1,0,0,0,2858,2810,1,0,0,0,2858,
  	2811,1,0,0,0,2858,2812,1,0,0,0,2858,2813,1,0,0,0,2858,2814,1,0,0,0,2858,
  	2815,1,0,0,0,2858,2816,1,0,0,0,2858,2817,1,0,0,0,2858,2818,1,0,0,0,2858,
  	2819,1,0,0,0,2858,2820,1,0,0,0,2858,2821,1,0,0,0,2858,2822,1,0,0,0,2858,
  	2823,1,0,0,0,2858,2824,1,0,0,0,2858,2825,1,0,0,0,2858,2826,1,0,0,0,2858,
  	2827,1,0,0,0,2858,2828,1,0,0,0,2858,2830,1,0,0,0,2858,2832,1,0,0,0,2858,
  	2833,1,0,0,0,2858,2834,1,0,0,0,2858,2835,1,0,0,0,2858,2836,1,0,0,0,2858,
  	2837,1,0,0,0,2858,2838,1,0,0,0,2858,2839,1,0,0,0,2858,2840,1,0,0,0,2858,
  	2841,1,0,0,0,2858,2842,1,0,0,0,2858,2843,1,0,0,0,2858,2844,1,0,0,0,2858,
  	2845,1,0,0,0,2858,2846,1,0,0,0,2858,2847,1,0,0,0,2858,2848,1,0,0,0,2858,
  	2849,1,0,0,0,2858,2850,1,0,0,0,2858,2851,1,0,0,0,2858,2852,1,0,0,0,2858,
  	2853,1,0,0,0,2858,2854,1,0,0,0,2858,2855,1,0,0,0,2858,2856,1,0,0,0,2858,
  	2857,1,0,0,0,2859,2860,1,0,0,0,2860,2858,1,0,0,0,2860,2861,1,0,0,0,2861,
  	395,1,0,0,0,2862,2865,5,98,0,0,2863,2866,3,282,141,0,2864,2866,3,284,
  	142,0,2865,2863,1,0,0,0,2865,2864,1,0,0,0,2866,2868,1,0,0,0,2867,2869,
  	5,84,0,0,2868,2867,1,0,0,0,2868,2869,1,0,0,0,2869,2871,1,0,0,0,2870,2872,
  	3,398,199,0,2871,2870,1,0,0,0,2871,2872,1,0,0,0,2872,2874,1,0,0,0,2873,
  	2875,3,400,200,0,2874,2873,1,0,0,0,2874,2875,1,0,0,0,2875,2876,1,0,0,
  	0,2876,2877,5,99,0,0,2877,397,1,0,0,0,2878,2879,5,123,0,0,2879,2880,3,
  	478,239,0,2880,399,1,0,0,0,2881,2885,5,81,0,0,2882,2884,3,402,201,0,2883,
  	2882,1,0,0,0,2884,2887,1,0,0,0,2885,2883,1,0,0,0,2885,2886,1,0,0,0,2886,
  	401,1,0,0,0,2887,2885,1,0,0,0,2888,2891,3,396,198,0,2889,2891,3,388,194,
  	0,2890,2888,1,0,0,0,2890,2889,1,0,0,0,2891,403,1,0,0,0,2892,2896,5,3,
  	0,0,2893,2895,3,376,188,0,2894,2893,1,0,0,0,2895,2898,1,0,0,0,2896,2894,
  	1,0,0,0,2896,2897,1,0,0,0,2897,2899,1,0,0,0,2898,2896,1,0,0,0,2899,2925,
  	5,62,0,0,2900,2904,5,4,0,0,2901,2903,3,378,189,0,2902,2901,1,0,0,0,2903,
  	2906,1,0,0,0,2904,2902,1,0,0,0,2904,2905,1,0,0,0,2905,2907,1,0,0,0,2906,
  	2904,1,0,0,0,2907,2925,5,63,0,0,2908,2912,5,5,0,0,2909,2911,3,380,190,
  	0,2910,2909,1,0,0,0,2911,2914,1,0,0,0,2912,2910,1,0,0,0,2912,2913,1,0,
  	0,0,2913,2915,1,0,0,0,2914,2912,1,0,0,0,2915,2925,5,60,0,0,2916,2920,
  	5,6,0,0,2917,2919,3,382,191,0,2918,2917,1,0,0,0,2919,2922,1,0,0,0,2920,
  	2918,1,0,0,0,2920,2921,1,0,0,0,2921,2923,1,0,0,0,2922,2920,1,0,0,0,2923,
  	2925,5,61,0,0,2924,2892,1,0,0,0,2924,2900,1,0,0,0,2924,2908,1,0,0,0,2924,
  	2916,1,0,0,0,2925,405,1,0,0,0,2926,2927,5,7,0,0,2927,407,1,0,0,0,2928,
  	2931,3,404,202,0,2929,2931,3,406,203,0,2930,2928,1,0,0,0,2930,2929,1,
  	0,0,0,2931,2932,1,0,0,0,2932,2930,1,0,0,0,2932,2933,1,0,0,0,2933,409,
  	1,0,0,0,2934,2936,5,85,0,0,2935,2937,3,288,144,0,2936,2935,1,0,0,0,2936,
  	2937,1,0,0,0,2937,2938,1,0,0,0,2938,2939,5,86,0,0,2939,411,1,0,0,0,2940,
  	2945,5,78,0,0,2941,2942,3,290,145,0,2942,2943,5,80,0,0,2943,2944,3,288,
  	144,0,2944,2946,1,0,0,0,2945,2941,1,0,0,0,2945,2946,1,0,0,0,2946,2947,
  	1,0,0,0,2947,2948,5,79,0,0,2948,413,1,0,0,0,2949,2950,5,98,0,0,2950,2951,
  	3,288,144,0,2951,2952,5,99,0,0,2952,415,1,0,0,0,2953,2955,5,98,0,0,2954,
  	2956,3,418,209,0,2955,2954,1,0,0,0,2955,2956,1,0,0,0,2956,2957,1,0,0,
  	0,2957,2958,5,99,0,0,2958,417,1,0,0,0,2959,2964,3,420,210,0,2960,2961,
  	5,80,0,0,2961,2963,3,420,210,0,2962,2960,1,0,0,0,2963,2966,1,0,0,0,2964,
  	2962,1,0,0,0,2964,2965,1,0,0,0,2965,2968,1,0,0,0,2966,2964,1,0,0,0,2967,
  	2969,5,80,0,0,2968,2967,1,0,0,0,2968,2969,1,0,0,0,2969,419,1,0,0,0,2970,
  	2971,5,83,0,0,2971,2974,3,326,163,0,2972,2974,3,422,211,0,2973,2970,1,
  	0,0,0,2973,2972,1,0,0,0,2974,421,1,0,0,0,2975,2976,3,280,140,0,2976,2977,
  	5,81,0,0,2977,2978,3,280,140,0,2978,423,1,0,0,0,2979,2981,3,426,213,0,
  	2980,2979,1,0,0,0,2981,2982,1,0,0,0,2982,2980,1,0,0,0,2982,2983,1,0,0,
  	0,2983,425,1,0,0,0,2984,2986,5,15,0,0,2985,2984,1,0,0,0,2985,2986,1,0,
  	0,0,2986,2987,1,0,0,0,2987,2988,5,28,0,0,2988,2989,3,450,225,0,2989,2990,
  	5,33,0,0,2990,2995,3,296,148,0,2991,2992,5,31,0,0,2992,2994,3,296,148,
  	0,2993,2991,1,0,0,0,2994,2997,1,0,0,0,2995,2993,1,0,0,0,2995,2996,1,0,
  	0,0,2996,427,1,0,0,0,2997,2995,1,0,0,0,2998,2999,5,85,0,0,2999,3000,3,
  	294,147,0,3000,3001,3,424,212,0,3001,3002,5,86,0,0,3002,429,1,0,0,0,3003,
  	3004,5,98,0,0,3004,3005,3,294,147,0,3005,3006,3,424,212,0,3006,3007,5,
  	99,0,0,3007,431,1,0,0,0,3008,3011,5,78,0,0,3009,3012,3,292,146,0,3010,
  	3012,3,280,140,0,3011,3009,1,0,0,0,3011,3010,1,0,0,0,3012,3013,1,0,0,
  	0,3013,3014,3,424,212,0,3014,3015,5,79,0,0,3015,433,1,0,0,0,3016,3017,
  	5,98,0,0,3017,3018,3,422,211,0,3018,3019,3,424,212,0,3019,3020,5,99,0,
  	0,3020,435,1,0,0,0,3021,3023,3,438,219,0,3022,3024,5,80,0,0,3023,3022,
  	1,0,0,0,3023,3024,1,0,0,0,3024,437,1,0,0,0,3025,3030,3,440,220,0,3026,
  	3027,5,80,0,0,3027,3029,3,440,220,0,3028,3026,1,0,0,0,3029,3032,1,0,0,
  	0,3030,3028,1,0,0,0,3030,3031,1,0,0,0,3031,3035,1,0,0,0,3032,3030,1,0,
  	0,0,3033,3034,5,80,0,0,3034,3036,3,442,221,0,3035,3033,1,0,0,0,3035,3036,
  	1,0,0,0,3036,3039,1,0,0,0,3037,3039,3,442,221,0,3038,3025,1,0,0,0,3038,
  	3037,1,0,0,0,3039,439,1,0,0,0,3040,3045,3,54,27,0,3041,3045,3,444,222,
  	0,3042,3045,3,292,146,0,3043,3045,3,280,140,0,3044,3040,1,0,0,0,3044,
  	3041,1,0,0,0,3044,3042,1,0,0,0,3044,3043,1,0,0,0,3045,441,1,0,0,0,3046,
  	3051,3,446,223,0,3047,3048,5,80,0,0,3048,3050,3,446,223,0,3049,3047,1,
  	0,0,0,3050,3053,1,0,0,0,3051,3049,1,0,0,0,3051,3052,1,0,0,0,3052,3054,
  	1,0,0,0,3053,3051,1,0,0,0,3054,3055,5,80,0,0,3055,3060,3,448,224,0,3056,
  	3057,5,80,0,0,3057,3059,3,448,224,0,3058,3056,1,0,0,0,3059,3062,1,0,0,
  	0,3060,3058,1,0,0,0,3060,3061,1,0,0,0,3061,3080,1,0,0,0,3062,3060,1,0,
  	0,0,3063,3068,3,446,223,0,3064,3065,5,80,0,0,3065,3067,3,446,223,0,3066,
  	3064,1,0,0,0,3067,3070,1,0,0,0,3068,3066,1,0,0,0,3068,3069,1,0,0,0,3069,
  	3080,1,0,0,0,3070,3068,1,0,0,0,3071,3076,3,448,224,0,3072,3073,5,80,0,
  	0,3073,3075,3,448,224,0,3074,3072,1,0,0,0,3075,3078,1,0,0,0,3076,3074,
  	1,0,0,0,3076,3077,1,0,0,0,3077,3080,1,0,0,0,3078,3076,1,0,0,0,3079,3046,
  	1,0,0,0,3079,3063,1,0,0,0,3079,3071,1,0,0,0,3080,443,1,0,0,0,3081,3082,
  	5,77,0,0,3082,3083,3,280,140,0,3083,445,1,0,0,0,3084,3085,3,478,239,0,
  	3085,3086,5,84,0,0,3086,3087,3,280,140,0,3087,3090,1,0,0,0,3088,3090,
  	3,444,222,0,3089,3084,1,0,0,0,3089,3088,1,0,0,0,3090,447,1,0,0,0,3091,
  	3092,3,478,239,0,3092,3093,5,84,0,0,3093,3094,3,280,140,0,3094,3098,1,
  	0,0,0,3095,3096,5,83,0,0,3096,3098,3,280,140,0,3097,3091,1,0,0,0,3097,
  	3095,1,0,0,0,3098,449,1,0,0,0,3099,3104,3,456,228,0,3100,3101,5,80,0,
  	0,3101,3103,3,456,228,0,3102,3100,1,0,0,0,3103,3106,1,0,0,0,3104,3102,
  	1,0,0,0,3104,3105,1,0,0,0,3105,3108,1,0,0,0,3106,3104,1,0,0,0,3107,3109,
  	5,80,0,0,3108,3107,1,0,0,0,3108,3109,1,0,0,0,3109,451,1,0,0,0,3110,3115,
  	3,456,228,0,3111,3112,5,80,0,0,3112,3114,3,456,228,0,3113,3111,1,0,0,
  	0,3114,3117,1,0,0,0,3115,3113,1,0,0,0,3115,3116,1,0,0,0,3116,3119,1,0,
  	0,0,3117,3115,1,0,0,0,3118,3120,5,80,0,0,3119,3118,1,0,0,0,3119,3120,
  	1,0,0,0,3120,453,1,0,0,0,3121,3124,3,456,228,0,3122,3123,5,80,0,0,3123,
  	3125,3,456,228,0,3124,3122,1,0,0,0,3125,3126,1,0,0,0,3126,3124,1,0,0,
  	0,3126,3127,1,0,0,0,3127,3129,1,0,0,0,3128,3130,5,80,0,0,3129,3128,1,
  	0,0,0,3129,3130,1,0,0,0,3130,3135,1,0,0,0,3131,3132,3,456,228,0,3132,
  	3133,5,80,0,0,3133,3135,1,0,0,0,3134,3121,1,0,0,0,3134,3131,1,0,0,0,3135,
  	455,1,0,0,0,3136,3137,5,77,0,0,3137,3140,3,456,228,0,3138,3140,3,458,
  	229,0,3139,3136,1,0,0,0,3139,3138,1,0,0,0,3140,457,1,0,0,0,3141,3142,
  	3,466,233,0,3142,3143,5,76,0,0,3143,3144,3,478,239,0,3144,3152,1,0,0,
  	0,3145,3146,3,466,233,0,3146,3147,5,85,0,0,3147,3148,3,346,173,0,3148,
  	3149,5,86,0,0,3149,3152,1,0,0,0,3150,3152,3,460,230,0,3151,3141,1,0,0,
  	0,3151,3145,1,0,0,0,3151,3150,1,0,0,0,3152,459,1,0,0,0,3153,3169,3,478,
  	239,0,3154,3155,5,78,0,0,3155,3156,3,458,229,0,3156,3157,5,79,0,0,3157,
  	3169,1,0,0,0,3158,3160,5,78,0,0,3159,3161,3,454,227,0,3160,3159,1,0,0,
  	0,3160,3161,1,0,0,0,3161,3162,1,0,0,0,3162,3169,5,79,0,0,3163,3165,5,
  	85,0,0,3164,3166,3,452,226,0,3165,3164,1,0,0,0,3165,3166,1,0,0,0,3166,
  	3167,1,0,0,0,3167,3169,5,86,0,0,3168,3153,1,0,0,0,3168,3154,1,0,0,0,3168,
  	3158,1,0,0,0,3168,3163,1,0,0,0,3169,461,1,0,0,0,3170,3177,3,464,232,0,
  	3171,3177,3,478,239,0,3172,3173,5,78,0,0,3173,3174,3,462,231,0,3174,3175,
  	5,79,0,0,3175,3177,1,0,0,0,3176,3170,1,0,0,0,3176,3171,1,0,0,0,3176,3172,
  	1,0,0,0,3177,463,1,0,0,0,3178,3179,3,466,233,0,3179,3180,5,76,0,0,3180,
  	3181,3,478,239,0,3181,3188,1,0,0,0,3182,3183,3,466,233,0,3183,3184,5,
  	85,0,0,3184,3185,3,346,173,0,3185,3186,5,86,0,0,3186,3188,1,0,0,0,3187,
  	3178,1,0,0,0,3187,3182,1,0,0,0,3188,465,1,0,0,0,3189,3190,6,233,-1,0,
  	3190,3191,3,350,175,0,3191,3210,1,0,0,0,3192,3193,10,5,0,0,3193,3194,
  	5,76,0,0,3194,3209,3,478,239,0,3195,3196,10,4,0,0,3196,3197,5,85,0,0,
  	3197,3198,3,346,173,0,3198,3199,5,86,0,0,3199,3209,1,0,0,0,3200,3201,
  	10,3,0,0,3201,3209,3,432,216,0,3202,3203,10,2,0,0,3203,3205,5,78,0,0,
  	3204,3206,3,436,218,0,3205,3204,1,0,0,0,3205,3206,1,0,0,0,3206,3207,1,
  	0,0,0,3207,3209,5,79,0,0,3208,3192,1,0,0,0,3208,3195,1,0,0,0,3208,3200,
  	1,0,0,0,3208,3202,1,0,0,0,3209,3212,1,0,0,0,3210,3208,1,0,0,0,3210,3211,
  	1,0,0,0,3211,467,1,0,0,0,3212,3210,1,0,0,0,3213,3218,3,470,235,0,3214,
  	3215,5,80,0,0,3215,3217,3,470,235,0,3216,3214,1,0,0,0,3217,3220,1,0,0,
  	0,3218,3216,1,0,0,0,3218,3219,1,0,0,0,3219,3222,1,0,0,0,3220,3218,1,0,
  	0,0,3221,3223,5,80,0,0,3222,3221,1,0,0,0,3222,3223,1,0,0,0,3223,469,1,
  	0,0,0,3224,3225,3,466,233,0,3225,3226,5,76,0,0,3226,3227,3,478,239,0,
  	3227,3235,1,0,0,0,3228,3229,3,466,233,0,3229,3230,5,85,0,0,3230,3231,
  	3,346,173,0,3231,3232,5,86,0,0,3232,3235,1,0,0,0,3233,3235,3,472,236,
  	0,3234,3224,1,0,0,0,3234,3228,1,0,0,0,3234,3233,1,0,0,0,3235,471,1,0,
  	0,0,3236,3248,3,478,239,0,3237,3239,5,78,0,0,3238,3240,3,468,234,0,3239,
  	3238,1,0,0,0,3239,3240,1,0,0,0,3240,3241,1,0,0,0,3241,3248,5,79,0,0,3242,
  	3244,5,85,0,0,3243,3245,3,468,234,0,3244,3243,1,0,0,0,3244,3245,1,0,0,
  	0,3245,3246,1,0,0,0,3246,3248,5,86,0,0,3247,3236,1,0,0,0,3247,3237,1,
  	0,0,0,3247,3242,1,0,0,0,3248,473,1,0,0,0,3249,3254,3,280,140,0,3250,3251,
  	5,80,0,0,3251,3253,3,280,140,0,3252,3250,1,0,0,0,3253,3256,1,0,0,0,3254,
  	3252,1,0,0,0,3254,3255,1,0,0,0,3255,3257,1,0,0,0,3256,3254,1,0,0,0,3257,
  	3258,5,80,0,0,3258,3259,5,77,0,0,3259,3260,3,280,140,0,3260,3261,5,80,
  	0,0,3261,3262,5,83,0,0,3262,3263,3,280,140,0,3263,3307,1,0,0,0,3264,3269,
  	3,280,140,0,3265,3266,5,80,0,0,3266,3268,3,280,140,0,3267,3265,1,0,0,
  	0,3268,3271,1,0,0,0,3269,3267,1,0,0,0,3269,3270,1,0,0,0,3270,3272,1,0,
  	0,0,3271,3269,1,0,0,0,3272,3273,5,80,0,0,3273,3274,5,77,0,0,3274,3275,
  	3,280,140,0,3275,3307,1,0,0,0,3276,3281,3,280,140,0,3277,3278,5,80,0,
  	0,3278,3280,3,280,140,0,3279,3277,1,0,0,0,3280,3283,1,0,0,0,3281,3279,
  	1,0,0,0,3281,3282,1,0,0,0,3282,3284,1,0,0,0,3283,3281,1,0,0,0,3284,3285,
  	5,80,0,0,3285,3286,5,83,0,0,3286,3287,3,280,140,0,3287,3307,1,0,0,0,3288,
  	3289,5,77,0,0,3289,3290,3,280,140,0,3290,3291,5,80,0,0,3291,3292,5,83,
  	0,0,3292,3293,3,280,140,0,3293,3307,1,0,0,0,3294,3295,5,77,0,0,3295,3307,
  	3,280,140,0,3296,3297,5,83,0,0,3297,3307,3,280,140,0,3298,3303,3,280,
  	140,0,3299,3300,5,80,0,0,3300,3302,3,280,140,0,3301,3299,1,0,0,0,3302,
  	3305,1,0,0,0,3303,3301,1,0,0,0,3303,3304,1,0,0,0,3304,3307,1,0,0,0,3305,
  	3303,1,0,0,0,3306,3249,1,0,0,0,3306,3264,1,0,0,0,3306,3276,1,0,0,0,3306,
  	3288,1,0,0,0,3306,3294,1,0,0,0,3306,3296,1,0,0,0,3306,3298,1,0,0,0,3307,
  	475,1,0,0,0,3308,3309,5,124,0,0,3309,477,1,0,0,0,3310,3311,7,4,0,0,3311,
  	479,1,0,0,0,405,486,493,498,504,509,517,523,526,531,537,545,551,554,559,
  	565,574,580,583,588,591,598,605,613,632,636,640,651,657,662,687,690,692,
  	697,705,713,719,728,731,736,742,751,754,759,765,773,786,799,807,816,819,
  	828,838,841,850,860,863,872,882,885,893,902,905,914,924,927,936,946,949,
  	958,968,971,978,981,983,991,1004,1018,1032,1045,1058,1072,1086,1094,1101,
  	1109,1118,1132,1144,1148,1154,1165,1167,1181,1188,1195,1199,1205,1212,
  	1216,1220,1224,1227,1231,1235,1237,1241,1246,1253,1257,1260,1268,1272,
  	1276,1284,1288,1292,1294,1298,1305,1312,1316,1321,1326,1330,1346,1356,
  	1363,1370,1376,1383,1387,1393,1395,1399,1405,1411,1414,1422,1431,1443,
  	1447,1456,1467,1471,1476,1482,1489,1495,1502,1508,1518,1527,1535,1538,
  	1545,1549,1552,1558,1563,1568,1572,1577,1581,1591,1597,1601,1607,1611,
  	1616,1621,1625,1630,1633,1636,1641,1645,1650,1656,1660,1667,1671,1678,
  	1682,1689,1692,1695,1704,1710,1719,1723,1729,1731,1735,1760,1762,1775,
  	1777,1788,1797,1807,1809,1818,1822,1834,1848,1852,1865,1871,1878,1891,
  	1894,1897,1905,1908,1911,1913,1919,1927,1934,1951,1958,1961,1966,1976,
  	1980,1991,2002,2010,2018,2028,2033,2038,2064,2073,2078,2081,2086,2093,
  	2097,2101,2107,2114,2123,2130,2134,2141,2146,2162,2170,2180,2184,2191,
  	2199,2209,2223,2227,2231,2237,2247,2251,2261,2268,2270,2277,2281,2287,
  	2294,2298,2303,2311,2318,2326,2332,2338,2351,2360,2396,2407,2418,2430,
  	2432,2444,2446,2467,2469,2479,2486,2491,2504,2512,2514,2519,2524,2528,
  	2532,2535,2539,2543,2545,2548,2560,2564,2570,2573,2578,2584,2595,2601,
  	2605,2611,2615,2620,2625,2629,2634,2637,2640,2645,2649,2654,2660,2664,
  	2671,2675,2682,2685,2688,2695,2700,2704,2707,2713,2717,2721,2725,2730,
  	2735,2740,2745,2750,2858,2860,2865,2868,2871,2874,2885,2890,2896,2904,
  	2912,2920,2924,2930,2932,2936,2945,2955,2964,2968,2973,2982,2985,2995,
  	3011,3023,3030,3035,3038,3044,3051,3060,3068,3076,3079,3089,3097,3104,
  	3108,3115,3119,3126,3129,3134,3139,3151,3160,3165,3168,3176,3187,3205,
  	3208,3210,3218,3222,3234,3239,3244,3247,3254,3269,3281,3303,3306
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  fandangoparserParserStaticData = std::move(staticData);
}

}

FandangoParser::FandangoParser(TokenStream *input) : FandangoParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

FandangoParser::FandangoParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  FandangoParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *fandangoparserParserStaticData->atn, fandangoparserParserStaticData->decisionToDFA, fandangoparserParserStaticData->sharedContextCache, options);
}

FandangoParser::~FandangoParser() {
  delete _interpreter;
}

const atn::ATN& FandangoParser::getATN() const {
  return *fandangoparserParserStaticData->atn;
}

std::string FandangoParser::getGrammarFileName() const {
  return "FandangoParser.g4";
}

const std::vector<std::string>& FandangoParser::getRuleNames() const {
  return fandangoparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& FandangoParser::getVocabulary() const {
  return fandangoparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView FandangoParser::getSerializedATN() const {
  return fandangoparserParserStaticData->serializedATN;
}


//----------------- FandangoContext ------------------------------------------------------------------

FandangoParser::FandangoContext::FandangoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ProgramContext* FandangoParser::FandangoContext::program() {
  return getRuleContext<FandangoParser::ProgramContext>(0);
}

tree::TerminalNode* FandangoParser::FandangoContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::FandangoContext::getRuleIndex() const {
  return FandangoParser::RuleFandango;
}


std::any FandangoParser::FandangoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFandango(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::FandangoContext* FandangoParser::fandango() {
  FandangoContext *_localctx = _tracker.createInstance<FandangoContext>(_ctx, getState());
  enterRule(_localctx, 0, FandangoParser::RuleFandango);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(480);
    program();
    setState(481);
    match(FandangoParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

FandangoParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::ProgramContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::ProgramContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

std::vector<FandangoParser::StatementContext *> FandangoParser::ProgramContext::statement() {
  return getRuleContexts<FandangoParser::StatementContext>();
}

FandangoParser::StatementContext* FandangoParser::ProgramContext::statement(size_t i) {
  return getRuleContext<FandangoParser::StatementContext>(i);
}


size_t FandangoParser::ProgramContext::getRuleIndex() const {
  return FandangoParser::RuleProgram;
}


std::any FandangoParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ProgramContext* FandangoParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 2, FandangoParser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(486);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(483);
      match(FandangoParser::NEWLINE);
      setState(488);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(498);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 576459626828775930) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 8683006489) != 0)) {
      setState(489);
      statement();
      setState(493);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NEWLINE) {
        setState(490);
        match(FandangoParser::NEWLINE);
        setState(495);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(500);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

FandangoParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ProductionContext* FandangoParser::StatementContext::production() {
  return getRuleContext<FandangoParser::ProductionContext>(0);
}

FandangoParser::ConstraintContext* FandangoParser::StatementContext::constraint() {
  return getRuleContext<FandangoParser::ConstraintContext>(0);
}

FandangoParser::PythonContext* FandangoParser::StatementContext::python() {
  return getRuleContext<FandangoParser::PythonContext>(0);
}


size_t FandangoParser::StatementContext::getRuleIndex() const {
  return FandangoParser::RuleStatement;
}


std::any FandangoParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StatementContext* FandangoParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 4, FandangoParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(504);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(501);
      production();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(502);
      constraint();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(503);
      python();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProductionContext ------------------------------------------------------------------

FandangoParser::ProductionContext::ProductionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::NonterminalContext* FandangoParser::ProductionContext::nonterminal() {
  return getRuleContext<FandangoParser::NonterminalContext>(0);
}

tree::TerminalNode* FandangoParser::ProductionContext::GRAMMAR_ASSIGN() {
  return getToken(FandangoParser::GRAMMAR_ASSIGN, 0);
}

FandangoParser::AlternativeContext* FandangoParser::ProductionContext::alternative() {
  return getRuleContext<FandangoParser::AlternativeContext>(0);
}

tree::TerminalNode* FandangoParser::ProductionContext::SEMI_COLON() {
  return getToken(FandangoParser::SEMI_COLON, 0);
}

tree::TerminalNode* FandangoParser::ProductionContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::ProductionContext::INDENT() {
  return getTokens(FandangoParser::INDENT);
}

tree::TerminalNode* FandangoParser::ProductionContext::INDENT(size_t i) {
  return getToken(FandangoParser::INDENT, i);
}

tree::TerminalNode* FandangoParser::ProductionContext::EXPR_ASSIGN() {
  return getToken(FandangoParser::EXPR_ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::ProductionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::ProductionContext::DEDENT() {
  return getTokens(FandangoParser::DEDENT);
}

tree::TerminalNode* FandangoParser::ProductionContext::DEDENT(size_t i) {
  return getToken(FandangoParser::DEDENT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::ProductionContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::ProductionContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

tree::TerminalNode* FandangoParser::ProductionContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::ProductionContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::ProductionContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}


size_t FandangoParser::ProductionContext::getRuleIndex() const {
  return FandangoParser::RuleProduction;
}


std::any FandangoParser::ProductionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitProduction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ProductionContext* FandangoParser::production() {
  ProductionContext *_localctx = _tracker.createInstance<ProductionContext>(_ctx, getState());
  enterRule(_localctx, 6, FandangoParser::RuleProduction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(591);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(509);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::INDENT) {
        setState(506);
        match(FandangoParser::INDENT);
        setState(511);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(512);
      nonterminal();
      setState(513);
      match(FandangoParser::GRAMMAR_ASSIGN);
      setState(514);
      alternative();
      setState(517);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::EXPR_ASSIGN) {
        setState(515);
        match(FandangoParser::EXPR_ASSIGN);
        setState(516);
        expression();
      }
      setState(526);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(519);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(521); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(520);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(523); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(525);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(531);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::DEDENT) {
        setState(528);
        match(FandangoParser::DEDENT);
        setState(533);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(537);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::INDENT) {
        setState(534);
        match(FandangoParser::INDENT);
        setState(539);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(540);
      nonterminal();
      setState(541);
      match(FandangoParser::GRAMMAR_ASSIGN);
      setState(542);
      alternative();
      setState(545);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(543);
        match(FandangoParser::ASSIGN);
        setState(544);
        expression();
      }
      setState(554);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(547);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(549); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(548);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(551); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(553);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(559);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::DEDENT) {
        setState(556);
        match(FandangoParser::DEDENT);
        setState(561);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(565);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::INDENT) {
        setState(562);
        match(FandangoParser::INDENT);
        setState(567);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(568);
      nonterminal();
      setState(569);
      match(FandangoParser::GRAMMAR_ASSIGN);
      setState(570);
      alternative();
      setState(574);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COLON) {
        setState(571);
        match(FandangoParser::COLON);
        setState(572);
        match(FandangoParser::COLON);
        setState(573);
        expression();
      }
      setState(583);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(576);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(578); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(577);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(580); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(582);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(588);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::DEDENT) {
        setState(585);
        match(FandangoParser::DEDENT);
        setState(590);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlternativeContext ------------------------------------------------------------------

FandangoParser::AlternativeContext::AlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ConcatenationContext *> FandangoParser::AlternativeContext::concatenation() {
  return getRuleContexts<FandangoParser::ConcatenationContext>();
}

FandangoParser::ConcatenationContext* FandangoParser::AlternativeContext::concatenation(size_t i) {
  return getRuleContext<FandangoParser::ConcatenationContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::AlternativeContext::OR_OP() {
  return getTokens(FandangoParser::OR_OP);
}

tree::TerminalNode* FandangoParser::AlternativeContext::OR_OP(size_t i) {
  return getToken(FandangoParser::OR_OP, i);
}


size_t FandangoParser::AlternativeContext::getRuleIndex() const {
  return FandangoParser::RuleAlternative;
}


std::any FandangoParser::AlternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAlternative(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AlternativeContext* FandangoParser::alternative() {
  AlternativeContext *_localctx = _tracker.createInstance<AlternativeContext>(_ctx, getState());
  enterRule(_localctx, 8, FandangoParser::RuleAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(593);
    concatenation();
    setState(598);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR_OP) {
      setState(594);
      match(FandangoParser::OR_OP);
      setState(595);
      concatenation();
      setState(600);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConcatenationContext ------------------------------------------------------------------

FandangoParser::ConcatenationContext::ConcatenationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::OperatorContext *> FandangoParser::ConcatenationContext::operator_() {
  return getRuleContexts<FandangoParser::OperatorContext>();
}

FandangoParser::OperatorContext* FandangoParser::ConcatenationContext::operator_(size_t i) {
  return getRuleContext<FandangoParser::OperatorContext>(i);
}


size_t FandangoParser::ConcatenationContext::getRuleIndex() const {
  return FandangoParser::RuleConcatenation;
}


std::any FandangoParser::ConcatenationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitConcatenation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ConcatenationContext* FandangoParser::concatenation() {
  ConcatenationContext *_localctx = _tracker.createInstance<ConcatenationContext>(_ctx, getState());
  enterRule(_localctx, 10, FandangoParser::RuleConcatenation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(601);
    operator_();
    setState(605);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540431955284459904) != 0) || ((((_la - 78) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 78)) & 4194433) != 0)) {
      setState(602);
      operator_();
      setState(607);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperatorContext ------------------------------------------------------------------

FandangoParser::OperatorContext::OperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::OperatorContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

FandangoParser::KleeneContext* FandangoParser::OperatorContext::kleene() {
  return getRuleContext<FandangoParser::KleeneContext>(0);
}

FandangoParser::PlusContext* FandangoParser::OperatorContext::plus() {
  return getRuleContext<FandangoParser::PlusContext>(0);
}

FandangoParser::OptionContext* FandangoParser::OperatorContext::option() {
  return getRuleContext<FandangoParser::OptionContext>(0);
}

FandangoParser::RepeatContext* FandangoParser::OperatorContext::repeat() {
  return getRuleContext<FandangoParser::RepeatContext>(0);
}


size_t FandangoParser::OperatorContext::getRuleIndex() const {
  return FandangoParser::RuleOperator;
}


std::any FandangoParser::OperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOperator(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::OperatorContext* FandangoParser::operator_() {
  OperatorContext *_localctx = _tracker.createInstance<OperatorContext>(_ctx, getState());
  enterRule(_localctx, 12, FandangoParser::RuleOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(613);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(608);
      symbol();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(609);
      kleene();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(610);
      plus();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(611);
      option();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(612);
      repeat();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KleeneContext ------------------------------------------------------------------

FandangoParser::KleeneContext::KleeneContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::KleeneContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::KleeneContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}


size_t FandangoParser::KleeneContext::getRuleIndex() const {
  return FandangoParser::RuleKleene;
}


std::any FandangoParser::KleeneContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKleene(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KleeneContext* FandangoParser::kleene() {
  KleeneContext *_localctx = _tracker.createInstance<KleeneContext>(_ctx, getState());
  enterRule(_localctx, 14, FandangoParser::RuleKleene);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(615);
    symbol();
    setState(616);
    match(FandangoParser::STAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PlusContext ------------------------------------------------------------------

FandangoParser::PlusContext::PlusContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::PlusContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::PlusContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}


size_t FandangoParser::PlusContext::getRuleIndex() const {
  return FandangoParser::RulePlus;
}


std::any FandangoParser::PlusContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPlus(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PlusContext* FandangoParser::plus() {
  PlusContext *_localctx = _tracker.createInstance<PlusContext>(_ctx, getState());
  enterRule(_localctx, 16, FandangoParser::RulePlus);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(618);
    symbol();
    setState(619);
    match(FandangoParser::ADD);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionContext ------------------------------------------------------------------

FandangoParser::OptionContext::OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::OptionContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::OptionContext::QUESTION() {
  return getToken(FandangoParser::QUESTION, 0);
}


size_t FandangoParser::OptionContext::getRuleIndex() const {
  return FandangoParser::RuleOption;
}


std::any FandangoParser::OptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOption(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::OptionContext* FandangoParser::option() {
  OptionContext *_localctx = _tracker.createInstance<OptionContext>(_ctx, getState());
  enterRule(_localctx, 18, FandangoParser::RuleOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(621);
    symbol();
    setState(622);
    match(FandangoParser::QUESTION);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepeatContext ------------------------------------------------------------------

FandangoParser::RepeatContext::RepeatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SymbolContext* FandangoParser::RepeatContext::symbol() {
  return getRuleContext<FandangoParser::SymbolContext>(0);
}

tree::TerminalNode* FandangoParser::RepeatContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::RepeatContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::RepeatContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::RepeatContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::RepeatContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::RepeatContext::getRuleIndex() const {
  return FandangoParser::RuleRepeat;
}


std::any FandangoParser::RepeatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRepeat(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::RepeatContext* FandangoParser::repeat() {
  RepeatContext *_localctx = _tracker.createInstance<RepeatContext>(_ctx, getState());
  enterRule(_localctx, 20, FandangoParser::RuleRepeat);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(640);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(624);
      symbol();
      setState(625);
      match(FandangoParser::OPEN_BRACE);

      setState(626);
      expression();
      setState(627);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(629);
      symbol();
      setState(630);
      match(FandangoParser::OPEN_BRACE);
      setState(632);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 93071897) != 0)) {
        setState(631);
        expression();
      }
      setState(634);
      match(FandangoParser::COMMA);
      setState(636);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 93071897) != 0)) {
        setState(635);
        expression();
      }
      setState(638);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SymbolContext ------------------------------------------------------------------

FandangoParser::SymbolContext::SymbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Nonterminal_rightContext* FandangoParser::SymbolContext::nonterminal_right() {
  return getRuleContext<FandangoParser::Nonterminal_rightContext>(0);
}

FandangoParser::StringContext* FandangoParser::SymbolContext::string() {
  return getRuleContext<FandangoParser::StringContext>(0);
}

tree::TerminalNode* FandangoParser::SymbolContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}

FandangoParser::Generator_callContext* FandangoParser::SymbolContext::generator_call() {
  return getRuleContext<FandangoParser::Generator_callContext>(0);
}

FandangoParser::Char_setContext* FandangoParser::SymbolContext::char_set() {
  return getRuleContext<FandangoParser::Char_setContext>(0);
}

tree::TerminalNode* FandangoParser::SymbolContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::AlternativeContext* FandangoParser::SymbolContext::alternative() {
  return getRuleContext<FandangoParser::AlternativeContext>(0);
}

tree::TerminalNode* FandangoParser::SymbolContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}


size_t FandangoParser::SymbolContext::getRuleIndex() const {
  return FandangoParser::RuleSymbol;
}


std::any FandangoParser::SymbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSymbol(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SymbolContext* FandangoParser::symbol() {
  SymbolContext *_localctx = _tracker.createInstance<SymbolContext>(_ctx, getState());
  enterRule(_localctx, 22, FandangoParser::RuleSymbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(651);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 1);
        setState(642);
        nonterminal_right();
        break;
      }

      case FandangoParser::STRING: {
        enterOuterAlt(_localctx, 2);
        setState(643);
        string();
        break;
      }

      case FandangoParser::NUMBER: {
        enterOuterAlt(_localctx, 3);
        setState(644);
        match(FandangoParser::NUMBER);
        break;
      }

      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 4);
        setState(645);
        generator_call(0);
        break;
      }

      case FandangoParser::OPEN_BRACK: {
        enterOuterAlt(_localctx, 5);
        setState(646);
        char_set();
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 6);
        setState(647);
        match(FandangoParser::OPEN_PAREN);
        setState(648);
        alternative();
        setState(649);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nonterminal_rightContext ------------------------------------------------------------------

FandangoParser::Nonterminal_rightContext::Nonterminal_rightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Nonterminal_rightContext::LESS_THAN() {
  return getToken(FandangoParser::LESS_THAN, 0);
}

std::vector<FandangoParser::IdentifierContext *> FandangoParser::Nonterminal_rightContext::identifier() {
  return getRuleContexts<FandangoParser::IdentifierContext>();
}

FandangoParser::IdentifierContext* FandangoParser::Nonterminal_rightContext::identifier(size_t i) {
  return getRuleContext<FandangoParser::IdentifierContext>(i);
}

tree::TerminalNode* FandangoParser::Nonterminal_rightContext::GREATER_THAN() {
  return getToken(FandangoParser::GREATER_THAN, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::Nonterminal_rightContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::Nonterminal_rightContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}


size_t FandangoParser::Nonterminal_rightContext::getRuleIndex() const {
  return FandangoParser::RuleNonterminal_right;
}


std::any FandangoParser::Nonterminal_rightContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNonterminal_right(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Nonterminal_rightContext* FandangoParser::nonterminal_right() {
  Nonterminal_rightContext *_localctx = _tracker.createInstance<Nonterminal_rightContext>(_ctx, getState());
  enterRule(_localctx, 24, FandangoParser::RuleNonterminal_right);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(653);
    match(FandangoParser::LESS_THAN);
    setState(662);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      setState(657);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
      case 1: {
        setState(654);
        identifier();
        setState(655);
        match(FandangoParser::COLON);
        break;
      }

      default:
        break;
      }
      setState(659);
      identifier();
      setState(660);
      match(FandangoParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(664);
    identifier();
    setState(665);
    match(FandangoParser::GREATER_THAN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonterminalContext ------------------------------------------------------------------

FandangoParser::NonterminalContext::NonterminalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::NonterminalContext::LESS_THAN() {
  return getToken(FandangoParser::LESS_THAN, 0);
}

FandangoParser::IdentifierContext* FandangoParser::NonterminalContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::NonterminalContext::GREATER_THAN() {
  return getToken(FandangoParser::GREATER_THAN, 0);
}


size_t FandangoParser::NonterminalContext::getRuleIndex() const {
  return FandangoParser::RuleNonterminal;
}


std::any FandangoParser::NonterminalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNonterminal(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::NonterminalContext* FandangoParser::nonterminal() {
  NonterminalContext *_localctx = _tracker.createInstance<NonterminalContext>(_ctx, getState());
  enterRule(_localctx, 26, FandangoParser::RuleNonterminal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(667);
    match(FandangoParser::LESS_THAN);
    setState(668);
    identifier();
    setState(669);
    match(FandangoParser::GREATER_THAN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Generator_callContext ------------------------------------------------------------------

FandangoParser::Generator_callContext::Generator_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Generator_callContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

FandangoParser::Generator_callContext* FandangoParser::Generator_callContext::generator_call() {
  return getRuleContext<FandangoParser::Generator_callContext>(0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Generator_callContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::GenexpContext* FandangoParser::Generator_callContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Generator_callContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::Generator_callContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}


size_t FandangoParser::Generator_callContext::getRuleIndex() const {
  return FandangoParser::RuleGenerator_call;
}


std::any FandangoParser::Generator_callContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGenerator_call(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Generator_callContext* FandangoParser::generator_call() {
   return generator_call(0);
}

FandangoParser::Generator_callContext* FandangoParser::generator_call(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Generator_callContext *_localctx = _tracker.createInstance<Generator_callContext>(_ctx, parentState);
  FandangoParser::Generator_callContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 28;
  enterRecursionRule(_localctx, 28, FandangoParser::RuleGenerator_call, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(672);
    identifier();
    _ctx->stop = _input->LT(-1);
    setState(692);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(690);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(674);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(675);
          match(FandangoParser::DOT);
          setState(676);
          identifier();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(677);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(678);
          match(FandangoParser::OPEN_BRACK);
          setState(679);
          slices();
          setState(680);
          match(FandangoParser::CLOSE_BRACK);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(682);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(683);
          genexp();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<Generator_callContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleGenerator_call);
          setState(684);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(685);
          match(FandangoParser::OPEN_PAREN);
          setState(687);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 74)) & 93071897) != 0)) {
            setState(686);
            arguments();
          }
          setState(689);
          match(FandangoParser::CLOSE_PAREN);
          break;
        }

        default:
          break;
        } 
      }
      setState(694);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Char_setContext ------------------------------------------------------------------

FandangoParser::Char_setContext::Char_setContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Char_setContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::StringContext* FandangoParser::Char_setContext::string() {
  return getRuleContext<FandangoParser::StringContext>(0);
}

tree::TerminalNode* FandangoParser::Char_setContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Char_setContext::XOR() {
  return getToken(FandangoParser::XOR, 0);
}


size_t FandangoParser::Char_setContext::getRuleIndex() const {
  return FandangoParser::RuleChar_set;
}


std::any FandangoParser::Char_setContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitChar_set(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Char_setContext* FandangoParser::char_set() {
  Char_setContext *_localctx = _tracker.createInstance<Char_setContext>(_ctx, getState());
  enterRule(_localctx, 30, FandangoParser::RuleChar_set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(695);
    match(FandangoParser::OPEN_BRACK);
    setState(697);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::XOR) {
      setState(696);
      match(FandangoParser::XOR);
    }
    setState(699);
    string();
    setState(700);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstraintContext ------------------------------------------------------------------

FandangoParser::ConstraintContext::ConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::ConstraintContext::WHERE() {
  return getToken(FandangoParser::WHERE, 0);
}

FandangoParser::ImpliesContext* FandangoParser::ConstraintContext::implies() {
  return getRuleContext<FandangoParser::ImpliesContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::ConstraintContext::INDENT() {
  return getTokens(FandangoParser::INDENT);
}

tree::TerminalNode* FandangoParser::ConstraintContext::INDENT(size_t i) {
  return getToken(FandangoParser::INDENT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::ConstraintContext::DEDENT() {
  return getTokens(FandangoParser::DEDENT);
}

tree::TerminalNode* FandangoParser::ConstraintContext::DEDENT(size_t i) {
  return getToken(FandangoParser::DEDENT, i);
}

tree::TerminalNode* FandangoParser::ConstraintContext::MINIMIZING() {
  return getToken(FandangoParser::MINIMIZING, 0);
}

FandangoParser::ExprContext* FandangoParser::ConstraintContext::expr() {
  return getRuleContext<FandangoParser::ExprContext>(0);
}

tree::TerminalNode* FandangoParser::ConstraintContext::SEMI_COLON() {
  return getToken(FandangoParser::SEMI_COLON, 0);
}

tree::TerminalNode* FandangoParser::ConstraintContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::ConstraintContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::ConstraintContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

tree::TerminalNode* FandangoParser::ConstraintContext::MAXIMIZING() {
  return getToken(FandangoParser::MAXIMIZING, 0);
}


size_t FandangoParser::ConstraintContext::getRuleIndex() const {
  return FandangoParser::RuleConstraint;
}


std::any FandangoParser::ConstraintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitConstraint(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ConstraintContext* FandangoParser::constraint() {
  ConstraintContext *_localctx = _tracker.createInstance<ConstraintContext>(_ctx, getState());
  enterRule(_localctx, 32, FandangoParser::RuleConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(765);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(705);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::INDENT) {
        setState(702);
        match(FandangoParser::INDENT);
        setState(707);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(708);
      match(FandangoParser::WHERE);
      setState(709);
      implies();
      setState(713);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::DEDENT) {
        setState(710);
        match(FandangoParser::DEDENT);
        setState(715);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(719);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::INDENT) {
        setState(716);
        match(FandangoParser::INDENT);
        setState(721);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(722);
      match(FandangoParser::MINIMIZING);
      setState(723);
      expr();
      setState(731);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(724);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(726); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(725);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(728); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(730);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(736);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::DEDENT) {
        setState(733);
        match(FandangoParser::DEDENT);
        setState(738);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(742);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::INDENT) {
        setState(739);
        match(FandangoParser::INDENT);
        setState(744);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(745);
      match(FandangoParser::MAXIMIZING);
      setState(746);
      expr();
      setState(754);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(747);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(749); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(748);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(751); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(753);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(759);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::DEDENT) {
        setState(756);
        match(FandangoParser::DEDENT);
        setState(761);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(762);
      implies();
      setState(763);
      match(FandangoParser::SEMI_COLON);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImpliesContext ------------------------------------------------------------------

FandangoParser::ImpliesContext::ImpliesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Formula_disjunctionContext *> FandangoParser::ImpliesContext::formula_disjunction() {
  return getRuleContexts<FandangoParser::Formula_disjunctionContext>();
}

FandangoParser::Formula_disjunctionContext* FandangoParser::ImpliesContext::formula_disjunction(size_t i) {
  return getRuleContext<FandangoParser::Formula_disjunctionContext>(i);
}

tree::TerminalNode* FandangoParser::ImpliesContext::ARROW() {
  return getToken(FandangoParser::ARROW, 0);
}

tree::TerminalNode* FandangoParser::ImpliesContext::SEMI_COLON() {
  return getToken(FandangoParser::SEMI_COLON, 0);
}

tree::TerminalNode* FandangoParser::ImpliesContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::ImpliesContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

FandangoParser::QuantifierContext* FandangoParser::ImpliesContext::quantifier() {
  return getRuleContext<FandangoParser::QuantifierContext>(0);
}


size_t FandangoParser::ImpliesContext::getRuleIndex() const {
  return FandangoParser::RuleImplies;
}


std::any FandangoParser::ImpliesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImplies(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ImpliesContext* FandangoParser::implies() {
  ImpliesContext *_localctx = _tracker.createInstance<ImpliesContext>(_ctx, getState());
  enterRule(_localctx, 34, FandangoParser::RuleImplies);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(773);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(767);
      formula_disjunction();
      setState(768);
      match(FandangoParser::ARROW);
      setState(769);
      formula_disjunction();
      setState(770);
      _la = _input->LA(1);
      if (!(_la == FandangoParser::EOF || _la == FandangoParser::SEMI_COLON

      || _la == FandangoParser::NEWLINE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(772);
      quantifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuantifierContext ------------------------------------------------------------------

FandangoParser::QuantifierContext::QuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::QuantifierContext::FORALL() {
  return getToken(FandangoParser::FORALL, 0);
}

FandangoParser::NonterminalContext* FandangoParser::QuantifierContext::nonterminal() {
  return getRuleContext<FandangoParser::NonterminalContext>(0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Dot_selectionContext* FandangoParser::QuantifierContext::dot_selection() {
  return getRuleContext<FandangoParser::Dot_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::QuantifierContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::QuantifierContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

tree::TerminalNode* FandangoParser::QuantifierContext::INDENT() {
  return getToken(FandangoParser::INDENT, 0);
}

FandangoParser::QuantifierContext* FandangoParser::QuantifierContext::quantifier() {
  return getRuleContext<FandangoParser::QuantifierContext>(0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::DEDENT() {
  return getToken(FandangoParser::DEDENT, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::EXISTS() {
  return getToken(FandangoParser::EXISTS, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::ANY() {
  return getToken(FandangoParser::ANY, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::QuantifierContext::OPEN_PAREN() {
  return getTokens(FandangoParser::OPEN_PAREN);
}

tree::TerminalNode* FandangoParser::QuantifierContext::OPEN_PAREN(size_t i) {
  return getToken(FandangoParser::OPEN_PAREN, i);
}

FandangoParser::Quantifier_in_lineContext* FandangoParser::QuantifierContext::quantifier_in_line() {
  return getRuleContext<FandangoParser::Quantifier_in_lineContext>(0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::FOR() {
  return getToken(FandangoParser::FOR, 0);
}

FandangoParser::Star_selectionContext* FandangoParser::QuantifierContext::star_selection() {
  return getRuleContext<FandangoParser::Star_selectionContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::QuantifierContext::CLOSE_PAREN() {
  return getTokens(FandangoParser::CLOSE_PAREN);
}

tree::TerminalNode* FandangoParser::QuantifierContext::CLOSE_PAREN(size_t i) {
  return getToken(FandangoParser::CLOSE_PAREN, i);
}

FandangoParser::IdentifierContext* FandangoParser::QuantifierContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::SEMI_COLON() {
  return getToken(FandangoParser::SEMI_COLON, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* FandangoParser::QuantifierContext::ALL() {
  return getToken(FandangoParser::ALL, 0);
}

FandangoParser::Formula_disjunctionContext* FandangoParser::QuantifierContext::formula_disjunction() {
  return getRuleContext<FandangoParser::Formula_disjunctionContext>(0);
}


size_t FandangoParser::QuantifierContext::getRuleIndex() const {
  return FandangoParser::RuleQuantifier;
}


std::any FandangoParser::QuantifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitQuantifier(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::QuantifierContext* FandangoParser::quantifier() {
  QuantifierContext *_localctx = _tracker.createInstance<QuantifierContext>(_ctx, getState());
  enterRule(_localctx, 36, FandangoParser::RuleQuantifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(983);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(775);
      match(FandangoParser::FORALL);
      setState(776);
      nonterminal();
      setState(777);
      match(FandangoParser::IN);
      setState(778);
      dot_selection(0);
      setState(779);
      match(FandangoParser::COLON);
      setState(786);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::NEWLINE: {
          setState(780);
          match(FandangoParser::NEWLINE);
          setState(781);
          match(FandangoParser::INDENT);
          setState(782);
          quantifier();
          setState(783);
          match(FandangoParser::DEDENT);
          break;
        }

        case FandangoParser::FSTRING_START_QUOTE:
        case FandangoParser::FSTRING_START_SINGLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::AWAIT:
        case FandangoParser::FALSE:
        case FandangoParser::NONE:
        case FandangoParser::NOT:
        case FandangoParser::TRUE:
        case FandangoParser::FORALL:
        case FandangoParser::EXISTS:
        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::POWER:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::LESS_THAN: {
          setState(785);
          quantifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(788);
      match(FandangoParser::EXISTS);
      setState(789);
      nonterminal();
      setState(790);
      match(FandangoParser::IN);
      setState(791);
      dot_selection(0);
      setState(792);
      match(FandangoParser::COLON);
      setState(799);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::NEWLINE: {
          setState(793);
          match(FandangoParser::NEWLINE);
          setState(794);
          match(FandangoParser::INDENT);
          setState(795);
          quantifier();
          setState(796);
          match(FandangoParser::DEDENT);
          break;
        }

        case FandangoParser::FSTRING_START_QUOTE:
        case FandangoParser::FSTRING_START_SINGLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::AWAIT:
        case FandangoParser::FALSE:
        case FandangoParser::NONE:
        case FandangoParser::NOT:
        case FandangoParser::TRUE:
        case FandangoParser::FORALL:
        case FandangoParser::EXISTS:
        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::POWER:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::LESS_THAN: {
          setState(798);
          quantifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(801);
      match(FandangoParser::ANY);
      setState(802);
      match(FandangoParser::OPEN_PAREN);
      setState(803);
      quantifier_in_line();
      setState(804);
      match(FandangoParser::FOR);
      setState(807);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(805);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(806);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(809);
      match(FandangoParser::IN);
      setState(810);
      star_selection();
      setState(811);
      match(FandangoParser::CLOSE_PAREN);
      setState(819);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(812);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(814); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(813);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(816); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(818);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(821);
      match(FandangoParser::ANY);
      setState(822);
      match(FandangoParser::OPEN_PAREN);
      setState(823);
      match(FandangoParser::OPEN_BRACK);
      setState(824);
      quantifier_in_line();
      setState(825);
      match(FandangoParser::FOR);
      setState(828);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(826);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(827);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(830);
      match(FandangoParser::IN);
      setState(831);
      star_selection();
      setState(832);
      match(FandangoParser::CLOSE_BRACK);
      setState(833);
      match(FandangoParser::CLOSE_PAREN);
      setState(841);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(834);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(836); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(835);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(838); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(840);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(843);
      match(FandangoParser::ANY);
      setState(844);
      match(FandangoParser::OPEN_PAREN);
      setState(845);
      match(FandangoParser::OPEN_PAREN);
      setState(846);
      quantifier_in_line();
      setState(847);
      match(FandangoParser::FOR);
      setState(850);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(848);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(849);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(852);
      match(FandangoParser::IN);
      setState(853);
      star_selection();
      setState(854);
      match(FandangoParser::CLOSE_BRACK);
      setState(855);
      match(FandangoParser::CLOSE_PAREN);
      setState(863);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(856);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(858); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(857);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(860); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(862);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(865);
      match(FandangoParser::ANY);
      setState(866);
      match(FandangoParser::OPEN_PAREN);
      setState(867);
      match(FandangoParser::OPEN_BRACE);
      setState(868);
      quantifier_in_line();
      setState(869);
      match(FandangoParser::FOR);
      setState(872);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(870);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(871);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(874);
      match(FandangoParser::IN);
      setState(875);
      star_selection();
      setState(876);
      match(FandangoParser::CLOSE_BRACE);
      setState(877);
      match(FandangoParser::CLOSE_PAREN);
      setState(885);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(878);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(880); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(879);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(882); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(884);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(887);
      match(FandangoParser::ALL);
      setState(888);
      match(FandangoParser::OPEN_PAREN);
      setState(889);
      quantifier_in_line();
      setState(890);
      match(FandangoParser::FOR);
      setState(893);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(891);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(892);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(895);
      match(FandangoParser::IN);
      setState(896);
      star_selection();
      setState(897);
      match(FandangoParser::CLOSE_PAREN);
      setState(905);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(898);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(900); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(899);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(902); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(904);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(907);
      match(FandangoParser::ALL);
      setState(908);
      match(FandangoParser::OPEN_PAREN);
      setState(909);
      match(FandangoParser::OPEN_PAREN);
      setState(910);
      quantifier_in_line();
      setState(911);
      match(FandangoParser::FOR);
      setState(914);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(912);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(913);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(916);
      match(FandangoParser::IN);
      setState(917);
      star_selection();
      setState(918);
      match(FandangoParser::CLOSE_PAREN);
      setState(919);
      match(FandangoParser::CLOSE_PAREN);
      setState(927);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(920);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(922); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(921);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(924); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(926);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(929);
      match(FandangoParser::ALL);
      setState(930);
      match(FandangoParser::OPEN_PAREN);
      setState(931);
      match(FandangoParser::OPEN_BRACK);
      setState(932);
      quantifier_in_line();
      setState(933);
      match(FandangoParser::FOR);
      setState(936);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(934);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(935);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(938);
      match(FandangoParser::IN);
      setState(939);
      star_selection();
      setState(940);
      match(FandangoParser::CLOSE_BRACK);
      setState(941);
      match(FandangoParser::CLOSE_PAREN);
      setState(949);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(942);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(944); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(943);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(946); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(948);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(951);
      match(FandangoParser::ALL);
      setState(952);
      match(FandangoParser::OPEN_PAREN);
      setState(953);
      match(FandangoParser::OPEN_BRACE);
      setState(954);
      quantifier_in_line();
      setState(955);
      match(FandangoParser::FOR);
      setState(958);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(956);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(957);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(960);
      match(FandangoParser::IN);
      setState(961);
      star_selection();
      setState(962);
      match(FandangoParser::CLOSE_BRACE);
      setState(963);
      match(FandangoParser::CLOSE_PAREN);
      setState(971);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(964);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(966); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(965);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(968); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(970);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(973);
      formula_disjunction();
      setState(981);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::SEMI_COLON: {
          setState(974);
          match(FandangoParser::SEMI_COLON);
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(976); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(975);
                    match(FandangoParser::NEWLINE);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(978); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          break;
        }

        case FandangoParser::EOF: {
          setState(980);
          match(FandangoParser::EOF);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Quantifier_in_lineContext ------------------------------------------------------------------

FandangoParser::Quantifier_in_lineContext::Quantifier_in_lineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::ANY() {
  return getToken(FandangoParser::ANY, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::Quantifier_in_lineContext::OPEN_PAREN() {
  return getTokens(FandangoParser::OPEN_PAREN);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::OPEN_PAREN(size_t i) {
  return getToken(FandangoParser::OPEN_PAREN, i);
}

FandangoParser::Quantifier_in_lineContext* FandangoParser::Quantifier_in_lineContext::quantifier_in_line() {
  return getRuleContext<FandangoParser::Quantifier_in_lineContext>(0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::FOR() {
  return getToken(FandangoParser::FOR, 0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Star_selectionContext* FandangoParser::Quantifier_in_lineContext::star_selection() {
  return getRuleContext<FandangoParser::Star_selectionContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Quantifier_in_lineContext::CLOSE_PAREN() {
  return getTokens(FandangoParser::CLOSE_PAREN);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::CLOSE_PAREN(size_t i) {
  return getToken(FandangoParser::CLOSE_PAREN, i);
}

FandangoParser::NonterminalContext* FandangoParser::Quantifier_in_lineContext::nonterminal() {
  return getRuleContext<FandangoParser::NonterminalContext>(0);
}

FandangoParser::IdentifierContext* FandangoParser::Quantifier_in_lineContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

tree::TerminalNode* FandangoParser::Quantifier_in_lineContext::ALL() {
  return getToken(FandangoParser::ALL, 0);
}

FandangoParser::Formula_disjunctionContext* FandangoParser::Quantifier_in_lineContext::formula_disjunction() {
  return getRuleContext<FandangoParser::Formula_disjunctionContext>(0);
}


size_t FandangoParser::Quantifier_in_lineContext::getRuleIndex() const {
  return FandangoParser::RuleQuantifier_in_line;
}


std::any FandangoParser::Quantifier_in_lineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitQuantifier_in_line(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Quantifier_in_lineContext* FandangoParser::quantifier_in_line() {
  Quantifier_in_lineContext *_localctx = _tracker.createInstance<Quantifier_in_lineContext>(_ctx, getState());
  enterRule(_localctx, 38, FandangoParser::RuleQuantifier_in_line);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1094);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(985);
      match(FandangoParser::ANY);
      setState(986);
      match(FandangoParser::OPEN_PAREN);
      setState(987);
      quantifier_in_line();
      setState(988);
      match(FandangoParser::FOR);
      setState(991);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(989);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(990);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(993);
      match(FandangoParser::IN);
      setState(994);
      star_selection();
      setState(995);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(997);
      match(FandangoParser::ANY);
      setState(998);
      match(FandangoParser::OPEN_PAREN);
      setState(999);
      match(FandangoParser::OPEN_BRACK);
      setState(1000);
      quantifier_in_line();
      setState(1001);
      match(FandangoParser::FOR);
      setState(1004);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(1002);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(1003);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1006);
      match(FandangoParser::IN);
      setState(1007);
      star_selection();
      setState(1008);
      match(FandangoParser::CLOSE_BRACK);
      setState(1009);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1011);
      match(FandangoParser::ANY);
      setState(1012);
      match(FandangoParser::OPEN_PAREN);
      setState(1013);
      match(FandangoParser::OPEN_PAREN);
      setState(1014);
      quantifier_in_line();
      setState(1015);
      match(FandangoParser::FOR);
      setState(1018);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(1016);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(1017);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1020);
      match(FandangoParser::IN);
      setState(1021);
      star_selection();
      setState(1022);
      match(FandangoParser::CLOSE_BRACK);
      setState(1023);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1025);
      match(FandangoParser::ANY);
      setState(1026);
      match(FandangoParser::OPEN_PAREN);
      setState(1027);
      match(FandangoParser::OPEN_BRACE);
      setState(1028);
      quantifier_in_line();
      setState(1029);
      match(FandangoParser::FOR);
      setState(1032);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(1030);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(1031);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1034);
      match(FandangoParser::IN);
      setState(1035);
      star_selection();
      setState(1036);
      match(FandangoParser::CLOSE_BRACE);
      setState(1037);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1039);
      match(FandangoParser::ALL);
      setState(1040);
      match(FandangoParser::OPEN_PAREN);
      setState(1041);
      quantifier_in_line();
      setState(1042);
      match(FandangoParser::FOR);
      setState(1045);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(1043);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(1044);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1047);
      match(FandangoParser::IN);
      setState(1048);
      star_selection();
      setState(1049);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1051);
      match(FandangoParser::ALL);
      setState(1052);
      match(FandangoParser::OPEN_PAREN);
      setState(1053);
      match(FandangoParser::OPEN_PAREN);
      setState(1054);
      quantifier_in_line();
      setState(1055);
      match(FandangoParser::FOR);
      setState(1058);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(1056);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(1057);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1060);
      match(FandangoParser::IN);
      setState(1061);
      star_selection();
      setState(1062);
      match(FandangoParser::CLOSE_PAREN);
      setState(1063);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1065);
      match(FandangoParser::ALL);
      setState(1066);
      match(FandangoParser::OPEN_PAREN);
      setState(1067);
      match(FandangoParser::OPEN_BRACK);
      setState(1068);
      quantifier_in_line();
      setState(1069);
      match(FandangoParser::FOR);
      setState(1072);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(1070);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(1071);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1074);
      match(FandangoParser::IN);
      setState(1075);
      star_selection();
      setState(1076);
      match(FandangoParser::CLOSE_BRACK);
      setState(1077);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1079);
      match(FandangoParser::ALL);
      setState(1080);
      match(FandangoParser::OPEN_PAREN);
      setState(1081);
      match(FandangoParser::OPEN_BRACE);
      setState(1082);
      quantifier_in_line();
      setState(1083);
      match(FandangoParser::FOR);
      setState(1086);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::LESS_THAN: {
          setState(1084);
          nonterminal();
          break;
        }

        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME: {
          setState(1085);
          identifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1088);
      match(FandangoParser::IN);
      setState(1089);
      star_selection();
      setState(1090);
      match(FandangoParser::CLOSE_BRACE);
      setState(1091);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1093);
      formula_disjunction();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_disjunctionContext ------------------------------------------------------------------

FandangoParser::Formula_disjunctionContext::Formula_disjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Formula_conjunctionContext *> FandangoParser::Formula_disjunctionContext::formula_conjunction() {
  return getRuleContexts<FandangoParser::Formula_conjunctionContext>();
}

FandangoParser::Formula_conjunctionContext* FandangoParser::Formula_disjunctionContext::formula_conjunction(size_t i) {
  return getRuleContext<FandangoParser::Formula_conjunctionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Formula_disjunctionContext::OR() {
  return getTokens(FandangoParser::OR);
}

tree::TerminalNode* FandangoParser::Formula_disjunctionContext::OR(size_t i) {
  return getToken(FandangoParser::OR, i);
}


size_t FandangoParser::Formula_disjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_disjunction;
}


std::any FandangoParser::Formula_disjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_disjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_disjunctionContext* FandangoParser::formula_disjunction() {
  Formula_disjunctionContext *_localctx = _tracker.createInstance<Formula_disjunctionContext>(_ctx, getState());
  enterRule(_localctx, 40, FandangoParser::RuleFormula_disjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1096);
    formula_conjunction();
    setState(1101);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR) {
      setState(1097);
      match(FandangoParser::OR);
      setState(1098);
      formula_conjunction();
      setState(1103);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_conjunctionContext ------------------------------------------------------------------

FandangoParser::Formula_conjunctionContext::Formula_conjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Formula_atomContext *> FandangoParser::Formula_conjunctionContext::formula_atom() {
  return getRuleContexts<FandangoParser::Formula_atomContext>();
}

FandangoParser::Formula_atomContext* FandangoParser::Formula_conjunctionContext::formula_atom(size_t i) {
  return getRuleContext<FandangoParser::Formula_atomContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Formula_conjunctionContext::AND() {
  return getTokens(FandangoParser::AND);
}

tree::TerminalNode* FandangoParser::Formula_conjunctionContext::AND(size_t i) {
  return getToken(FandangoParser::AND, i);
}


size_t FandangoParser::Formula_conjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_conjunction;
}


std::any FandangoParser::Formula_conjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_conjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_conjunctionContext* FandangoParser::formula_conjunction() {
  Formula_conjunctionContext *_localctx = _tracker.createInstance<Formula_conjunctionContext>(_ctx, getState());
  enterRule(_localctx, 42, FandangoParser::RuleFormula_conjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1104);
    formula_atom();
    setState(1109);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::AND) {
      setState(1105);
      match(FandangoParser::AND);
      setState(1106);
      formula_atom();
      setState(1111);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_atomContext ------------------------------------------------------------------

FandangoParser::Formula_atomContext::Formula_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Formula_comparisonContext* FandangoParser::Formula_atomContext::formula_comparison() {
  return getRuleContext<FandangoParser::Formula_comparisonContext>(0);
}

tree::TerminalNode* FandangoParser::Formula_atomContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::ImpliesContext* FandangoParser::Formula_atomContext::implies() {
  return getRuleContext<FandangoParser::ImpliesContext>(0);
}

tree::TerminalNode* FandangoParser::Formula_atomContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ExprContext* FandangoParser::Formula_atomContext::expr() {
  return getRuleContext<FandangoParser::ExprContext>(0);
}


size_t FandangoParser::Formula_atomContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_atom;
}


std::any FandangoParser::Formula_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_atomContext* FandangoParser::formula_atom() {
  Formula_atomContext *_localctx = _tracker.createInstance<Formula_atomContext>(_ctx, getState());
  enterRule(_localctx, 44, FandangoParser::RuleFormula_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1118);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1112);
      formula_comparison();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1113);
      match(FandangoParser::OPEN_PAREN);
      setState(1114);
      implies();
      setState(1115);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1117);
      expr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Formula_comparisonContext ------------------------------------------------------------------

FandangoParser::Formula_comparisonContext::Formula_comparisonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExprContext *> FandangoParser::Formula_comparisonContext::expr() {
  return getRuleContexts<FandangoParser::ExprContext>();
}

FandangoParser::ExprContext* FandangoParser::Formula_comparisonContext::expr(size_t i) {
  return getRuleContext<FandangoParser::ExprContext>(i);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::LESS_THAN() {
  return getToken(FandangoParser::LESS_THAN, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::GREATER_THAN() {
  return getToken(FandangoParser::GREATER_THAN, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::EQUALS() {
  return getToken(FandangoParser::EQUALS, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::GT_EQ() {
  return getToken(FandangoParser::GT_EQ, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::LT_EQ() {
  return getToken(FandangoParser::LT_EQ, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::NOT_EQ_1() {
  return getToken(FandangoParser::NOT_EQ_1, 0);
}

tree::TerminalNode* FandangoParser::Formula_comparisonContext::NOT_EQ_2() {
  return getToken(FandangoParser::NOT_EQ_2, 0);
}


size_t FandangoParser::Formula_comparisonContext::getRuleIndex() const {
  return FandangoParser::RuleFormula_comparison;
}


std::any FandangoParser::Formula_comparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFormula_comparison(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Formula_comparisonContext* FandangoParser::formula_comparison() {
  Formula_comparisonContext *_localctx = _tracker.createInstance<Formula_comparisonContext>(_ctx, getState());
  enterRule(_localctx, 46, FandangoParser::RuleFormula_comparison);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1120);
    expr();
    setState(1121);
    _la = _input->LA(1);
    if (!(((((_la - 100) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 100)) & 127) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1122);
    expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

FandangoParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Selector_lengthContext* FandangoParser::ExprContext::selector_length() {
  return getRuleContext<FandangoParser::Selector_lengthContext>(0);
}

std::vector<FandangoParser::InversionContext *> FandangoParser::ExprContext::inversion() {
  return getRuleContexts<FandangoParser::InversionContext>();
}

FandangoParser::InversionContext* FandangoParser::ExprContext::inversion(size_t i) {
  return getRuleContext<FandangoParser::InversionContext>(i);
}

tree::TerminalNode* FandangoParser::ExprContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

tree::TerminalNode* FandangoParser::ExprContext::ELSE() {
  return getToken(FandangoParser::ELSE, 0);
}


size_t FandangoParser::ExprContext::getRuleIndex() const {
  return FandangoParser::RuleExpr;
}


std::any FandangoParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExpr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ExprContext* FandangoParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 48, FandangoParser::RuleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1132);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1124);
      selector_length();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1125);
      inversion();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1126);
      inversion();
      setState(1127);
      match(FandangoParser::IF);
      setState(1128);
      inversion();
      setState(1129);
      match(FandangoParser::ELSE);
      setState(1130);
      inversion();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Selector_lengthContext ------------------------------------------------------------------

FandangoParser::Selector_lengthContext::Selector_lengthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::Selector_lengthContext::OR_OP() {
  return getTokens(FandangoParser::OR_OP);
}

tree::TerminalNode* FandangoParser::Selector_lengthContext::OR_OP(size_t i) {
  return getToken(FandangoParser::OR_OP, i);
}

FandangoParser::Dot_selectionContext* FandangoParser::Selector_lengthContext::dot_selection() {
  return getRuleContext<FandangoParser::Dot_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::Selector_lengthContext::LEN() {
  return getToken(FandangoParser::LEN, 0);
}

tree::TerminalNode* FandangoParser::Selector_lengthContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Star_selectionContext* FandangoParser::Selector_lengthContext::star_selection() {
  return getRuleContext<FandangoParser::Star_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::Selector_lengthContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Star_selection_or_dot_selectionContext* FandangoParser::Selector_lengthContext::star_selection_or_dot_selection() {
  return getRuleContext<FandangoParser::Star_selection_or_dot_selectionContext>(0);
}


size_t FandangoParser::Selector_lengthContext::getRuleIndex() const {
  return FandangoParser::RuleSelector_length;
}


std::any FandangoParser::Selector_lengthContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSelector_length(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Selector_lengthContext* FandangoParser::selector_length() {
  Selector_lengthContext *_localctx = _tracker.createInstance<Selector_lengthContext>(_ctx, getState());
  enterRule(_localctx, 50, FandangoParser::RuleSelector_length);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1144);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::OR_OP: {
        enterOuterAlt(_localctx, 1);
        setState(1134);
        match(FandangoParser::OR_OP);
        setState(1135);
        dot_selection(0);
        setState(1136);
        match(FandangoParser::OR_OP);
        break;
      }

      case FandangoParser::LEN: {
        enterOuterAlt(_localctx, 2);
        setState(1138);
        match(FandangoParser::LEN);
        setState(1139);
        match(FandangoParser::OPEN_PAREN);
        setState(1140);
        star_selection();
        setState(1141);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 3);
        setState(1143);
        star_selection_or_dot_selection();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_selection_or_dot_selectionContext ------------------------------------------------------------------

FandangoParser::Star_selection_or_dot_selectionContext::Star_selection_or_dot_selectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Star_selectionContext* FandangoParser::Star_selection_or_dot_selectionContext::star_selection() {
  return getRuleContext<FandangoParser::Star_selectionContext>(0);
}

FandangoParser::Dot_selectionContext* FandangoParser::Star_selection_or_dot_selectionContext::dot_selection() {
  return getRuleContext<FandangoParser::Dot_selectionContext>(0);
}


size_t FandangoParser::Star_selection_or_dot_selectionContext::getRuleIndex() const {
  return FandangoParser::RuleStar_selection_or_dot_selection;
}


std::any FandangoParser::Star_selection_or_dot_selectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_selection_or_dot_selection(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_selection_or_dot_selectionContext* FandangoParser::star_selection_or_dot_selection() {
  Star_selection_or_dot_selectionContext *_localctx = _tracker.createInstance<Star_selection_or_dot_selectionContext>(_ctx, getState());
  enterRule(_localctx, 52, FandangoParser::RuleStar_selection_or_dot_selection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1148);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STAR:
      case FandangoParser::POWER: {
        enterOuterAlt(_localctx, 1);
        setState(1146);
        star_selection();
        break;
      }

      case FandangoParser::OPEN_PAREN:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(1147);
        dot_selection(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_selectionContext ------------------------------------------------------------------

FandangoParser::Star_selectionContext::Star_selectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_selectionContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Dot_selectionContext* FandangoParser::Star_selectionContext::dot_selection() {
  return getRuleContext<FandangoParser::Dot_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::Star_selectionContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}


size_t FandangoParser::Star_selectionContext::getRuleIndex() const {
  return FandangoParser::RuleStar_selection;
}


std::any FandangoParser::Star_selectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_selection(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_selectionContext* FandangoParser::star_selection() {
  Star_selectionContext *_localctx = _tracker.createInstance<Star_selectionContext>(_ctx, getState());
  enterRule(_localctx, 54, FandangoParser::RuleStar_selection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1154);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1150);
        match(FandangoParser::STAR);
        setState(1151);
        dot_selection(0);
        break;
      }

      case FandangoParser::POWER: {
        enterOuterAlt(_localctx, 2);
        setState(1152);
        match(FandangoParser::POWER);
        setState(1153);
        dot_selection(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dot_selectionContext ------------------------------------------------------------------

FandangoParser::Dot_selectionContext::Dot_selectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SelectionContext* FandangoParser::Dot_selectionContext::selection() {
  return getRuleContext<FandangoParser::SelectionContext>(0);
}

FandangoParser::Dot_selectionContext* FandangoParser::Dot_selectionContext::dot_selection() {
  return getRuleContext<FandangoParser::Dot_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::Dot_selectionContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

tree::TerminalNode* FandangoParser::Dot_selectionContext::DOTDOT() {
  return getToken(FandangoParser::DOTDOT, 0);
}


size_t FandangoParser::Dot_selectionContext::getRuleIndex() const {
  return FandangoParser::RuleDot_selection;
}


std::any FandangoParser::Dot_selectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDot_selection(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Dot_selectionContext* FandangoParser::dot_selection() {
   return dot_selection(0);
}

FandangoParser::Dot_selectionContext* FandangoParser::dot_selection(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Dot_selectionContext *_localctx = _tracker.createInstance<Dot_selectionContext>(_ctx, parentState);
  FandangoParser::Dot_selectionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 56;
  enterRecursionRule(_localctx, 56, FandangoParser::RuleDot_selection, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1157);
    selection();
    _ctx->stop = _input->LT(-1);
    setState(1167);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1165);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Dot_selectionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleDot_selection);
          setState(1159);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1160);
          match(FandangoParser::DOT);
          setState(1161);
          selection();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Dot_selectionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleDot_selection);
          setState(1162);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1163);
          match(FandangoParser::DOTDOT);
          setState(1164);
          selection();
          break;
        }

        default:
          break;
        } 
      }
      setState(1169);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SelectionContext ------------------------------------------------------------------

FandangoParser::SelectionContext::SelectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Base_selectionContext* FandangoParser::SelectionContext::base_selection() {
  return getRuleContext<FandangoParser::Base_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::SelectionContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::Rs_slicesContext* FandangoParser::SelectionContext::rs_slices() {
  return getRuleContext<FandangoParser::Rs_slicesContext>(0);
}

tree::TerminalNode* FandangoParser::SelectionContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

tree::TerminalNode* FandangoParser::SelectionContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::Rs_pairsContext* FandangoParser::SelectionContext::rs_pairs() {
  return getRuleContext<FandangoParser::Rs_pairsContext>(0);
}

tree::TerminalNode* FandangoParser::SelectionContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::SelectionContext::getRuleIndex() const {
  return FandangoParser::RuleSelection;
}


std::any FandangoParser::SelectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSelection(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SelectionContext* FandangoParser::selection() {
  SelectionContext *_localctx = _tracker.createInstance<SelectionContext>(_ctx, getState());
  enterRule(_localctx, 58, FandangoParser::RuleSelection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1181);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1170);
      base_selection();
      setState(1171);
      match(FandangoParser::OPEN_BRACK);
      setState(1172);
      rs_slices();
      setState(1173);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1175);
      base_selection();
      setState(1176);
      match(FandangoParser::OPEN_BRACE);
      setState(1177);
      rs_pairs();
      setState(1178);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1180);
      base_selection();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Base_selectionContext ------------------------------------------------------------------

FandangoParser::Base_selectionContext::Base_selectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::NonterminalContext* FandangoParser::Base_selectionContext::nonterminal() {
  return getRuleContext<FandangoParser::NonterminalContext>(0);
}

tree::TerminalNode* FandangoParser::Base_selectionContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Dot_selectionContext* FandangoParser::Base_selectionContext::dot_selection() {
  return getRuleContext<FandangoParser::Dot_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::Base_selectionContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}


size_t FandangoParser::Base_selectionContext::getRuleIndex() const {
  return FandangoParser::RuleBase_selection;
}


std::any FandangoParser::Base_selectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBase_selection(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Base_selectionContext* FandangoParser::base_selection() {
  Base_selectionContext *_localctx = _tracker.createInstance<Base_selectionContext>(_ctx, getState());
  enterRule(_localctx, 60, FandangoParser::RuleBase_selection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1188);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 1);
        setState(1183);
        nonterminal();
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(1184);
        match(FandangoParser::OPEN_PAREN);
        setState(1185);
        dot_selection(0);
        setState(1186);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_pairsContext ------------------------------------------------------------------

FandangoParser::Rs_pairsContext::Rs_pairsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Rs_pairContext *> FandangoParser::Rs_pairsContext::rs_pair() {
  return getRuleContexts<FandangoParser::Rs_pairContext>();
}

FandangoParser::Rs_pairContext* FandangoParser::Rs_pairsContext::rs_pair(size_t i) {
  return getRuleContext<FandangoParser::Rs_pairContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_pairsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Rs_pairsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Rs_pairsContext::getRuleIndex() const {
  return FandangoParser::RuleRs_pairs;
}


std::any FandangoParser::Rs_pairsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_pairs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_pairsContext* FandangoParser::rs_pairs() {
  Rs_pairsContext *_localctx = _tracker.createInstance<Rs_pairsContext>(_ctx, getState());
  enterRule(_localctx, 62, FandangoParser::RuleRs_pairs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1190);
    rs_pair();
    setState(1195);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1191);
        match(FandangoParser::COMMA);
        setState(1192);
        rs_pair(); 
      }
      setState(1197);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx);
    }
    setState(1199);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1198);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_pairContext ------------------------------------------------------------------

FandangoParser::Rs_pairContext::Rs_pairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Rs_pairContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::NonterminalContext* FandangoParser::Rs_pairContext::nonterminal() {
  return getRuleContext<FandangoParser::NonterminalContext>(0);
}

tree::TerminalNode* FandangoParser::Rs_pairContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::Rs_sliceContext* FandangoParser::Rs_pairContext::rs_slice() {
  return getRuleContext<FandangoParser::Rs_sliceContext>(0);
}


size_t FandangoParser::Rs_pairContext::getRuleIndex() const {
  return FandangoParser::RuleRs_pair;
}


std::any FandangoParser::Rs_pairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_pair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_pairContext* FandangoParser::rs_pair() {
  Rs_pairContext *_localctx = _tracker.createInstance<Rs_pairContext>(_ctx, getState());
  enterRule(_localctx, 64, FandangoParser::RuleRs_pair);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1201);
    match(FandangoParser::STAR);
    setState(1202);
    nonterminal();
    setState(1205);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COLON) {
      setState(1203);
      match(FandangoParser::COLON);
      setState(1204);
      rs_slice();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_slicesContext ------------------------------------------------------------------

FandangoParser::Rs_slicesContext::Rs_slicesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Rs_sliceContext *> FandangoParser::Rs_slicesContext::rs_slice() {
  return getRuleContexts<FandangoParser::Rs_sliceContext>();
}

FandangoParser::Rs_sliceContext* FandangoParser::Rs_slicesContext::rs_slice(size_t i) {
  return getRuleContext<FandangoParser::Rs_sliceContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_slicesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Rs_slicesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Rs_slicesContext::getRuleIndex() const {
  return FandangoParser::RuleRs_slices;
}


std::any FandangoParser::Rs_slicesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_slices(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_slicesContext* FandangoParser::rs_slices() {
  Rs_slicesContext *_localctx = _tracker.createInstance<Rs_slicesContext>(_ctx, getState());
  enterRule(_localctx, 66, FandangoParser::RuleRs_slices);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1207);
    rs_slice();
    setState(1212);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1208);
        match(FandangoParser::COMMA);
        setState(1209);
        rs_slice(); 
      }
      setState(1214);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    }
    setState(1216);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1215);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rs_sliceContext ------------------------------------------------------------------

FandangoParser::Rs_sliceContext::Rs_sliceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_sliceContext::NUMBER() {
  return getTokens(FandangoParser::NUMBER);
}

tree::TerminalNode* FandangoParser::Rs_sliceContext::NUMBER(size_t i) {
  return getToken(FandangoParser::NUMBER, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Rs_sliceContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::Rs_sliceContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}


size_t FandangoParser::Rs_sliceContext::getRuleIndex() const {
  return FandangoParser::RuleRs_slice;
}


std::any FandangoParser::Rs_sliceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRs_slice(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Rs_sliceContext* FandangoParser::rs_slice() {
  Rs_sliceContext *_localctx = _tracker.createInstance<Rs_sliceContext>(_ctx, getState());
  enterRule(_localctx, 68, FandangoParser::RuleRs_slice);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1237);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1218);
      match(FandangoParser::NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1220);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(1219);
        match(FandangoParser::NUMBER);
      }
      setState(1222);
      match(FandangoParser::COLON);
      setState(1224);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(1223);
        match(FandangoParser::NUMBER);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1227);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(1226);
        match(FandangoParser::NUMBER);
      }
      setState(1229);
      match(FandangoParser::COLON);
      setState(1231);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(1230);
        match(FandangoParser::NUMBER);
      }
      setState(1233);
      match(FandangoParser::COLON);
      setState(1235);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::NUMBER) {
        setState(1234);
        match(FandangoParser::NUMBER);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PythonContext ------------------------------------------------------------------

FandangoParser::PythonContext::PythonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Compound_stmtContext* FandangoParser::PythonContext::compound_stmt() {
  return getRuleContext<FandangoParser::Compound_stmtContext>(0);
}

FandangoParser::Simple_stmtContext* FandangoParser::PythonContext::simple_stmt() {
  return getRuleContext<FandangoParser::Simple_stmtContext>(0);
}


size_t FandangoParser::PythonContext::getRuleIndex() const {
  return FandangoParser::RulePython;
}


std::any FandangoParser::PythonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPython(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PythonContext* FandangoParser::python() {
  PythonContext *_localctx = _tracker.createInstance<PythonContext>(_ctx, getState());
  enterRule(_localctx, 70, FandangoParser::RulePython);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1241);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ASYNC:
      case FandangoParser::CLASS:
      case FandangoParser::DEF:
      case FandangoParser::FOR:
      case FandangoParser::IF:
      case FandangoParser::MATCH:
      case FandangoParser::TRY:
      case FandangoParser::WHILE:
      case FandangoParser::WITH:
      case FandangoParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1239);
        compound_stmt();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(1240);
        simple_stmt();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Python_tagContext ------------------------------------------------------------------

FandangoParser::Python_tagContext::Python_tagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::StmtContext* FandangoParser::Python_tagContext::stmt() {
  return getRuleContext<FandangoParser::StmtContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Python_tagContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::Python_tagContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::Python_tagContext::getRuleIndex() const {
  return FandangoParser::RulePython_tag;
}


std::any FandangoParser::Python_tagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPython_tag(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Python_tagContext* FandangoParser::python_tag() {
  Python_tagContext *_localctx = _tracker.createInstance<Python_tagContext>(_ctx, getState());
  enterRule(_localctx, 72, FandangoParser::RulePython_tag);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1246);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(1243);
      match(FandangoParser::NEWLINE);
      setState(1248);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }

    setState(1249);
    stmt();
    setState(1253);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(1250);
      match(FandangoParser::NEWLINE);
      setState(1255);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Python_fileContext ------------------------------------------------------------------

FandangoParser::Python_fileContext::Python_fileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::StatementsContext* FandangoParser::Python_fileContext::statements() {
  return getRuleContext<FandangoParser::StatementsContext>(0);
}

tree::TerminalNode* FandangoParser::Python_fileContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::Python_fileContext::getRuleIndex() const {
  return FandangoParser::RulePython_file;
}


std::any FandangoParser::Python_fileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPython_file(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Python_fileContext* FandangoParser::python_file() {
  Python_fileContext *_localctx = _tracker.createInstance<Python_fileContext>(_ctx, getState());
  enterRule(_localctx, 74, FandangoParser::RulePython_file);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1257);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 542401154646786552) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 1125908589849113) != 0)) {
      setState(1256);
      statements();
    }
    setState(1260);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx)) {
    case 1: {
      setState(1259);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InteractiveContext ------------------------------------------------------------------

FandangoParser::InteractiveContext::InteractiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Statement_newlineContext* FandangoParser::InteractiveContext::statement_newline() {
  return getRuleContext<FandangoParser::Statement_newlineContext>(0);
}


size_t FandangoParser::InteractiveContext::getRuleIndex() const {
  return FandangoParser::RuleInteractive;
}


std::any FandangoParser::InteractiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitInteractive(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::InteractiveContext* FandangoParser::interactive() {
  InteractiveContext *_localctx = _tracker.createInstance<InteractiveContext>(_ctx, getState());
  enterRule(_localctx, 76, FandangoParser::RuleInteractive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1262);
    statement_newline();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EvalContext ------------------------------------------------------------------

FandangoParser::EvalContext::EvalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ExpressionsContext* FandangoParser::EvalContext::expressions() {
  return getRuleContext<FandangoParser::ExpressionsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::EvalContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::EvalContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

tree::TerminalNode* FandangoParser::EvalContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::EvalContext::getRuleIndex() const {
  return FandangoParser::RuleEval;
}


std::any FandangoParser::EvalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitEval(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::EvalContext* FandangoParser::eval() {
  EvalContext *_localctx = _tracker.createInstance<EvalContext>(_ctx, getState());
  enterRule(_localctx, 78, FandangoParser::RuleEval);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1264);
    expressions();
    setState(1268);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(1265);
      match(FandangoParser::NEWLINE);
      setState(1270);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1272);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
    case 1: {
      setState(1271);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_typeContext ------------------------------------------------------------------

FandangoParser::Func_typeContext::Func_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Func_typeContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Func_typeContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Func_typeContext::ARROW() {
  return getToken(FandangoParser::ARROW, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Func_typeContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Type_expressionsContext* FandangoParser::Func_typeContext::type_expressions() {
  return getRuleContext<FandangoParser::Type_expressionsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Func_typeContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::Func_typeContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}

tree::TerminalNode* FandangoParser::Func_typeContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}


size_t FandangoParser::Func_typeContext::getRuleIndex() const {
  return FandangoParser::RuleFunc_type;
}


std::any FandangoParser::Func_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunc_type(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Func_typeContext* FandangoParser::func_type() {
  Func_typeContext *_localctx = _tracker.createInstance<Func_typeContext>(_ctx, getState());
  enterRule(_localctx, 80, FandangoParser::RuleFunc_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1274);
    match(FandangoParser::OPEN_PAREN);
    setState(1276);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 93071897) != 0)) {
      setState(1275);
      type_expressions();
    }
    setState(1278);
    match(FandangoParser::CLOSE_PAREN);
    setState(1279);
    match(FandangoParser::ARROW);
    setState(1280);
    expression();
    setState(1284);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::NEWLINE) {
      setState(1281);
      match(FandangoParser::NEWLINE);
      setState(1286);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1288);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      setState(1287);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementsContext ------------------------------------------------------------------

FandangoParser::StatementsContext::StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::StmtContext *> FandangoParser::StatementsContext::stmt() {
  return getRuleContexts<FandangoParser::StmtContext>();
}

FandangoParser::StmtContext* FandangoParser::StatementsContext::stmt(size_t i) {
  return getRuleContext<FandangoParser::StmtContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::StatementsContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::StatementsContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::StatementsContext::getRuleIndex() const {
  return FandangoParser::RuleStatements;
}


std::any FandangoParser::StatementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStatements(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StatementsContext* FandangoParser::statements() {
  StatementsContext *_localctx = _tracker.createInstance<StatementsContext>(_ctx, getState());
  enterRule(_localctx, 82, FandangoParser::RuleStatements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1292); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1292);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::FSTRING_START_QUOTE:
        case FandangoParser::FSTRING_START_SINGLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::ASSERT:
        case FandangoParser::ASYNC:
        case FandangoParser::AWAIT:
        case FandangoParser::BREAK:
        case FandangoParser::CLASS:
        case FandangoParser::CONTINUE:
        case FandangoParser::DEF:
        case FandangoParser::DEL:
        case FandangoParser::FALSE:
        case FandangoParser::FOR:
        case FandangoParser::FROM:
        case FandangoParser::GLOBAL:
        case FandangoParser::IF:
        case FandangoParser::IMPORT:
        case FandangoParser::LAMBDA:
        case FandangoParser::MATCH:
        case FandangoParser::NONE:
        case FandangoParser::NONLOCAL:
        case FandangoParser::NOT:
        case FandangoParser::PASS:
        case FandangoParser::RAISE:
        case FandangoParser::RETURN:
        case FandangoParser::TRUE:
        case FandangoParser::TRY:
        case FandangoParser::TYPE:
        case FandangoParser::WHILE:
        case FandangoParser::WITH:
        case FandangoParser::YIELD:
        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::POWER:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::LESS_THAN:
        case FandangoParser::AT: {
          setState(1290);
          stmt();
          break;
        }

        case FandangoParser::NEWLINE: {
          setState(1291);
          match(FandangoParser::NEWLINE);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1294); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 542401154646786552) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 1125908589849113) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StmtContext ------------------------------------------------------------------

FandangoParser::StmtContext::StmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Compound_stmtContext* FandangoParser::StmtContext::compound_stmt() {
  return getRuleContext<FandangoParser::Compound_stmtContext>(0);
}

FandangoParser::Simple_stmtsContext* FandangoParser::StmtContext::simple_stmts() {
  return getRuleContext<FandangoParser::Simple_stmtsContext>(0);
}


size_t FandangoParser::StmtContext::getRuleIndex() const {
  return FandangoParser::RuleStmt;
}


std::any FandangoParser::StmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StmtContext* FandangoParser::stmt() {
  StmtContext *_localctx = _tracker.createInstance<StmtContext>(_ctx, getState());
  enterRule(_localctx, 84, FandangoParser::RuleStmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1298);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ASYNC:
      case FandangoParser::CLASS:
      case FandangoParser::DEF:
      case FandangoParser::FOR:
      case FandangoParser::IF:
      case FandangoParser::MATCH:
      case FandangoParser::TRY:
      case FandangoParser::WHILE:
      case FandangoParser::WITH:
      case FandangoParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1296);
        compound_stmt();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(1297);
        simple_stmts();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_newlineContext ------------------------------------------------------------------

FandangoParser::Statement_newlineContext::Statement_newlineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Compound_stmtContext* FandangoParser::Statement_newlineContext::compound_stmt() {
  return getRuleContext<FandangoParser::Compound_stmtContext>(0);
}

tree::TerminalNode* FandangoParser::Statement_newlineContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

FandangoParser::Simple_stmtsContext* FandangoParser::Statement_newlineContext::simple_stmts() {
  return getRuleContext<FandangoParser::Simple_stmtsContext>(0);
}


size_t FandangoParser::Statement_newlineContext::getRuleIndex() const {
  return FandangoParser::RuleStatement_newline;
}


std::any FandangoParser::Statement_newlineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStatement_newline(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Statement_newlineContext* FandangoParser::statement_newline() {
  Statement_newlineContext *_localctx = _tracker.createInstance<Statement_newlineContext>(_ctx, getState());
  enterRule(_localctx, 86, FandangoParser::RuleStatement_newline);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1305);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ASYNC:
      case FandangoParser::CLASS:
      case FandangoParser::DEF:
      case FandangoParser::FOR:
      case FandangoParser::IF:
      case FandangoParser::MATCH:
      case FandangoParser::TRY:
      case FandangoParser::WHILE:
      case FandangoParser::WITH:
      case FandangoParser::AT: {
        enterOuterAlt(_localctx, 1);
        setState(1300);
        compound_stmt();
        setState(1301);
        match(FandangoParser::NEWLINE);
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(1303);
        simple_stmts();
        break;
      }

      case FandangoParser::NEWLINE: {
        enterOuterAlt(_localctx, 3);
        setState(1304);
        match(FandangoParser::NEWLINE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_stmtsContext ------------------------------------------------------------------

FandangoParser::Simple_stmtsContext::Simple_stmtsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Simple_stmtContext *> FandangoParser::Simple_stmtsContext::simple_stmt() {
  return getRuleContexts<FandangoParser::Simple_stmtContext>();
}

FandangoParser::Simple_stmtContext* FandangoParser::Simple_stmtsContext::simple_stmt(size_t i) {
  return getRuleContext<FandangoParser::Simple_stmtContext>(i);
}

tree::TerminalNode* FandangoParser::Simple_stmtsContext::EOF() {
  return getToken(FandangoParser::EOF, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::Simple_stmtsContext::SEMI_COLON() {
  return getTokens(FandangoParser::SEMI_COLON);
}

tree::TerminalNode* FandangoParser::Simple_stmtsContext::SEMI_COLON(size_t i) {
  return getToken(FandangoParser::SEMI_COLON, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Simple_stmtsContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::Simple_stmtsContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::Simple_stmtsContext::getRuleIndex() const {
  return FandangoParser::RuleSimple_stmts;
}


std::any FandangoParser::Simple_stmtsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSimple_stmts(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Simple_stmtsContext* FandangoParser::simple_stmts() {
  Simple_stmtsContext *_localctx = _tracker.createInstance<Simple_stmtsContext>(_ctx, getState());
  enterRule(_localctx, 88, FandangoParser::RuleSimple_stmts);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1307);
    simple_stmt();
    setState(1312);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1308);
        match(FandangoParser::SEMI_COLON);
        setState(1309);
        simple_stmt(); 
      }
      setState(1314);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx);
    }
    setState(1316);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::SEMI_COLON) {
      setState(1315);
      match(FandangoParser::SEMI_COLON);
    }
    setState(1330);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      setState(1319); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1318);
                match(FandangoParser::NEWLINE);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1321); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(1326);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::NEWLINE) {
        setState(1323);
        match(FandangoParser::NEWLINE);
        setState(1328);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1329);
      match(FandangoParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_stmtContext ------------------------------------------------------------------

FandangoParser::Simple_stmtContext::Simple_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AssignmentContext* FandangoParser::Simple_stmtContext::assignment() {
  return getRuleContext<FandangoParser::AssignmentContext>(0);
}

FandangoParser::Type_aliasContext* FandangoParser::Simple_stmtContext::type_alias() {
  return getRuleContext<FandangoParser::Type_aliasContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Simple_stmtContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

FandangoParser::Return_stmtContext* FandangoParser::Simple_stmtContext::return_stmt() {
  return getRuleContext<FandangoParser::Return_stmtContext>(0);
}

FandangoParser::Import_stmtContext* FandangoParser::Simple_stmtContext::import_stmt() {
  return getRuleContext<FandangoParser::Import_stmtContext>(0);
}

FandangoParser::Raise_stmtContext* FandangoParser::Simple_stmtContext::raise_stmt() {
  return getRuleContext<FandangoParser::Raise_stmtContext>(0);
}

tree::TerminalNode* FandangoParser::Simple_stmtContext::PASS() {
  return getToken(FandangoParser::PASS, 0);
}

FandangoParser::Del_stmtContext* FandangoParser::Simple_stmtContext::del_stmt() {
  return getRuleContext<FandangoParser::Del_stmtContext>(0);
}

FandangoParser::Yield_stmtContext* FandangoParser::Simple_stmtContext::yield_stmt() {
  return getRuleContext<FandangoParser::Yield_stmtContext>(0);
}

FandangoParser::Assert_stmtContext* FandangoParser::Simple_stmtContext::assert_stmt() {
  return getRuleContext<FandangoParser::Assert_stmtContext>(0);
}

tree::TerminalNode* FandangoParser::Simple_stmtContext::BREAK() {
  return getToken(FandangoParser::BREAK, 0);
}

tree::TerminalNode* FandangoParser::Simple_stmtContext::CONTINUE() {
  return getToken(FandangoParser::CONTINUE, 0);
}

FandangoParser::Global_stmtContext* FandangoParser::Simple_stmtContext::global_stmt() {
  return getRuleContext<FandangoParser::Global_stmtContext>(0);
}

FandangoParser::Nonlocal_stmtContext* FandangoParser::Simple_stmtContext::nonlocal_stmt() {
  return getRuleContext<FandangoParser::Nonlocal_stmtContext>(0);
}


size_t FandangoParser::Simple_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleSimple_stmt;
}


std::any FandangoParser::Simple_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSimple_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Simple_stmtContext* FandangoParser::simple_stmt() {
  Simple_stmtContext *_localctx = _tracker.createInstance<Simple_stmtContext>(_ctx, getState());
  enterRule(_localctx, 90, FandangoParser::RuleSimple_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1346);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1332);
      assignment();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1333);
      type_alias();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1334);
      star_expressions();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1335);
      return_stmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1336);
      import_stmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1337);
      raise_stmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1338);
      match(FandangoParser::PASS);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1339);
      del_stmt();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1340);
      yield_stmt();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1341);
      assert_stmt();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1342);
      match(FandangoParser::BREAK);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1343);
      match(FandangoParser::CONTINUE);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1344);
      global_stmt();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1345);
      nonlocal_stmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compound_stmtContext ------------------------------------------------------------------

FandangoParser::Compound_stmtContext::Compound_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Function_defContext* FandangoParser::Compound_stmtContext::function_def() {
  return getRuleContext<FandangoParser::Function_defContext>(0);
}

FandangoParser::If_stmtContext* FandangoParser::Compound_stmtContext::if_stmt() {
  return getRuleContext<FandangoParser::If_stmtContext>(0);
}

FandangoParser::Class_defContext* FandangoParser::Compound_stmtContext::class_def() {
  return getRuleContext<FandangoParser::Class_defContext>(0);
}

FandangoParser::With_stmtContext* FandangoParser::Compound_stmtContext::with_stmt() {
  return getRuleContext<FandangoParser::With_stmtContext>(0);
}

FandangoParser::For_stmtContext* FandangoParser::Compound_stmtContext::for_stmt() {
  return getRuleContext<FandangoParser::For_stmtContext>(0);
}

FandangoParser::Try_stmtContext* FandangoParser::Compound_stmtContext::try_stmt() {
  return getRuleContext<FandangoParser::Try_stmtContext>(0);
}

FandangoParser::While_stmtContext* FandangoParser::Compound_stmtContext::while_stmt() {
  return getRuleContext<FandangoParser::While_stmtContext>(0);
}

FandangoParser::Match_stmtContext* FandangoParser::Compound_stmtContext::match_stmt() {
  return getRuleContext<FandangoParser::Match_stmtContext>(0);
}


size_t FandangoParser::Compound_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleCompound_stmt;
}


std::any FandangoParser::Compound_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCompound_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Compound_stmtContext* FandangoParser::compound_stmt() {
  Compound_stmtContext *_localctx = _tracker.createInstance<Compound_stmtContext>(_ctx, getState());
  enterRule(_localctx, 92, FandangoParser::RuleCompound_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1356);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1348);
      function_def();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1349);
      if_stmt();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1350);
      class_def();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1351);
      with_stmt();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1352);
      for_stmt();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1353);
      try_stmt();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1354);
      while_stmt();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1355);
      match_stmt();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentContext ------------------------------------------------------------------

FandangoParser::AssignmentContext::AssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::AssignmentContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::AssignmentContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::AssignmentContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::AssignmentContext::ASSIGN() {
  return getTokens(FandangoParser::ASSIGN);
}

tree::TerminalNode* FandangoParser::AssignmentContext::ASSIGN(size_t i) {
  return getToken(FandangoParser::ASSIGN, i);
}

FandangoParser::Annotated_rhsContext* FandangoParser::AssignmentContext::annotated_rhs() {
  return getRuleContext<FandangoParser::Annotated_rhsContext>(0);
}

tree::TerminalNode* FandangoParser::AssignmentContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Single_targetContext* FandangoParser::AssignmentContext::single_target() {
  return getRuleContext<FandangoParser::Single_targetContext>(0);
}

tree::TerminalNode* FandangoParser::AssignmentContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Single_subscript_attribute_targetContext* FandangoParser::AssignmentContext::single_subscript_attribute_target() {
  return getRuleContext<FandangoParser::Single_subscript_attribute_targetContext>(0);
}

FandangoParser::Yield_exprContext* FandangoParser::AssignmentContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::AssignmentContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

std::vector<FandangoParser::Star_targetsContext *> FandangoParser::AssignmentContext::star_targets() {
  return getRuleContexts<FandangoParser::Star_targetsContext>();
}

FandangoParser::Star_targetsContext* FandangoParser::AssignmentContext::star_targets(size_t i) {
  return getRuleContext<FandangoParser::Star_targetsContext>(i);
}

FandangoParser::AugassignContext* FandangoParser::AssignmentContext::augassign() {
  return getRuleContext<FandangoParser::AugassignContext>(0);
}


size_t FandangoParser::AssignmentContext::getRuleIndex() const {
  return FandangoParser::RuleAssignment;
}


std::any FandangoParser::AssignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAssignment(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AssignmentContext* FandangoParser::assignment() {
  AssignmentContext *_localctx = _tracker.createInstance<AssignmentContext>(_ctx, getState());
  enterRule(_localctx, 94, FandangoParser::RuleAssignment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1395);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1358);
      identifier();
      setState(1359);
      match(FandangoParser::COLON);
      setState(1360);
      expression();
      setState(1363);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(1361);
        match(FandangoParser::ASSIGN);
        setState(1362);
        annotated_rhs();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1370);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
      case 1: {
        setState(1365);
        match(FandangoParser::OPEN_PAREN);
        setState(1366);
        single_target();
        setState(1367);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

      case 2: {
        setState(1369);
        single_subscript_attribute_target();
        break;
      }

      default:
        break;
      }
      setState(1372);
      match(FandangoParser::COLON);
      setState(1373);
      expression();
      setState(1376);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(1374);
        match(FandangoParser::ASSIGN);
        setState(1375);
        annotated_rhs();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1381); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1378);
                star_targets();
                setState(1379);
                match(FandangoParser::ASSIGN);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1383); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1387);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::YIELD: {
          setState(1385);
          yield_expr();
          break;
        }

        case FandangoParser::FSTRING_START_QUOTE:
        case FandangoParser::FSTRING_START_SINGLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::AWAIT:
        case FandangoParser::FALSE:
        case FandangoParser::LAMBDA:
        case FandangoParser::NONE:
        case FandangoParser::NOT:
        case FandangoParser::TRUE:
        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::POWER:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::LESS_THAN: {
          setState(1386);
          star_expressions();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1389);
      single_target();
      setState(1390);
      augassign();
      setState(1393);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FandangoParser::YIELD: {
          setState(1391);
          yield_expr();
          break;
        }

        case FandangoParser::FSTRING_START_QUOTE:
        case FandangoParser::FSTRING_START_SINGLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
        case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
        case FandangoParser::STRING:
        case FandangoParser::NUMBER:
        case FandangoParser::AWAIT:
        case FandangoParser::FALSE:
        case FandangoParser::LAMBDA:
        case FandangoParser::NONE:
        case FandangoParser::NOT:
        case FandangoParser::TRUE:
        case FandangoParser::ANY:
        case FandangoParser::ALL:
        case FandangoParser::LEN:
        case FandangoParser::NAME:
        case FandangoParser::ELLIPSIS:
        case FandangoParser::STAR:
        case FandangoParser::OPEN_PAREN:
        case FandangoParser::POWER:
        case FandangoParser::OPEN_BRACK:
        case FandangoParser::OR_OP:
        case FandangoParser::ADD:
        case FandangoParser::MINUS:
        case FandangoParser::NOT_OP:
        case FandangoParser::OPEN_BRACE:
        case FandangoParser::LESS_THAN: {
          setState(1392);
          star_expressions();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotated_rhsContext ------------------------------------------------------------------

FandangoParser::Annotated_rhsContext::Annotated_rhsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Yield_exprContext* FandangoParser::Annotated_rhsContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Annotated_rhsContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}


size_t FandangoParser::Annotated_rhsContext::getRuleIndex() const {
  return FandangoParser::RuleAnnotated_rhs;
}


std::any FandangoParser::Annotated_rhsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAnnotated_rhs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Annotated_rhsContext* FandangoParser::annotated_rhs() {
  Annotated_rhsContext *_localctx = _tracker.createInstance<Annotated_rhsContext>(_ctx, getState());
  enterRule(_localctx, 96, FandangoParser::RuleAnnotated_rhs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1399);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::YIELD: {
        enterOuterAlt(_localctx, 1);
        setState(1397);
        yield_expr();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(1398);
        star_expressions();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AugassignContext ------------------------------------------------------------------

FandangoParser::AugassignContext::AugassignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::AugassignContext::ADD_ASSIGN() {
  return getToken(FandangoParser::ADD_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::SUB_ASSIGN() {
  return getToken(FandangoParser::SUB_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::MULT_ASSIGN() {
  return getToken(FandangoParser::MULT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::AT_ASSIGN() {
  return getToken(FandangoParser::AT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::DIV_ASSIGN() {
  return getToken(FandangoParser::DIV_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::MOD_ASSIGN() {
  return getToken(FandangoParser::MOD_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::AND_ASSIGN() {
  return getToken(FandangoParser::AND_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::OR_ASSIGN() {
  return getToken(FandangoParser::OR_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::XOR_ASSIGN() {
  return getToken(FandangoParser::XOR_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::LEFT_SHIFT_ASSIGN() {
  return getToken(FandangoParser::LEFT_SHIFT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::RIGHT_SHIFT_ASSIGN() {
  return getToken(FandangoParser::RIGHT_SHIFT_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::POWER_ASSIGN() {
  return getToken(FandangoParser::POWER_ASSIGN, 0);
}

tree::TerminalNode* FandangoParser::AugassignContext::IDIV_ASSIGN() {
  return getToken(FandangoParser::IDIV_ASSIGN, 0);
}


size_t FandangoParser::AugassignContext::getRuleIndex() const {
  return FandangoParser::RuleAugassign;
}


std::any FandangoParser::AugassignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAugassign(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AugassignContext* FandangoParser::augassign() {
  AugassignContext *_localctx = _tracker.createInstance<AugassignContext>(_ctx, getState());
  enterRule(_localctx, 98, FandangoParser::RuleAugassign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1401);
    _la = _input->LA(1);
    if (!(((((_la - 109) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 109)) & 8191) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_stmtContext ------------------------------------------------------------------

FandangoParser::Return_stmtContext::Return_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Return_stmtContext::RETURN() {
  return getToken(FandangoParser::RETURN, 0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Return_stmtContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}


size_t FandangoParser::Return_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleReturn_stmt;
}


std::any FandangoParser::Return_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitReturn_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Return_stmtContext* FandangoParser::return_stmt() {
  Return_stmtContext *_localctx = _tracker.createInstance<Return_stmtContext>(_ctx, getState());
  enterRule(_localctx, 100, FandangoParser::RuleReturn_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1403);
    match(FandangoParser::RETURN);
    setState(1405);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx)) {
    case 1: {
      setState(1404);
      star_expressions();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Raise_stmtContext ------------------------------------------------------------------

FandangoParser::Raise_stmtContext::Raise_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Raise_stmtContext::RAISE() {
  return getToken(FandangoParser::RAISE, 0);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::Raise_stmtContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::Raise_stmtContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::Raise_stmtContext::FROM() {
  return getToken(FandangoParser::FROM, 0);
}


size_t FandangoParser::Raise_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleRaise_stmt;
}


std::any FandangoParser::Raise_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitRaise_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Raise_stmtContext* FandangoParser::raise_stmt() {
  Raise_stmtContext *_localctx = _tracker.createInstance<Raise_stmtContext>(_ctx, getState());
  enterRule(_localctx, 102, FandangoParser::RuleRaise_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1414);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1407);
      match(FandangoParser::RAISE);
      setState(1408);
      expression();
      setState(1411);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx)) {
      case 1: {
        setState(1409);
        match(FandangoParser::FROM);
        setState(1410);
        expression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1413);
      match(FandangoParser::RAISE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_stmtContext ------------------------------------------------------------------

FandangoParser::Global_stmtContext::Global_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Global_stmtContext::GLOBAL() {
  return getToken(FandangoParser::GLOBAL, 0);
}

std::vector<FandangoParser::IdentifierContext *> FandangoParser::Global_stmtContext::identifier() {
  return getRuleContexts<FandangoParser::IdentifierContext>();
}

FandangoParser::IdentifierContext* FandangoParser::Global_stmtContext::identifier(size_t i) {
  return getRuleContext<FandangoParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Global_stmtContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Global_stmtContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Global_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleGlobal_stmt;
}


std::any FandangoParser::Global_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGlobal_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Global_stmtContext* FandangoParser::global_stmt() {
  Global_stmtContext *_localctx = _tracker.createInstance<Global_stmtContext>(_ctx, getState());
  enterRule(_localctx, 104, FandangoParser::RuleGlobal_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1416);
    match(FandangoParser::GLOBAL);
    setState(1417);
    identifier();
    setState(1422);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::COMMA) {
      setState(1418);
      match(FandangoParser::COMMA);
      setState(1419);
      identifier();
      setState(1424);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nonlocal_stmtContext ------------------------------------------------------------------

FandangoParser::Nonlocal_stmtContext::Nonlocal_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Nonlocal_stmtContext::NONLOCAL() {
  return getToken(FandangoParser::NONLOCAL, 0);
}

std::vector<FandangoParser::IdentifierContext *> FandangoParser::Nonlocal_stmtContext::identifier() {
  return getRuleContexts<FandangoParser::IdentifierContext>();
}

FandangoParser::IdentifierContext* FandangoParser::Nonlocal_stmtContext::identifier(size_t i) {
  return getRuleContext<FandangoParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Nonlocal_stmtContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Nonlocal_stmtContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Nonlocal_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleNonlocal_stmt;
}


std::any FandangoParser::Nonlocal_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNonlocal_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Nonlocal_stmtContext* FandangoParser::nonlocal_stmt() {
  Nonlocal_stmtContext *_localctx = _tracker.createInstance<Nonlocal_stmtContext>(_ctx, getState());
  enterRule(_localctx, 106, FandangoParser::RuleNonlocal_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1425);
    match(FandangoParser::NONLOCAL);
    setState(1426);
    identifier();
    setState(1431);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::COMMA) {
      setState(1427);
      match(FandangoParser::COMMA);
      setState(1428);
      identifier();
      setState(1433);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Del_stmtContext ------------------------------------------------------------------

FandangoParser::Del_stmtContext::Del_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Del_stmtContext::DEL() {
  return getToken(FandangoParser::DEL, 0);
}

FandangoParser::Del_targetsContext* FandangoParser::Del_stmtContext::del_targets() {
  return getRuleContext<FandangoParser::Del_targetsContext>(0);
}


size_t FandangoParser::Del_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleDel_stmt;
}


std::any FandangoParser::Del_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_stmtContext* FandangoParser::del_stmt() {
  Del_stmtContext *_localctx = _tracker.createInstance<Del_stmtContext>(_ctx, getState());
  enterRule(_localctx, 108, FandangoParser::RuleDel_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1434);
    match(FandangoParser::DEL);
    setState(1435);
    del_targets();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Yield_stmtContext ------------------------------------------------------------------

FandangoParser::Yield_stmtContext::Yield_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Yield_exprContext* FandangoParser::Yield_stmtContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}


size_t FandangoParser::Yield_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleYield_stmt;
}


std::any FandangoParser::Yield_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitYield_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Yield_stmtContext* FandangoParser::yield_stmt() {
  Yield_stmtContext *_localctx = _tracker.createInstance<Yield_stmtContext>(_ctx, getState());
  enterRule(_localctx, 110, FandangoParser::RuleYield_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1437);
    yield_expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assert_stmtContext ------------------------------------------------------------------

FandangoParser::Assert_stmtContext::Assert_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Assert_stmtContext::ASSERT() {
  return getToken(FandangoParser::ASSERT, 0);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::Assert_stmtContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::Assert_stmtContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::Assert_stmtContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Assert_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleAssert_stmt;
}


std::any FandangoParser::Assert_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAssert_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Assert_stmtContext* FandangoParser::assert_stmt() {
  Assert_stmtContext *_localctx = _tracker.createInstance<Assert_stmtContext>(_ctx, getState());
  enterRule(_localctx, 112, FandangoParser::RuleAssert_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1439);
    match(FandangoParser::ASSERT);
    setState(1440);
    expression();
    setState(1443);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1441);
      match(FandangoParser::COMMA);
      setState(1442);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_stmtContext ------------------------------------------------------------------

FandangoParser::Import_stmtContext::Import_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Import_nameContext* FandangoParser::Import_stmtContext::import_name() {
  return getRuleContext<FandangoParser::Import_nameContext>(0);
}

FandangoParser::Import_fromContext* FandangoParser::Import_stmtContext::import_from() {
  return getRuleContext<FandangoParser::Import_fromContext>(0);
}


size_t FandangoParser::Import_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleImport_stmt;
}


std::any FandangoParser::Import_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_stmtContext* FandangoParser::import_stmt() {
  Import_stmtContext *_localctx = _tracker.createInstance<Import_stmtContext>(_ctx, getState());
  enterRule(_localctx, 114, FandangoParser::RuleImport_stmt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1447);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::IMPORT: {
        enterOuterAlt(_localctx, 1);
        setState(1445);
        import_name();
        break;
      }

      case FandangoParser::FROM: {
        enterOuterAlt(_localctx, 2);
        setState(1446);
        import_from();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_nameContext ------------------------------------------------------------------

FandangoParser::Import_nameContext::Import_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Import_nameContext::IMPORT() {
  return getToken(FandangoParser::IMPORT, 0);
}

FandangoParser::Dotted_as_namesContext* FandangoParser::Import_nameContext::dotted_as_names() {
  return getRuleContext<FandangoParser::Dotted_as_namesContext>(0);
}


size_t FandangoParser::Import_nameContext::getRuleIndex() const {
  return FandangoParser::RuleImport_name;
}


std::any FandangoParser::Import_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_name(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_nameContext* FandangoParser::import_name() {
  Import_nameContext *_localctx = _tracker.createInstance<Import_nameContext>(_ctx, getState());
  enterRule(_localctx, 116, FandangoParser::RuleImport_name);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1449);
    match(FandangoParser::IMPORT);
    setState(1450);
    dotted_as_names();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_fromContext ------------------------------------------------------------------

FandangoParser::Import_fromContext::Import_fromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Import_fromContext::FROM() {
  return getToken(FandangoParser::FROM, 0);
}

FandangoParser::Dotted_nameContext* FandangoParser::Import_fromContext::dotted_name() {
  return getRuleContext<FandangoParser::Dotted_nameContext>(0);
}

tree::TerminalNode* FandangoParser::Import_fromContext::IMPORT() {
  return getToken(FandangoParser::IMPORT, 0);
}

FandangoParser::Import_from_targetsContext* FandangoParser::Import_fromContext::import_from_targets() {
  return getRuleContext<FandangoParser::Import_from_targetsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Import_fromContext::DOT() {
  return getTokens(FandangoParser::DOT);
}

tree::TerminalNode* FandangoParser::Import_fromContext::DOT(size_t i) {
  return getToken(FandangoParser::DOT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Import_fromContext::ELLIPSIS() {
  return getTokens(FandangoParser::ELLIPSIS);
}

tree::TerminalNode* FandangoParser::Import_fromContext::ELLIPSIS(size_t i) {
  return getToken(FandangoParser::ELLIPSIS, i);
}


size_t FandangoParser::Import_fromContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from;
}


std::any FandangoParser::Import_fromContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_fromContext* FandangoParser::import_from() {
  Import_fromContext *_localctx = _tracker.createInstance<Import_fromContext>(_ctx, getState());
  enterRule(_localctx, 118, FandangoParser::RuleImport_from);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1471);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1452);
      match(FandangoParser::FROM);
      setState(1456);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::ELLIPSIS

      || _la == FandangoParser::DOT) {
        setState(1453);
        _la = _input->LA(1);
        if (!(_la == FandangoParser::ELLIPSIS

        || _la == FandangoParser::DOT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1458);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1459);
      dotted_name(0);
      setState(1460);
      match(FandangoParser::IMPORT);
      setState(1461);
      import_from_targets();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1463);
      match(FandangoParser::FROM);
      setState(1465); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1464);
        _la = _input->LA(1);
        if (!(_la == FandangoParser::ELLIPSIS

        || _la == FandangoParser::DOT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1467); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::ELLIPSIS

      || _la == FandangoParser::DOT);
      setState(1469);
      match(FandangoParser::IMPORT);
      setState(1470);
      import_from_targets();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_from_targetsContext ------------------------------------------------------------------

FandangoParser::Import_from_targetsContext::Import_from_targetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Import_from_as_namesContext* FandangoParser::Import_from_targetsContext::import_from_as_names() {
  return getRuleContext<FandangoParser::Import_from_as_namesContext>(0);
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

tree::TerminalNode* FandangoParser::Import_from_targetsContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}


size_t FandangoParser::Import_from_targetsContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from_targets;
}


std::any FandangoParser::Import_from_targetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from_targets(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_from_targetsContext* FandangoParser::import_from_targets() {
  Import_from_targetsContext *_localctx = _tracker.createInstance<Import_from_targetsContext>(_ctx, getState());
  enterRule(_localctx, 120, FandangoParser::RuleImport_from_targets);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1482);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(1473);
        match(FandangoParser::OPEN_PAREN);
        setState(1474);
        import_from_as_names();
        setState(1476);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::COMMA) {
          setState(1475);
          match(FandangoParser::COMMA);
        }
        setState(1478);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 2);
        setState(1480);
        import_from_as_names();
        break;
      }

      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 3);
        setState(1481);
        match(FandangoParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_from_as_namesContext ------------------------------------------------------------------

FandangoParser::Import_from_as_namesContext::Import_from_as_namesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Import_from_as_nameContext *> FandangoParser::Import_from_as_namesContext::import_from_as_name() {
  return getRuleContexts<FandangoParser::Import_from_as_nameContext>();
}

FandangoParser::Import_from_as_nameContext* FandangoParser::Import_from_as_namesContext::import_from_as_name(size_t i) {
  return getRuleContext<FandangoParser::Import_from_as_nameContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Import_from_as_namesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Import_from_as_namesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Import_from_as_namesContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from_as_names;
}


std::any FandangoParser::Import_from_as_namesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from_as_names(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_from_as_namesContext* FandangoParser::import_from_as_names() {
  Import_from_as_namesContext *_localctx = _tracker.createInstance<Import_from_as_namesContext>(_ctx, getState());
  enterRule(_localctx, 122, FandangoParser::RuleImport_from_as_names);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1484);
    import_from_as_name();
    setState(1489);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1485);
        match(FandangoParser::COMMA);
        setState(1486);
        import_from_as_name(); 
      }
      setState(1491);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_from_as_nameContext ------------------------------------------------------------------

FandangoParser::Import_from_as_nameContext::Import_from_as_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::IdentifierContext *> FandangoParser::Import_from_as_nameContext::identifier() {
  return getRuleContexts<FandangoParser::IdentifierContext>();
}

FandangoParser::IdentifierContext* FandangoParser::Import_from_as_nameContext::identifier(size_t i) {
  return getRuleContext<FandangoParser::IdentifierContext>(i);
}

tree::TerminalNode* FandangoParser::Import_from_as_nameContext::AS() {
  return getToken(FandangoParser::AS, 0);
}


size_t FandangoParser::Import_from_as_nameContext::getRuleIndex() const {
  return FandangoParser::RuleImport_from_as_name;
}


std::any FandangoParser::Import_from_as_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImport_from_as_name(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Import_from_as_nameContext* FandangoParser::import_from_as_name() {
  Import_from_as_nameContext *_localctx = _tracker.createInstance<Import_from_as_nameContext>(_ctx, getState());
  enterRule(_localctx, 124, FandangoParser::RuleImport_from_as_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1492);
    identifier();
    setState(1495);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AS) {
      setState(1493);
      match(FandangoParser::AS);
      setState(1494);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_as_namesContext ------------------------------------------------------------------

FandangoParser::Dotted_as_namesContext::Dotted_as_namesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Dotted_as_nameContext *> FandangoParser::Dotted_as_namesContext::dotted_as_name() {
  return getRuleContexts<FandangoParser::Dotted_as_nameContext>();
}

FandangoParser::Dotted_as_nameContext* FandangoParser::Dotted_as_namesContext::dotted_as_name(size_t i) {
  return getRuleContext<FandangoParser::Dotted_as_nameContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Dotted_as_namesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Dotted_as_namesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Dotted_as_namesContext::getRuleIndex() const {
  return FandangoParser::RuleDotted_as_names;
}


std::any FandangoParser::Dotted_as_namesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDotted_as_names(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Dotted_as_namesContext* FandangoParser::dotted_as_names() {
  Dotted_as_namesContext *_localctx = _tracker.createInstance<Dotted_as_namesContext>(_ctx, getState());
  enterRule(_localctx, 126, FandangoParser::RuleDotted_as_names);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1497);
    dotted_as_name();
    setState(1502);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::COMMA) {
      setState(1498);
      match(FandangoParser::COMMA);
      setState(1499);
      dotted_as_name();
      setState(1504);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_as_nameContext ------------------------------------------------------------------

FandangoParser::Dotted_as_nameContext::Dotted_as_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Dotted_nameContext* FandangoParser::Dotted_as_nameContext::dotted_name() {
  return getRuleContext<FandangoParser::Dotted_nameContext>(0);
}

tree::TerminalNode* FandangoParser::Dotted_as_nameContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Dotted_as_nameContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}


size_t FandangoParser::Dotted_as_nameContext::getRuleIndex() const {
  return FandangoParser::RuleDotted_as_name;
}


std::any FandangoParser::Dotted_as_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDotted_as_name(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Dotted_as_nameContext* FandangoParser::dotted_as_name() {
  Dotted_as_nameContext *_localctx = _tracker.createInstance<Dotted_as_nameContext>(_ctx, getState());
  enterRule(_localctx, 128, FandangoParser::RuleDotted_as_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1505);
    dotted_name(0);
    setState(1508);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AS) {
      setState(1506);
      match(FandangoParser::AS);
      setState(1507);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dotted_nameContext ------------------------------------------------------------------

FandangoParser::Dotted_nameContext::Dotted_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Dotted_nameContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

FandangoParser::Dotted_nameContext* FandangoParser::Dotted_nameContext::dotted_name() {
  return getRuleContext<FandangoParser::Dotted_nameContext>(0);
}

tree::TerminalNode* FandangoParser::Dotted_nameContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}


size_t FandangoParser::Dotted_nameContext::getRuleIndex() const {
  return FandangoParser::RuleDotted_name;
}


std::any FandangoParser::Dotted_nameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDotted_name(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Dotted_nameContext* FandangoParser::dotted_name() {
   return dotted_name(0);
}

FandangoParser::Dotted_nameContext* FandangoParser::dotted_name(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Dotted_nameContext *_localctx = _tracker.createInstance<Dotted_nameContext>(_ctx, parentState);
  FandangoParser::Dotted_nameContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 130;
  enterRecursionRule(_localctx, 130, FandangoParser::RuleDotted_name, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1511);
    identifier();
    _ctx->stop = _input->LT(-1);
    setState(1518);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Dotted_nameContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleDotted_name);
        setState(1513);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1514);
        match(FandangoParser::DOT);
        setState(1515);
        identifier(); 
      }
      setState(1520);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

FandangoParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::BlockContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::BlockContext::INDENT() {
  return getToken(FandangoParser::INDENT, 0);
}

FandangoParser::StatementsContext* FandangoParser::BlockContext::statements() {
  return getRuleContext<FandangoParser::StatementsContext>(0);
}

tree::TerminalNode* FandangoParser::BlockContext::DEDENT() {
  return getToken(FandangoParser::DEDENT, 0);
}

FandangoParser::Simple_stmtsContext* FandangoParser::BlockContext::simple_stmts() {
  return getRuleContext<FandangoParser::Simple_stmtsContext>(0);
}


size_t FandangoParser::BlockContext::getRuleIndex() const {
  return FandangoParser::RuleBlock;
}


std::any FandangoParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::BlockContext* FandangoParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 132, FandangoParser::RuleBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1527);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NEWLINE: {
        enterOuterAlt(_localctx, 1);
        setState(1521);
        match(FandangoParser::NEWLINE);
        setState(1522);
        match(FandangoParser::INDENT);
        setState(1523);
        statements();
        setState(1524);
        match(FandangoParser::DEDENT);
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::ASSERT:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEL:
      case FandangoParser::FALSE:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IMPORT:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TYPE:
      case FandangoParser::YIELD:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(1526);
        simple_stmts();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecoratorsContext ------------------------------------------------------------------

FandangoParser::DecoratorsContext::DecoratorsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::DecoratorsContext::AT() {
  return getTokens(FandangoParser::AT);
}

tree::TerminalNode* FandangoParser::DecoratorsContext::AT(size_t i) {
  return getToken(FandangoParser::AT, i);
}

std::vector<FandangoParser::Named_expressionContext *> FandangoParser::DecoratorsContext::named_expression() {
  return getRuleContexts<FandangoParser::Named_expressionContext>();
}

FandangoParser::Named_expressionContext* FandangoParser::DecoratorsContext::named_expression(size_t i) {
  return getRuleContext<FandangoParser::Named_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::DecoratorsContext::NEWLINE() {
  return getTokens(FandangoParser::NEWLINE);
}

tree::TerminalNode* FandangoParser::DecoratorsContext::NEWLINE(size_t i) {
  return getToken(FandangoParser::NEWLINE, i);
}


size_t FandangoParser::DecoratorsContext::getRuleIndex() const {
  return FandangoParser::RuleDecorators;
}


std::any FandangoParser::DecoratorsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDecorators(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DecoratorsContext* FandangoParser::decorators() {
  DecoratorsContext *_localctx = _tracker.createInstance<DecoratorsContext>(_ctx, getState());
  enterRule(_localctx, 134, FandangoParser::RuleDecorators);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1533); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1529);
      match(FandangoParser::AT);
      setState(1530);
      named_expression();
      setState(1531);
      match(FandangoParser::NEWLINE);
      setState(1535); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::AT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_defContext ------------------------------------------------------------------

FandangoParser::Class_defContext::Class_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Class_def_rawContext* FandangoParser::Class_defContext::class_def_raw() {
  return getRuleContext<FandangoParser::Class_def_rawContext>(0);
}

FandangoParser::DecoratorsContext* FandangoParser::Class_defContext::decorators() {
  return getRuleContext<FandangoParser::DecoratorsContext>(0);
}


size_t FandangoParser::Class_defContext::getRuleIndex() const {
  return FandangoParser::RuleClass_def;
}


std::any FandangoParser::Class_defContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClass_def(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Class_defContext* FandangoParser::class_def() {
  Class_defContext *_localctx = _tracker.createInstance<Class_defContext>(_ctx, getState());
  enterRule(_localctx, 136, FandangoParser::RuleClass_def);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1538);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AT) {
      setState(1537);
      decorators();
    }
    setState(1540);
    class_def_raw();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_def_rawContext ------------------------------------------------------------------

FandangoParser::Class_def_rawContext::Class_def_rawContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::CLASS() {
  return getToken(FandangoParser::CLASS, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Class_def_rawContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Class_def_rawContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Type_paramsContext* FandangoParser::Class_def_rawContext::type_params() {
  return getRuleContext<FandangoParser::Type_paramsContext>(0);
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Class_def_rawContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::Class_def_rawContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}


size_t FandangoParser::Class_def_rawContext::getRuleIndex() const {
  return FandangoParser::RuleClass_def_raw;
}


std::any FandangoParser::Class_def_rawContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClass_def_raw(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Class_def_rawContext* FandangoParser::class_def_raw() {
  Class_def_rawContext *_localctx = _tracker.createInstance<Class_def_rawContext>(_ctx, getState());
  enterRule(_localctx, 138, FandangoParser::RuleClass_def_raw);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1542);
    match(FandangoParser::CLASS);
    setState(1543);
    identifier();
    setState(1545);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_BRACK) {
      setState(1544);
      type_params();
    }
    setState(1552);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_PAREN) {
      setState(1547);
      match(FandangoParser::OPEN_PAREN);
      setState(1549);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 93071897) != 0)) {
        setState(1548);
        arguments();
      }
      setState(1551);
      match(FandangoParser::CLOSE_PAREN);
    }
    setState(1554);
    match(FandangoParser::COLON);
    setState(1555);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_defContext ------------------------------------------------------------------

FandangoParser::Function_defContext::Function_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Function_def_rawContext* FandangoParser::Function_defContext::function_def_raw() {
  return getRuleContext<FandangoParser::Function_def_rawContext>(0);
}

FandangoParser::DecoratorsContext* FandangoParser::Function_defContext::decorators() {
  return getRuleContext<FandangoParser::DecoratorsContext>(0);
}


size_t FandangoParser::Function_defContext::getRuleIndex() const {
  return FandangoParser::RuleFunction_def;
}


std::any FandangoParser::Function_defContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunction_def(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Function_defContext* FandangoParser::function_def() {
  Function_defContext *_localctx = _tracker.createInstance<Function_defContext>(_ctx, getState());
  enterRule(_localctx, 140, FandangoParser::RuleFunction_def);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1558);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AT) {
      setState(1557);
      decorators();
    }
    setState(1560);
    function_def_raw();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Function_def_rawContext ------------------------------------------------------------------

FandangoParser::Function_def_rawContext::Function_def_rawContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::DEF() {
  return getToken(FandangoParser::DEF, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Function_def_rawContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Function_def_rawContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}

FandangoParser::Type_paramsContext* FandangoParser::Function_def_rawContext::type_params() {
  return getRuleContext<FandangoParser::Type_paramsContext>(0);
}

FandangoParser::ParamsContext* FandangoParser::Function_def_rawContext::params() {
  return getRuleContext<FandangoParser::ParamsContext>(0);
}

tree::TerminalNode* FandangoParser::Function_def_rawContext::ARROW() {
  return getToken(FandangoParser::ARROW, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Function_def_rawContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Func_type_commentContext* FandangoParser::Function_def_rawContext::func_type_comment() {
  return getRuleContext<FandangoParser::Func_type_commentContext>(0);
}


size_t FandangoParser::Function_def_rawContext::getRuleIndex() const {
  return FandangoParser::RuleFunction_def_raw;
}


std::any FandangoParser::Function_def_rawContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunction_def_raw(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Function_def_rawContext* FandangoParser::function_def_raw() {
  Function_def_rawContext *_localctx = _tracker.createInstance<Function_def_rawContext>(_ctx, getState());
  enterRule(_localctx, 142, FandangoParser::RuleFunction_def_raw);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1563);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASYNC) {
      setState(1562);
      match(FandangoParser::ASYNC);
    }
    setState(1565);
    match(FandangoParser::DEF);
    setState(1566);
    identifier();
    setState(1568);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_BRACK) {
      setState(1567);
      type_params();
    }
    setState(1570);
    match(FandangoParser::OPEN_PAREN);
    setState(1572);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 55) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 55)) & 272629775) != 0)) {
      setState(1571);
      params();
    }
    setState(1574);
    match(FandangoParser::CLOSE_PAREN);
    setState(1577);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ARROW) {
      setState(1575);
      match(FandangoParser::ARROW);
      setState(1576);
      expression();
    }
    setState(1579);
    match(FandangoParser::COLON);
    setState(1581);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx)) {
    case 1: {
      setState(1580);
      func_type_comment();
      break;
    }

    default:
      break;
    }
    setState(1583);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamsContext ------------------------------------------------------------------

FandangoParser::ParamsContext::ParamsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParametersContext* FandangoParser::ParamsContext::parameters() {
  return getRuleContext<FandangoParser::ParametersContext>(0);
}


size_t FandangoParser::ParamsContext::getRuleIndex() const {
  return FandangoParser::RuleParams;
}


std::any FandangoParser::ParamsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParams(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ParamsContext* FandangoParser::params() {
  ParamsContext *_localctx = _tracker.createInstance<ParamsContext>(_ctx, getState());
  enterRule(_localctx, 144, FandangoParser::RuleParams);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1585);
    parameters();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParametersContext ------------------------------------------------------------------

FandangoParser::ParametersContext::ParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Slash_no_defaultContext* FandangoParser::ParametersContext::slash_no_default() {
  return getRuleContext<FandangoParser::Slash_no_defaultContext>(0);
}

std::vector<FandangoParser::Param_no_defaultContext *> FandangoParser::ParametersContext::param_no_default() {
  return getRuleContexts<FandangoParser::Param_no_defaultContext>();
}

FandangoParser::Param_no_defaultContext* FandangoParser::ParametersContext::param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(i);
}

std::vector<FandangoParser::Param_with_defaultContext *> FandangoParser::ParametersContext::param_with_default() {
  return getRuleContexts<FandangoParser::Param_with_defaultContext>();
}

FandangoParser::Param_with_defaultContext* FandangoParser::ParametersContext::param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Param_with_defaultContext>(i);
}

FandangoParser::Star_etcContext* FandangoParser::ParametersContext::star_etc() {
  return getRuleContext<FandangoParser::Star_etcContext>(0);
}

FandangoParser::Slash_with_defaultContext* FandangoParser::ParametersContext::slash_with_default() {
  return getRuleContext<FandangoParser::Slash_with_defaultContext>(0);
}


size_t FandangoParser::ParametersContext::getRuleIndex() const {
  return FandangoParser::RuleParameters;
}


std::any FandangoParser::ParametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParameters(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ParametersContext* FandangoParser::parameters() {
  ParametersContext *_localctx = _tracker.createInstance<ParametersContext>(_ctx, getState());
  enterRule(_localctx, 146, FandangoParser::RuleParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1636);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1587);
      slash_no_default();
      setState(1591);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1588);
          param_no_default(); 
        }
        setState(1593);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx);
      }
      setState(1597);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(1594);
        param_with_default();
        setState(1599);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1601);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1600);
        star_etc();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1603);
      slash_with_default();
      setState(1607);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(1604);
        param_with_default();
        setState(1609);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1611);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1610);
        star_etc();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1614); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1613);
                param_no_default();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1616); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1621);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(1618);
        param_with_default();
        setState(1623);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1625);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1624);
        star_etc();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1628); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1627);
        param_with_default();
        setState(1630); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0));
      setState(1633);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(1632);
        star_etc();
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1635);
      star_etc();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Slash_no_defaultContext ------------------------------------------------------------------

FandangoParser::Slash_no_defaultContext::Slash_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Slash_no_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Param_no_defaultContext *> FandangoParser::Slash_no_defaultContext::param_no_default() {
  return getRuleContexts<FandangoParser::Param_no_defaultContext>();
}

FandangoParser::Param_no_defaultContext* FandangoParser::Slash_no_defaultContext::param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Slash_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Slash_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleSlash_no_default;
}


std::any FandangoParser::Slash_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlash_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Slash_no_defaultContext* FandangoParser::slash_no_default() {
  Slash_no_defaultContext *_localctx = _tracker.createInstance<Slash_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 148, FandangoParser::RuleSlash_no_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1639); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1638);
      param_no_default();
      setState(1641); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540431955284459520) != 0));
    setState(1643);
    match(FandangoParser::DIV);
    setState(1645);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1644);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Slash_with_defaultContext ------------------------------------------------------------------

FandangoParser::Slash_with_defaultContext::Slash_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Slash_with_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Param_no_defaultContext *> FandangoParser::Slash_with_defaultContext::param_no_default() {
  return getRuleContexts<FandangoParser::Param_no_defaultContext>();
}

FandangoParser::Param_no_defaultContext* FandangoParser::Slash_with_defaultContext::param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(i);
}

std::vector<FandangoParser::Param_with_defaultContext *> FandangoParser::Slash_with_defaultContext::param_with_default() {
  return getRuleContexts<FandangoParser::Param_with_defaultContext>();
}

FandangoParser::Param_with_defaultContext* FandangoParser::Slash_with_defaultContext::param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Param_with_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Slash_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Slash_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleSlash_with_default;
}


std::any FandangoParser::Slash_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlash_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Slash_with_defaultContext* FandangoParser::slash_with_default() {
  Slash_with_defaultContext *_localctx = _tracker.createInstance<Slash_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 150, FandangoParser::RuleSlash_with_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1650);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1647);
        param_no_default(); 
      }
      setState(1652);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx);
    }
    setState(1654); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1653);
      param_with_default();
      setState(1656); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540431955284459520) != 0));
    setState(1658);
    match(FandangoParser::DIV);
    setState(1660);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(1659);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_etcContext ------------------------------------------------------------------

FandangoParser::Star_etcContext::Star_etcContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_etcContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Param_no_defaultContext* FandangoParser::Star_etcContext::param_no_default() {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(0);
}

std::vector<FandangoParser::Param_maybe_defaultContext *> FandangoParser::Star_etcContext::param_maybe_default() {
  return getRuleContexts<FandangoParser::Param_maybe_defaultContext>();
}

FandangoParser::Param_maybe_defaultContext* FandangoParser::Star_etcContext::param_maybe_default(size_t i) {
  return getRuleContext<FandangoParser::Param_maybe_defaultContext>(i);
}

FandangoParser::KwdsContext* FandangoParser::Star_etcContext::kwds() {
  return getRuleContext<FandangoParser::KwdsContext>(0);
}

FandangoParser::Param_no_default_star_annotationContext* FandangoParser::Star_etcContext::param_no_default_star_annotation() {
  return getRuleContext<FandangoParser::Param_no_default_star_annotationContext>(0);
}

tree::TerminalNode* FandangoParser::Star_etcContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Star_etcContext::getRuleIndex() const {
  return FandangoParser::RuleStar_etc;
}


std::any FandangoParser::Star_etcContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_etc(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_etcContext* FandangoParser::star_etc() {
  Star_etcContext *_localctx = _tracker.createInstance<Star_etcContext>(_ctx, getState());
  enterRule(_localctx, 152, FandangoParser::RuleStar_etc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1695);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1662);
      match(FandangoParser::STAR);
      setState(1663);
      param_no_default();
      setState(1667);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(1664);
        param_maybe_default();
        setState(1669);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1671);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(1670);
        kwds();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1673);
      match(FandangoParser::STAR);
      setState(1674);
      param_no_default_star_annotation();
      setState(1678);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(1675);
        param_maybe_default();
        setState(1680);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1682);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(1681);
        kwds();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1684);
      match(FandangoParser::STAR);
      setState(1685);
      match(FandangoParser::COMMA);
      setState(1687); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1686);
        param_maybe_default();
        setState(1689); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0));
      setState(1692);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(1691);
        kwds();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1694);
      kwds();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KwdsContext ------------------------------------------------------------------

FandangoParser::KwdsContext::KwdsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::KwdsContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Param_no_defaultContext* FandangoParser::KwdsContext::param_no_default() {
  return getRuleContext<FandangoParser::Param_no_defaultContext>(0);
}


size_t FandangoParser::KwdsContext::getRuleIndex() const {
  return FandangoParser::RuleKwds;
}


std::any FandangoParser::KwdsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwds(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KwdsContext* FandangoParser::kwds() {
  KwdsContext *_localctx = _tracker.createInstance<KwdsContext>(_ctx, getState());
  enterRule(_localctx, 154, FandangoParser::RuleKwds);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1697);
    match(FandangoParser::POWER);
    setState(1698);
    param_no_default();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_no_defaultContext ------------------------------------------------------------------

FandangoParser::Param_no_defaultContext::Param_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParamContext* FandangoParser::Param_no_defaultContext::param() {
  return getRuleContext<FandangoParser::ParamContext>(0);
}

tree::TerminalNode* FandangoParser::Param_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Param_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleParam_no_default;
}


std::any FandangoParser::Param_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_no_defaultContext* FandangoParser::param_no_default() {
  Param_no_defaultContext *_localctx = _tracker.createInstance<Param_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 156, FandangoParser::RuleParam_no_default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1704);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1700);
      param();
      setState(1701);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1703);
      param();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_no_default_star_annotationContext ------------------------------------------------------------------

FandangoParser::Param_no_default_star_annotationContext::Param_no_default_star_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Param_star_annotationContext* FandangoParser::Param_no_default_star_annotationContext::param_star_annotation() {
  return getRuleContext<FandangoParser::Param_star_annotationContext>(0);
}

tree::TerminalNode* FandangoParser::Param_no_default_star_annotationContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Param_no_default_star_annotationContext::getRuleIndex() const {
  return FandangoParser::RuleParam_no_default_star_annotation;
}


std::any FandangoParser::Param_no_default_star_annotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_no_default_star_annotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_no_default_star_annotationContext* FandangoParser::param_no_default_star_annotation() {
  Param_no_default_star_annotationContext *_localctx = _tracker.createInstance<Param_no_default_star_annotationContext>(_ctx, getState());
  enterRule(_localctx, 158, FandangoParser::RuleParam_no_default_star_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1710);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1706);
      param_star_annotation();
      setState(1707);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1709);
      param_star_annotation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_with_defaultContext ------------------------------------------------------------------

FandangoParser::Param_with_defaultContext::Param_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParamContext* FandangoParser::Param_with_defaultContext::param() {
  return getRuleContext<FandangoParser::ParamContext>(0);
}

FandangoParser::DefaultContext* FandangoParser::Param_with_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}

tree::TerminalNode* FandangoParser::Param_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Param_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleParam_with_default;
}


std::any FandangoParser::Param_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_with_defaultContext* FandangoParser::param_with_default() {
  Param_with_defaultContext *_localctx = _tracker.createInstance<Param_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 160, FandangoParser::RuleParam_with_default);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1719);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1712);
      param();
      setState(1713);
      default_();
      setState(1714);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1716);
      param();
      setState(1717);
      default_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_maybe_defaultContext ------------------------------------------------------------------

FandangoParser::Param_maybe_defaultContext::Param_maybe_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ParamContext* FandangoParser::Param_maybe_defaultContext::param() {
  return getRuleContext<FandangoParser::ParamContext>(0);
}

tree::TerminalNode* FandangoParser::Param_maybe_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::DefaultContext* FandangoParser::Param_maybe_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}


size_t FandangoParser::Param_maybe_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleParam_maybe_default;
}


std::any FandangoParser::Param_maybe_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_maybe_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_maybe_defaultContext* FandangoParser::param_maybe_default() {
  Param_maybe_defaultContext *_localctx = _tracker.createInstance<Param_maybe_defaultContext>(_ctx, getState());
  enterRule(_localctx, 162, FandangoParser::RuleParam_maybe_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1731);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1721);
      param();
      setState(1723);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(1722);
        default_();
      }
      setState(1725);
      match(FandangoParser::COMMA);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1727);
      param();
      setState(1729);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ASSIGN) {
        setState(1728);
        default_();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamContext ------------------------------------------------------------------

FandangoParser::ParamContext::ParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::ParamContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

FandangoParser::AnnotationContext* FandangoParser::ParamContext::annotation() {
  return getRuleContext<FandangoParser::AnnotationContext>(0);
}


size_t FandangoParser::ParamContext::getRuleIndex() const {
  return FandangoParser::RuleParam;
}


std::any FandangoParser::ParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ParamContext* FandangoParser::param() {
  ParamContext *_localctx = _tracker.createInstance<ParamContext>(_ctx, getState());
  enterRule(_localctx, 164, FandangoParser::RuleParam);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1733);
    identifier();
    setState(1735);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COLON) {
      setState(1734);
      annotation();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_star_annotationContext ------------------------------------------------------------------

FandangoParser::Param_star_annotationContext::Param_star_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Param_star_annotationContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

FandangoParser::Star_annotationContext* FandangoParser::Param_star_annotationContext::star_annotation() {
  return getRuleContext<FandangoParser::Star_annotationContext>(0);
}


size_t FandangoParser::Param_star_annotationContext::getRuleIndex() const {
  return FandangoParser::RuleParam_star_annotation;
}


std::any FandangoParser::Param_star_annotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitParam_star_annotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Param_star_annotationContext* FandangoParser::param_star_annotation() {
  Param_star_annotationContext *_localctx = _tracker.createInstance<Param_star_annotationContext>(_ctx, getState());
  enterRule(_localctx, 166, FandangoParser::RuleParam_star_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1737);
    identifier();
    setState(1738);
    star_annotation();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnnotationContext ------------------------------------------------------------------

FandangoParser::AnnotationContext::AnnotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::AnnotationContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::AnnotationContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::AnnotationContext::getRuleIndex() const {
  return FandangoParser::RuleAnnotation;
}


std::any FandangoParser::AnnotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAnnotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AnnotationContext* FandangoParser::annotation() {
  AnnotationContext *_localctx = _tracker.createInstance<AnnotationContext>(_ctx, getState());
  enterRule(_localctx, 168, FandangoParser::RuleAnnotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1740);
    match(FandangoParser::COLON);
    setState(1741);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_annotationContext ------------------------------------------------------------------

FandangoParser::Star_annotationContext::Star_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_annotationContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::Star_expressionContext* FandangoParser::Star_annotationContext::star_expression() {
  return getRuleContext<FandangoParser::Star_expressionContext>(0);
}


size_t FandangoParser::Star_annotationContext::getRuleIndex() const {
  return FandangoParser::RuleStar_annotation;
}


std::any FandangoParser::Star_annotationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_annotation(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_annotationContext* FandangoParser::star_annotation() {
  Star_annotationContext *_localctx = _tracker.createInstance<Star_annotationContext>(_ctx, getState());
  enterRule(_localctx, 170, FandangoParser::RuleStar_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1743);
    match(FandangoParser::COLON);
    setState(1744);
    star_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DefaultContext ------------------------------------------------------------------

FandangoParser::DefaultContext::DefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::DefaultContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::DefaultContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::DefaultContext::getRuleIndex() const {
  return FandangoParser::RuleDefault;
}


std::any FandangoParser::DefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDefault(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DefaultContext* FandangoParser::default_() {
  DefaultContext *_localctx = _tracker.createInstance<DefaultContext>(_ctx, getState());
  enterRule(_localctx, 172, FandangoParser::RuleDefault);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1746);
    match(FandangoParser::ASSIGN);
    setState(1747);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_stmtContext ------------------------------------------------------------------

FandangoParser::If_stmtContext::If_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::If_stmtContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::If_stmtContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::If_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::If_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Elif_stmtContext* FandangoParser::If_stmtContext::elif_stmt() {
  return getRuleContext<FandangoParser::Elif_stmtContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::If_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}


size_t FandangoParser::If_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleIf_stmt;
}


std::any FandangoParser::If_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIf_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::If_stmtContext* FandangoParser::if_stmt() {
  If_stmtContext *_localctx = _tracker.createInstance<If_stmtContext>(_ctx, getState());
  enterRule(_localctx, 174, FandangoParser::RuleIf_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1762);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 194, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1749);
      match(FandangoParser::IF);
      setState(1750);
      named_expression();
      setState(1751);
      match(FandangoParser::COLON);
      setState(1752);
      block();
      setState(1753);
      elif_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1755);
      match(FandangoParser::IF);
      setState(1756);
      named_expression();
      setState(1757);
      match(FandangoParser::COLON);
      setState(1758);
      block();
      setState(1760);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1759);
        else_block();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elif_stmtContext ------------------------------------------------------------------

FandangoParser::Elif_stmtContext::Elif_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Elif_stmtContext::ELIF() {
  return getToken(FandangoParser::ELIF, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::Elif_stmtContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::Elif_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Elif_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Elif_stmtContext* FandangoParser::Elif_stmtContext::elif_stmt() {
  return getRuleContext<FandangoParser::Elif_stmtContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::Elif_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}


size_t FandangoParser::Elif_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleElif_stmt;
}


std::any FandangoParser::Elif_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitElif_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Elif_stmtContext* FandangoParser::elif_stmt() {
  Elif_stmtContext *_localctx = _tracker.createInstance<Elif_stmtContext>(_ctx, getState());
  enterRule(_localctx, 176, FandangoParser::RuleElif_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1777);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1764);
      match(FandangoParser::ELIF);
      setState(1765);
      named_expression();
      setState(1766);
      match(FandangoParser::COLON);
      setState(1767);
      block();
      setState(1768);
      elif_stmt();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1770);
      match(FandangoParser::ELIF);
      setState(1771);
      named_expression();
      setState(1772);
      match(FandangoParser::COLON);
      setState(1773);
      block();
      setState(1775);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1774);
        else_block();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Else_blockContext ------------------------------------------------------------------

FandangoParser::Else_blockContext::Else_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Else_blockContext::ELSE() {
  return getToken(FandangoParser::ELSE, 0);
}

tree::TerminalNode* FandangoParser::Else_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Else_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}


size_t FandangoParser::Else_blockContext::getRuleIndex() const {
  return FandangoParser::RuleElse_block;
}


std::any FandangoParser::Else_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitElse_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Else_blockContext* FandangoParser::else_block() {
  Else_blockContext *_localctx = _tracker.createInstance<Else_blockContext>(_ctx, getState());
  enterRule(_localctx, 178, FandangoParser::RuleElse_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1779);
    match(FandangoParser::ELSE);
    setState(1780);
    match(FandangoParser::COLON);
    setState(1781);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- While_stmtContext ------------------------------------------------------------------

FandangoParser::While_stmtContext::While_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::While_stmtContext::WHILE() {
  return getToken(FandangoParser::WHILE, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::While_stmtContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::While_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::While_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::While_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}


size_t FandangoParser::While_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleWhile_stmt;
}


std::any FandangoParser::While_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWhile_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::While_stmtContext* FandangoParser::while_stmt() {
  While_stmtContext *_localctx = _tracker.createInstance<While_stmtContext>(_ctx, getState());
  enterRule(_localctx, 180, FandangoParser::RuleWhile_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1783);
    match(FandangoParser::WHILE);
    setState(1784);
    named_expression();
    setState(1785);
    match(FandangoParser::COLON);
    setState(1786);
    block();
    setState(1788);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ELSE) {
      setState(1787);
      else_block();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_stmtContext ------------------------------------------------------------------

FandangoParser::For_stmtContext::For_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::For_stmtContext::FOR() {
  return getToken(FandangoParser::FOR, 0);
}

FandangoParser::Star_targetsContext* FandangoParser::For_stmtContext::star_targets() {
  return getRuleContext<FandangoParser::Star_targetsContext>(0);
}

tree::TerminalNode* FandangoParser::For_stmtContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Star_expressionsContext* FandangoParser::For_stmtContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

tree::TerminalNode* FandangoParser::For_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::For_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Else_blockContext* FandangoParser::For_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}

tree::TerminalNode* FandangoParser::For_stmtContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}


size_t FandangoParser::For_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleFor_stmt;
}


std::any FandangoParser::For_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFor_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::For_stmtContext* FandangoParser::for_stmt() {
  For_stmtContext *_localctx = _tracker.createInstance<For_stmtContext>(_ctx, getState());
  enterRule(_localctx, 182, FandangoParser::RuleFor_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1809);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::FOR: {
        enterOuterAlt(_localctx, 1);
        setState(1790);
        match(FandangoParser::FOR);
        setState(1791);
        star_targets();
        setState(1792);
        match(FandangoParser::IN);
        setState(1793);
        star_expressions();
        setState(1794);
        match(FandangoParser::COLON);
        setState(1795);
        block();
        setState(1797);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::ELSE) {
          setState(1796);
          else_block();
        }
        break;
      }

      case FandangoParser::ASYNC: {
        enterOuterAlt(_localctx, 2);
        setState(1799);
        match(FandangoParser::ASYNC);
        setState(1800);
        match(FandangoParser::FOR);
        setState(1801);
        star_targets();
        setState(1802);
        match(FandangoParser::IN);
        setState(1803);
        star_expressions();
        setState(1804);
        match(FandangoParser::COLON);
        setState(1805);
        block();
        setState(1807);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::ELSE) {
          setState(1806);
          else_block();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_stmtContext ------------------------------------------------------------------

FandangoParser::With_stmtContext::With_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::With_stmtContext::WITH() {
  return getToken(FandangoParser::WITH, 0);
}

tree::TerminalNode* FandangoParser::With_stmtContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

std::vector<FandangoParser::With_itemContext *> FandangoParser::With_stmtContext::with_item() {
  return getRuleContexts<FandangoParser::With_itemContext>();
}

FandangoParser::With_itemContext* FandangoParser::With_stmtContext::with_item(size_t i) {
  return getRuleContext<FandangoParser::With_itemContext>(i);
}

tree::TerminalNode* FandangoParser::With_stmtContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

tree::TerminalNode* FandangoParser::With_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::With_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::With_stmtContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::With_stmtContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

tree::TerminalNode* FandangoParser::With_stmtContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}


size_t FandangoParser::With_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleWith_stmt;
}


std::any FandangoParser::With_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWith_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::With_stmtContext* FandangoParser::with_stmt() {
  With_stmtContext *_localctx = _tracker.createInstance<With_stmtContext>(_ctx, getState());
  enterRule(_localctx, 184, FandangoParser::RuleWith_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1871);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1811);
      match(FandangoParser::WITH);
      setState(1812);
      match(FandangoParser::OPEN_PAREN);
      setState(1813);
      with_item();
      setState(1818);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1814);
          match(FandangoParser::COMMA);
          setState(1815);
          with_item(); 
        }
        setState(1820);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx);
      }
      setState(1822);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1821);
        match(FandangoParser::COMMA);
      }
      setState(1824);
      match(FandangoParser::CLOSE_PAREN);
      setState(1825);
      match(FandangoParser::COLON);
      setState(1826);
      block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1828);
      match(FandangoParser::WITH);
      setState(1829);
      with_item();
      setState(1834);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::COMMA) {
        setState(1830);
        match(FandangoParser::COMMA);
        setState(1831);
        with_item();
        setState(1836);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1837);
      match(FandangoParser::COLON);
      setState(1838);
      block();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1840);
      match(FandangoParser::ASYNC);
      setState(1841);
      match(FandangoParser::WITH);
      setState(1842);
      match(FandangoParser::OPEN_PAREN);
      setState(1843);
      with_item();
      setState(1848);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1844);
          match(FandangoParser::COMMA);
          setState(1845);
          with_item(); 
        }
        setState(1850);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx);
      }
      setState(1852);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(1851);
        match(FandangoParser::COMMA);
      }
      setState(1854);
      match(FandangoParser::CLOSE_PAREN);
      setState(1855);
      match(FandangoParser::COLON);
      setState(1856);
      block();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1858);
      match(FandangoParser::ASYNC);
      setState(1859);
      match(FandangoParser::WITH);
      setState(1860);
      with_item();
      setState(1865);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::COMMA) {
        setState(1861);
        match(FandangoParser::COMMA);
        setState(1862);
        with_item();
        setState(1867);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1868);
      match(FandangoParser::COLON);
      setState(1869);
      block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- With_itemContext ------------------------------------------------------------------

FandangoParser::With_itemContext::With_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ExpressionContext* FandangoParser::With_itemContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::With_itemContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

FandangoParser::Star_targetContext* FandangoParser::With_itemContext::star_target() {
  return getRuleContext<FandangoParser::Star_targetContext>(0);
}


size_t FandangoParser::With_itemContext::getRuleIndex() const {
  return FandangoParser::RuleWith_item;
}


std::any FandangoParser::With_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWith_item(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::With_itemContext* FandangoParser::with_item() {
  With_itemContext *_localctx = _tracker.createInstance<With_itemContext>(_ctx, getState());
  enterRule(_localctx, 186, FandangoParser::RuleWith_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1878);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1873);
      expression();
      setState(1874);
      match(FandangoParser::AS);
      setState(1875);
      star_target();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1877);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Try_stmtContext ------------------------------------------------------------------

FandangoParser::Try_stmtContext::Try_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Try_stmtContext::TRY() {
  return getToken(FandangoParser::TRY, 0);
}

tree::TerminalNode* FandangoParser::Try_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Try_stmtContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::Finally_blockContext* FandangoParser::Try_stmtContext::finally_block() {
  return getRuleContext<FandangoParser::Finally_blockContext>(0);
}

std::vector<FandangoParser::Except_blockContext *> FandangoParser::Try_stmtContext::except_block() {
  return getRuleContexts<FandangoParser::Except_blockContext>();
}

FandangoParser::Except_blockContext* FandangoParser::Try_stmtContext::except_block(size_t i) {
  return getRuleContext<FandangoParser::Except_blockContext>(i);
}

FandangoParser::Else_blockContext* FandangoParser::Try_stmtContext::else_block() {
  return getRuleContext<FandangoParser::Else_blockContext>(0);
}

std::vector<FandangoParser::Except_star_blockContext *> FandangoParser::Try_stmtContext::except_star_block() {
  return getRuleContexts<FandangoParser::Except_star_blockContext>();
}

FandangoParser::Except_star_blockContext* FandangoParser::Try_stmtContext::except_star_block(size_t i) {
  return getRuleContext<FandangoParser::Except_star_blockContext>(i);
}


size_t FandangoParser::Try_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleTry_stmt;
}


std::any FandangoParser::Try_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTry_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Try_stmtContext* FandangoParser::try_stmt() {
  Try_stmtContext *_localctx = _tracker.createInstance<Try_stmtContext>(_ctx, getState());
  enterRule(_localctx, 188, FandangoParser::RuleTry_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1913);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1880);
      match(FandangoParser::TRY);
      setState(1881);
      match(FandangoParser::COLON);
      setState(1882);
      block();
      setState(1883);
      finally_block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1885);
      match(FandangoParser::TRY);
      setState(1886);
      match(FandangoParser::COLON);
      setState(1887);
      block();
      setState(1889); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1888);
        except_block();
        setState(1891); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::EXCEPT);
      setState(1894);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1893);
        else_block();
      }
      setState(1897);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::FINALLY) {
        setState(1896);
        finally_block();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1899);
      match(FandangoParser::TRY);
      setState(1900);
      match(FandangoParser::COLON);
      setState(1901);
      block();
      setState(1903); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1902);
        except_star_block();
        setState(1905); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == FandangoParser::EXCEPT);
      setState(1908);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::ELSE) {
        setState(1907);
        else_block();
      }
      setState(1911);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::FINALLY) {
        setState(1910);
        finally_block();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Except_blockContext ------------------------------------------------------------------

FandangoParser::Except_blockContext::Except_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Except_blockContext::EXCEPT() {
  return getToken(FandangoParser::EXCEPT, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Except_blockContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::Except_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Except_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

tree::TerminalNode* FandangoParser::Except_blockContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Except_blockContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}


size_t FandangoParser::Except_blockContext::getRuleIndex() const {
  return FandangoParser::RuleExcept_block;
}


std::any FandangoParser::Except_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExcept_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Except_blockContext* FandangoParser::except_block() {
  Except_blockContext *_localctx = _tracker.createInstance<Except_blockContext>(_ctx, getState());
  enterRule(_localctx, 190, FandangoParser::RuleExcept_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1927);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1915);
      match(FandangoParser::EXCEPT);
      setState(1916);
      expression();
      setState(1919);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::AS) {
        setState(1917);
        match(FandangoParser::AS);
        setState(1918);
        identifier();
      }
      setState(1921);
      match(FandangoParser::COLON);
      setState(1922);
      block();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1924);
      match(FandangoParser::EXCEPT);
      setState(1925);
      match(FandangoParser::COLON);
      setState(1926);
      block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Except_star_blockContext ------------------------------------------------------------------

FandangoParser::Except_star_blockContext::Except_star_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::EXCEPT() {
  return getToken(FandangoParser::EXCEPT, 0);
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Except_star_blockContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Except_star_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

tree::TerminalNode* FandangoParser::Except_star_blockContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Except_star_blockContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}


size_t FandangoParser::Except_star_blockContext::getRuleIndex() const {
  return FandangoParser::RuleExcept_star_block;
}


std::any FandangoParser::Except_star_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExcept_star_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Except_star_blockContext* FandangoParser::except_star_block() {
  Except_star_blockContext *_localctx = _tracker.createInstance<Except_star_blockContext>(_ctx, getState());
  enterRule(_localctx, 192, FandangoParser::RuleExcept_star_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1929);
    match(FandangoParser::EXCEPT);
    setState(1930);
    match(FandangoParser::STAR);
    setState(1931);
    expression();
    setState(1934);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::AS) {
      setState(1932);
      match(FandangoParser::AS);
      setState(1933);
      identifier();
    }
    setState(1936);
    match(FandangoParser::COLON);
    setState(1937);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Finally_blockContext ------------------------------------------------------------------

FandangoParser::Finally_blockContext::Finally_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Finally_blockContext::FINALLY() {
  return getToken(FandangoParser::FINALLY, 0);
}

tree::TerminalNode* FandangoParser::Finally_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Finally_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}


size_t FandangoParser::Finally_blockContext::getRuleIndex() const {
  return FandangoParser::RuleFinally_block;
}


std::any FandangoParser::Finally_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFinally_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Finally_blockContext* FandangoParser::finally_block() {
  Finally_blockContext *_localctx = _tracker.createInstance<Finally_blockContext>(_ctx, getState());
  enterRule(_localctx, 194, FandangoParser::RuleFinally_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1939);
    match(FandangoParser::FINALLY);
    setState(1940);
    match(FandangoParser::COLON);
    setState(1941);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Match_stmtContext ------------------------------------------------------------------

FandangoParser::Match_stmtContext::Match_stmtContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Match_stmtContext::MATCH() {
  return getToken(FandangoParser::MATCH, 0);
}

FandangoParser::Subject_exprContext* FandangoParser::Match_stmtContext::subject_expr() {
  return getRuleContext<FandangoParser::Subject_exprContext>(0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::INDENT() {
  return getToken(FandangoParser::INDENT, 0);
}

tree::TerminalNode* FandangoParser::Match_stmtContext::DEDENT() {
  return getToken(FandangoParser::DEDENT, 0);
}

std::vector<FandangoParser::Case_blockContext *> FandangoParser::Match_stmtContext::case_block() {
  return getRuleContexts<FandangoParser::Case_blockContext>();
}

FandangoParser::Case_blockContext* FandangoParser::Match_stmtContext::case_block(size_t i) {
  return getRuleContext<FandangoParser::Case_blockContext>(i);
}


size_t FandangoParser::Match_stmtContext::getRuleIndex() const {
  return FandangoParser::RuleMatch_stmt;
}


std::any FandangoParser::Match_stmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMatch_stmt(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Match_stmtContext* FandangoParser::match_stmt() {
  Match_stmtContext *_localctx = _tracker.createInstance<Match_stmtContext>(_ctx, getState());
  enterRule(_localctx, 196, FandangoParser::RuleMatch_stmt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1943);
    match(FandangoParser::MATCH);
    setState(1944);
    subject_expr();
    setState(1945);
    match(FandangoParser::COLON);
    setState(1946);
    match(FandangoParser::NEWLINE);
    setState(1947);
    match(FandangoParser::INDENT);
    setState(1949); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1948);
      case_block();
      setState(1951); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::CASE);
    setState(1953);
    match(FandangoParser::DEDENT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Subject_exprContext ------------------------------------------------------------------

FandangoParser::Subject_exprContext::Subject_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Star_named_expressionContext* FandangoParser::Subject_exprContext::star_named_expression() {
  return getRuleContext<FandangoParser::Star_named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::Subject_exprContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::Subject_exprContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}

FandangoParser::Named_expressionContext* FandangoParser::Subject_exprContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::Subject_exprContext::getRuleIndex() const {
  return FandangoParser::RuleSubject_expr;
}


std::any FandangoParser::Subject_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSubject_expr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Subject_exprContext* FandangoParser::subject_expr() {
  Subject_exprContext *_localctx = _tracker.createInstance<Subject_exprContext>(_ctx, getState());
  enterRule(_localctx, 198, FandangoParser::RuleSubject_expr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1961);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1955);
      star_named_expression();
      setState(1956);
      match(FandangoParser::COMMA);
      setState(1958);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 93071897) != 0)) {
        setState(1957);
        star_named_expressions();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1960);
      named_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Case_blockContext ------------------------------------------------------------------

FandangoParser::Case_blockContext::Case_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Case_blockContext::CASE() {
  return getToken(FandangoParser::CASE, 0);
}

FandangoParser::PatternsContext* FandangoParser::Case_blockContext::patterns() {
  return getRuleContext<FandangoParser::PatternsContext>(0);
}

tree::TerminalNode* FandangoParser::Case_blockContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::BlockContext* FandangoParser::Case_blockContext::block() {
  return getRuleContext<FandangoParser::BlockContext>(0);
}

FandangoParser::GuardContext* FandangoParser::Case_blockContext::guard() {
  return getRuleContext<FandangoParser::GuardContext>(0);
}


size_t FandangoParser::Case_blockContext::getRuleIndex() const {
  return FandangoParser::RuleCase_block;
}


std::any FandangoParser::Case_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCase_block(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Case_blockContext* FandangoParser::case_block() {
  Case_blockContext *_localctx = _tracker.createInstance<Case_blockContext>(_ctx, getState());
  enterRule(_localctx, 200, FandangoParser::RuleCase_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1963);
    match(FandangoParser::CASE);
    setState(1964);
    patterns();
    setState(1966);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::IF) {
      setState(1965);
      guard();
    }
    setState(1968);
    match(FandangoParser::COLON);
    setState(1969);
    block();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GuardContext ------------------------------------------------------------------

FandangoParser::GuardContext::GuardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::GuardContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::GuardContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::GuardContext::getRuleIndex() const {
  return FandangoParser::RuleGuard;
}


std::any FandangoParser::GuardContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGuard(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::GuardContext* FandangoParser::guard() {
  GuardContext *_localctx = _tracker.createInstance<GuardContext>(_ctx, getState());
  enterRule(_localctx, 202, FandangoParser::RuleGuard);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1971);
    match(FandangoParser::IF);
    setState(1972);
    named_expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternsContext ------------------------------------------------------------------

FandangoParser::PatternsContext::PatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Open_sequence_patternContext* FandangoParser::PatternsContext::open_sequence_pattern() {
  return getRuleContext<FandangoParser::Open_sequence_patternContext>(0);
}

FandangoParser::PatternContext* FandangoParser::PatternsContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}


size_t FandangoParser::PatternsContext::getRuleIndex() const {
  return FandangoParser::RulePatterns;
}


std::any FandangoParser::PatternsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPatterns(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PatternsContext* FandangoParser::patterns() {
  PatternsContext *_localctx = _tracker.createInstance<PatternsContext>(_ctx, getState());
  enterRule(_localctx, 204, FandangoParser::RulePatterns);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1976);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1974);
      open_sequence_pattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1975);
      pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PatternContext ------------------------------------------------------------------

FandangoParser::PatternContext::PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::As_patternContext* FandangoParser::PatternContext::as_pattern() {
  return getRuleContext<FandangoParser::As_patternContext>(0);
}

FandangoParser::Or_patternContext* FandangoParser::PatternContext::or_pattern() {
  return getRuleContext<FandangoParser::Or_patternContext>(0);
}


size_t FandangoParser::PatternContext::getRuleIndex() const {
  return FandangoParser::RulePattern;
}


std::any FandangoParser::PatternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PatternContext* FandangoParser::pattern() {
  PatternContext *_localctx = _tracker.createInstance<PatternContext>(_ctx, getState());
  enterRule(_localctx, 206, FandangoParser::RulePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1980);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1978);
      as_pattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1979);
      or_pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- As_patternContext ------------------------------------------------------------------

FandangoParser::As_patternContext::As_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Or_patternContext* FandangoParser::As_patternContext::or_pattern() {
  return getRuleContext<FandangoParser::Or_patternContext>(0);
}

tree::TerminalNode* FandangoParser::As_patternContext::AS() {
  return getToken(FandangoParser::AS, 0);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::As_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}


size_t FandangoParser::As_patternContext::getRuleIndex() const {
  return FandangoParser::RuleAs_pattern;
}


std::any FandangoParser::As_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAs_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::As_patternContext* FandangoParser::as_pattern() {
  As_patternContext *_localctx = _tracker.createInstance<As_patternContext>(_ctx, getState());
  enterRule(_localctx, 208, FandangoParser::RuleAs_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1982);
    or_pattern();
    setState(1983);
    match(FandangoParser::AS);
    setState(1984);
    pattern_capture_target();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Or_patternContext ------------------------------------------------------------------

FandangoParser::Or_patternContext::Or_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Closed_patternContext *> FandangoParser::Or_patternContext::closed_pattern() {
  return getRuleContexts<FandangoParser::Closed_patternContext>();
}

FandangoParser::Closed_patternContext* FandangoParser::Or_patternContext::closed_pattern(size_t i) {
  return getRuleContext<FandangoParser::Closed_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Or_patternContext::OR_OP() {
  return getTokens(FandangoParser::OR_OP);
}

tree::TerminalNode* FandangoParser::Or_patternContext::OR_OP(size_t i) {
  return getToken(FandangoParser::OR_OP, i);
}


size_t FandangoParser::Or_patternContext::getRuleIndex() const {
  return FandangoParser::RuleOr_pattern;
}


std::any FandangoParser::Or_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOr_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Or_patternContext* FandangoParser::or_pattern() {
  Or_patternContext *_localctx = _tracker.createInstance<Or_patternContext>(_ctx, getState());
  enterRule(_localctx, 210, FandangoParser::RuleOr_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1986);
    closed_pattern();
    setState(1991);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR_OP) {
      setState(1987);
      match(FandangoParser::OR_OP);
      setState(1988);
      closed_pattern();
      setState(1993);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Closed_patternContext ------------------------------------------------------------------

FandangoParser::Closed_patternContext::Closed_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Literal_patternContext* FandangoParser::Closed_patternContext::literal_pattern() {
  return getRuleContext<FandangoParser::Literal_patternContext>(0);
}

FandangoParser::Capture_patternContext* FandangoParser::Closed_patternContext::capture_pattern() {
  return getRuleContext<FandangoParser::Capture_patternContext>(0);
}

FandangoParser::Wildcard_patternContext* FandangoParser::Closed_patternContext::wildcard_pattern() {
  return getRuleContext<FandangoParser::Wildcard_patternContext>(0);
}

FandangoParser::Value_patternContext* FandangoParser::Closed_patternContext::value_pattern() {
  return getRuleContext<FandangoParser::Value_patternContext>(0);
}

FandangoParser::Group_patternContext* FandangoParser::Closed_patternContext::group_pattern() {
  return getRuleContext<FandangoParser::Group_patternContext>(0);
}

FandangoParser::Sequence_patternContext* FandangoParser::Closed_patternContext::sequence_pattern() {
  return getRuleContext<FandangoParser::Sequence_patternContext>(0);
}

FandangoParser::Mapping_patternContext* FandangoParser::Closed_patternContext::mapping_pattern() {
  return getRuleContext<FandangoParser::Mapping_patternContext>(0);
}

FandangoParser::Class_patternContext* FandangoParser::Closed_patternContext::class_pattern() {
  return getRuleContext<FandangoParser::Class_patternContext>(0);
}


size_t FandangoParser::Closed_patternContext::getRuleIndex() const {
  return FandangoParser::RuleClosed_pattern;
}


std::any FandangoParser::Closed_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClosed_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Closed_patternContext* FandangoParser::closed_pattern() {
  Closed_patternContext *_localctx = _tracker.createInstance<Closed_patternContext>(_ctx, getState());
  enterRule(_localctx, 212, FandangoParser::RuleClosed_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2002);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1994);
      literal_pattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1995);
      capture_pattern();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1996);
      wildcard_pattern();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1997);
      value_pattern();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1998);
      group_pattern();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1999);
      sequence_pattern();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2000);
      mapping_pattern();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2001);
      class_pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_patternContext ------------------------------------------------------------------

FandangoParser::Literal_patternContext::Literal_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Signed_numberContext* FandangoParser::Literal_patternContext::signed_number() {
  return getRuleContext<FandangoParser::Signed_numberContext>(0);
}

FandangoParser::Complex_numberContext* FandangoParser::Literal_patternContext::complex_number() {
  return getRuleContext<FandangoParser::Complex_numberContext>(0);
}

FandangoParser::StringsContext* FandangoParser::Literal_patternContext::strings() {
  return getRuleContext<FandangoParser::StringsContext>(0);
}

tree::TerminalNode* FandangoParser::Literal_patternContext::NONE() {
  return getToken(FandangoParser::NONE, 0);
}

tree::TerminalNode* FandangoParser::Literal_patternContext::TRUE() {
  return getToken(FandangoParser::TRUE, 0);
}

tree::TerminalNode* FandangoParser::Literal_patternContext::FALSE() {
  return getToken(FandangoParser::FALSE, 0);
}


size_t FandangoParser::Literal_patternContext::getRuleIndex() const {
  return FandangoParser::RuleLiteral_pattern;
}


std::any FandangoParser::Literal_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Literal_patternContext* FandangoParser::literal_pattern() {
  Literal_patternContext *_localctx = _tracker.createInstance<Literal_patternContext>(_ctx, getState());
  enterRule(_localctx, 214, FandangoParser::RuleLiteral_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2010);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2004);
      signed_number();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2005);
      complex_number();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2006);
      strings();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2007);
      match(FandangoParser::NONE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2008);
      match(FandangoParser::TRUE);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2009);
      match(FandangoParser::FALSE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_exprContext ------------------------------------------------------------------

FandangoParser::Literal_exprContext::Literal_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Signed_numberContext* FandangoParser::Literal_exprContext::signed_number() {
  return getRuleContext<FandangoParser::Signed_numberContext>(0);
}

FandangoParser::Complex_numberContext* FandangoParser::Literal_exprContext::complex_number() {
  return getRuleContext<FandangoParser::Complex_numberContext>(0);
}

FandangoParser::StringsContext* FandangoParser::Literal_exprContext::strings() {
  return getRuleContext<FandangoParser::StringsContext>(0);
}

tree::TerminalNode* FandangoParser::Literal_exprContext::NONE() {
  return getToken(FandangoParser::NONE, 0);
}

tree::TerminalNode* FandangoParser::Literal_exprContext::TRUE() {
  return getToken(FandangoParser::TRUE, 0);
}

tree::TerminalNode* FandangoParser::Literal_exprContext::FALSE() {
  return getToken(FandangoParser::FALSE, 0);
}


size_t FandangoParser::Literal_exprContext::getRuleIndex() const {
  return FandangoParser::RuleLiteral_expr;
}


std::any FandangoParser::Literal_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_expr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Literal_exprContext* FandangoParser::literal_expr() {
  Literal_exprContext *_localctx = _tracker.createInstance<Literal_exprContext>(_ctx, getState());
  enterRule(_localctx, 216, FandangoParser::RuleLiteral_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2018);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2012);
      signed_number();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2013);
      complex_number();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2014);
      strings();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2015);
      match(FandangoParser::NONE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2016);
      match(FandangoParser::TRUE);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2017);
      match(FandangoParser::FALSE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Complex_numberContext ------------------------------------------------------------------

FandangoParser::Complex_numberContext::Complex_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Signed_real_numberContext* FandangoParser::Complex_numberContext::signed_real_number() {
  return getRuleContext<FandangoParser::Signed_real_numberContext>(0);
}

tree::TerminalNode* FandangoParser::Complex_numberContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}

FandangoParser::Imaginary_numberContext* FandangoParser::Complex_numberContext::imaginary_number() {
  return getRuleContext<FandangoParser::Imaginary_numberContext>(0);
}

tree::TerminalNode* FandangoParser::Complex_numberContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::Complex_numberContext::getRuleIndex() const {
  return FandangoParser::RuleComplex_number;
}


std::any FandangoParser::Complex_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitComplex_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Complex_numberContext* FandangoParser::complex_number() {
  Complex_numberContext *_localctx = _tracker.createInstance<Complex_numberContext>(_ctx, getState());
  enterRule(_localctx, 218, FandangoParser::RuleComplex_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2028);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2020);
      signed_real_number();
      setState(2021);
      match(FandangoParser::ADD);
      setState(2022);
      imaginary_number();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2024);
      signed_real_number();
      setState(2025);
      match(FandangoParser::MINUS);
      setState(2026);
      imaginary_number();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signed_numberContext ------------------------------------------------------------------

FandangoParser::Signed_numberContext::Signed_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Signed_numberContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}

tree::TerminalNode* FandangoParser::Signed_numberContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::Signed_numberContext::getRuleIndex() const {
  return FandangoParser::RuleSigned_number;
}


std::any FandangoParser::Signed_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSigned_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Signed_numberContext* FandangoParser::signed_number() {
  Signed_numberContext *_localctx = _tracker.createInstance<Signed_numberContext>(_ctx, getState());
  enterRule(_localctx, 220, FandangoParser::RuleSigned_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2033);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER: {
        enterOuterAlt(_localctx, 1);
        setState(2030);
        match(FandangoParser::NUMBER);
        break;
      }

      case FandangoParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(2031);
        match(FandangoParser::MINUS);
        setState(2032);
        match(FandangoParser::NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Signed_real_numberContext ------------------------------------------------------------------

FandangoParser::Signed_real_numberContext::Signed_real_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Real_numberContext* FandangoParser::Signed_real_numberContext::real_number() {
  return getRuleContext<FandangoParser::Real_numberContext>(0);
}

tree::TerminalNode* FandangoParser::Signed_real_numberContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::Signed_real_numberContext::getRuleIndex() const {
  return FandangoParser::RuleSigned_real_number;
}


std::any FandangoParser::Signed_real_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSigned_real_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Signed_real_numberContext* FandangoParser::signed_real_number() {
  Signed_real_numberContext *_localctx = _tracker.createInstance<Signed_real_numberContext>(_ctx, getState());
  enterRule(_localctx, 222, FandangoParser::RuleSigned_real_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2038);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER: {
        enterOuterAlt(_localctx, 1);
        setState(2035);
        real_number();
        break;
      }

      case FandangoParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(2036);
        match(FandangoParser::MINUS);
        setState(2037);
        real_number();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Real_numberContext ------------------------------------------------------------------

FandangoParser::Real_numberContext::Real_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Real_numberContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}


size_t FandangoParser::Real_numberContext::getRuleIndex() const {
  return FandangoParser::RuleReal_number;
}


std::any FandangoParser::Real_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitReal_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Real_numberContext* FandangoParser::real_number() {
  Real_numberContext *_localctx = _tracker.createInstance<Real_numberContext>(_ctx, getState());
  enterRule(_localctx, 224, FandangoParser::RuleReal_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2040);
    match(FandangoParser::NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Imaginary_numberContext ------------------------------------------------------------------

FandangoParser::Imaginary_numberContext::Imaginary_numberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Imaginary_numberContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}


size_t FandangoParser::Imaginary_numberContext::getRuleIndex() const {
  return FandangoParser::RuleImaginary_number;
}


std::any FandangoParser::Imaginary_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitImaginary_number(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Imaginary_numberContext* FandangoParser::imaginary_number() {
  Imaginary_numberContext *_localctx = _tracker.createInstance<Imaginary_numberContext>(_ctx, getState());
  enterRule(_localctx, 226, FandangoParser::RuleImaginary_number);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2042);
    match(FandangoParser::NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Capture_patternContext ------------------------------------------------------------------

FandangoParser::Capture_patternContext::Capture_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::Capture_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}


size_t FandangoParser::Capture_patternContext::getRuleIndex() const {
  return FandangoParser::RuleCapture_pattern;
}


std::any FandangoParser::Capture_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCapture_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Capture_patternContext* FandangoParser::capture_pattern() {
  Capture_patternContext *_localctx = _tracker.createInstance<Capture_patternContext>(_ctx, getState());
  enterRule(_localctx, 228, FandangoParser::RuleCapture_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2044);
    pattern_capture_target();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Pattern_capture_targetContext ------------------------------------------------------------------

FandangoParser::Pattern_capture_targetContext::Pattern_capture_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Pattern_capture_targetContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}


size_t FandangoParser::Pattern_capture_targetContext::getRuleIndex() const {
  return FandangoParser::RulePattern_capture_target;
}


std::any FandangoParser::Pattern_capture_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPattern_capture_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::pattern_capture_target() {
  Pattern_capture_targetContext *_localctx = _tracker.createInstance<Pattern_capture_targetContext>(_ctx, getState());
  enterRule(_localctx, 230, FandangoParser::RulePattern_capture_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2046);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Wildcard_patternContext ------------------------------------------------------------------

FandangoParser::Wildcard_patternContext::Wildcard_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Wildcard_patternContext::UNDERSCORE() {
  return getToken(FandangoParser::UNDERSCORE, 0);
}


size_t FandangoParser::Wildcard_patternContext::getRuleIndex() const {
  return FandangoParser::RuleWildcard_pattern;
}


std::any FandangoParser::Wildcard_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitWildcard_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Wildcard_patternContext* FandangoParser::wildcard_pattern() {
  Wildcard_patternContext *_localctx = _tracker.createInstance<Wildcard_patternContext>(_ctx, getState());
  enterRule(_localctx, 232, FandangoParser::RuleWildcard_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2048);
    match(FandangoParser::UNDERSCORE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Value_patternContext ------------------------------------------------------------------

FandangoParser::Value_patternContext::Value_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AttrContext* FandangoParser::Value_patternContext::attr() {
  return getRuleContext<FandangoParser::AttrContext>(0);
}


size_t FandangoParser::Value_patternContext::getRuleIndex() const {
  return FandangoParser::RuleValue_pattern;
}


std::any FandangoParser::Value_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitValue_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Value_patternContext* FandangoParser::value_pattern() {
  Value_patternContext *_localctx = _tracker.createInstance<Value_patternContext>(_ctx, getState());
  enterRule(_localctx, 234, FandangoParser::RuleValue_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2050);
    attr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttrContext ------------------------------------------------------------------

FandangoParser::AttrContext::AttrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Name_or_attrContext* FandangoParser::AttrContext::name_or_attr() {
  return getRuleContext<FandangoParser::Name_or_attrContext>(0);
}

tree::TerminalNode* FandangoParser::AttrContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

FandangoParser::IdentifierContext* FandangoParser::AttrContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}


size_t FandangoParser::AttrContext::getRuleIndex() const {
  return FandangoParser::RuleAttr;
}


std::any FandangoParser::AttrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAttr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AttrContext* FandangoParser::attr() {
  AttrContext *_localctx = _tracker.createInstance<AttrContext>(_ctx, getState());
  enterRule(_localctx, 236, FandangoParser::RuleAttr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2052);
    name_or_attr(0);
    setState(2053);
    match(FandangoParser::DOT);
    setState(2054);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Name_or_attrContext ------------------------------------------------------------------

FandangoParser::Name_or_attrContext::Name_or_attrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Name_or_attrContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

FandangoParser::Name_or_attrContext* FandangoParser::Name_or_attrContext::name_or_attr() {
  return getRuleContext<FandangoParser::Name_or_attrContext>(0);
}

tree::TerminalNode* FandangoParser::Name_or_attrContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}


size_t FandangoParser::Name_or_attrContext::getRuleIndex() const {
  return FandangoParser::RuleName_or_attr;
}


std::any FandangoParser::Name_or_attrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitName_or_attr(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Name_or_attrContext* FandangoParser::name_or_attr() {
   return name_or_attr(0);
}

FandangoParser::Name_or_attrContext* FandangoParser::name_or_attr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Name_or_attrContext *_localctx = _tracker.createInstance<Name_or_attrContext>(_ctx, parentState);
  FandangoParser::Name_or_attrContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 238;
  enterRecursionRule(_localctx, 238, FandangoParser::RuleName_or_attr, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2057);
    identifier();
    _ctx->stop = _input->LT(-1);
    setState(2064);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Name_or_attrContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleName_or_attr);
        setState(2059);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2060);
        match(FandangoParser::DOT);
        setState(2061);
        identifier(); 
      }
      setState(2066);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Group_patternContext ------------------------------------------------------------------

FandangoParser::Group_patternContext::Group_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Group_patternContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::PatternContext* FandangoParser::Group_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}

tree::TerminalNode* FandangoParser::Group_patternContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}


size_t FandangoParser::Group_patternContext::getRuleIndex() const {
  return FandangoParser::RuleGroup_pattern;
}


std::any FandangoParser::Group_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGroup_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Group_patternContext* FandangoParser::group_pattern() {
  Group_patternContext *_localctx = _tracker.createInstance<Group_patternContext>(_ctx, getState());
  enterRule(_localctx, 240, FandangoParser::RuleGroup_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2067);
    match(FandangoParser::OPEN_PAREN);
    setState(2068);
    pattern();
    setState(2069);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sequence_patternContext ------------------------------------------------------------------

FandangoParser::Sequence_patternContext::Sequence_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Maybe_sequence_patternContext* FandangoParser::Sequence_patternContext::maybe_sequence_pattern() {
  return getRuleContext<FandangoParser::Maybe_sequence_patternContext>(0);
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Sequence_patternContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Open_sequence_patternContext* FandangoParser::Sequence_patternContext::open_sequence_pattern() {
  return getRuleContext<FandangoParser::Open_sequence_patternContext>(0);
}


size_t FandangoParser::Sequence_patternContext::getRuleIndex() const {
  return FandangoParser::RuleSequence_pattern;
}


std::any FandangoParser::Sequence_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSequence_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Sequence_patternContext* FandangoParser::sequence_pattern() {
  Sequence_patternContext *_localctx = _tracker.createInstance<Sequence_patternContext>(_ctx, getState());
  enterRule(_localctx, 242, FandangoParser::RuleSequence_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2081);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::OPEN_BRACK: {
        enterOuterAlt(_localctx, 1);
        setState(2071);
        match(FandangoParser::OPEN_BRACK);
        setState(2073);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 540449684976566776) != 0) || ((((_la - 77) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 77)) & 1125899909005571) != 0)) {
          setState(2072);
          maybe_sequence_pattern();
        }
        setState(2075);
        match(FandangoParser::CLOSE_BRACK);
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(2076);
        match(FandangoParser::OPEN_PAREN);
        setState(2078);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 540449684976566776) != 0) || ((((_la - 77) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 77)) & 1125899909005571) != 0)) {
          setState(2077);
          open_sequence_pattern();
        }
        setState(2080);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Open_sequence_patternContext ------------------------------------------------------------------

FandangoParser::Open_sequence_patternContext::Open_sequence_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Maybe_star_patternContext* FandangoParser::Open_sequence_patternContext::maybe_star_pattern() {
  return getRuleContext<FandangoParser::Maybe_star_patternContext>(0);
}

tree::TerminalNode* FandangoParser::Open_sequence_patternContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::Maybe_sequence_patternContext* FandangoParser::Open_sequence_patternContext::maybe_sequence_pattern() {
  return getRuleContext<FandangoParser::Maybe_sequence_patternContext>(0);
}


size_t FandangoParser::Open_sequence_patternContext::getRuleIndex() const {
  return FandangoParser::RuleOpen_sequence_pattern;
}


std::any FandangoParser::Open_sequence_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitOpen_sequence_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Open_sequence_patternContext* FandangoParser::open_sequence_pattern() {
  Open_sequence_patternContext *_localctx = _tracker.createInstance<Open_sequence_patternContext>(_ctx, getState());
  enterRule(_localctx, 244, FandangoParser::RuleOpen_sequence_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2083);
    maybe_star_pattern();
    setState(2084);
    match(FandangoParser::COMMA);
    setState(2086);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540449684976566776) != 0) || ((((_la - 77) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 77)) & 1125899909005571) != 0)) {
      setState(2085);
      maybe_sequence_pattern();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Maybe_sequence_patternContext ------------------------------------------------------------------

FandangoParser::Maybe_sequence_patternContext::Maybe_sequence_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Maybe_star_patternContext *> FandangoParser::Maybe_sequence_patternContext::maybe_star_pattern() {
  return getRuleContexts<FandangoParser::Maybe_star_patternContext>();
}

FandangoParser::Maybe_star_patternContext* FandangoParser::Maybe_sequence_patternContext::maybe_star_pattern(size_t i) {
  return getRuleContext<FandangoParser::Maybe_star_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Maybe_sequence_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Maybe_sequence_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Maybe_sequence_patternContext::getRuleIndex() const {
  return FandangoParser::RuleMaybe_sequence_pattern;
}


std::any FandangoParser::Maybe_sequence_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMaybe_sequence_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Maybe_sequence_patternContext* FandangoParser::maybe_sequence_pattern() {
  Maybe_sequence_patternContext *_localctx = _tracker.createInstance<Maybe_sequence_patternContext>(_ctx, getState());
  enterRule(_localctx, 246, FandangoParser::RuleMaybe_sequence_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2088);
    maybe_star_pattern();
    setState(2093);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2089);
        match(FandangoParser::COMMA);
        setState(2090);
        maybe_star_pattern(); 
      }
      setState(2095);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx);
    }
    setState(2097);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2096);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Maybe_star_patternContext ------------------------------------------------------------------

FandangoParser::Maybe_star_patternContext::Maybe_star_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Star_patternContext* FandangoParser::Maybe_star_patternContext::star_pattern() {
  return getRuleContext<FandangoParser::Star_patternContext>(0);
}

FandangoParser::PatternContext* FandangoParser::Maybe_star_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}


size_t FandangoParser::Maybe_star_patternContext::getRuleIndex() const {
  return FandangoParser::RuleMaybe_star_pattern;
}


std::any FandangoParser::Maybe_star_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMaybe_star_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Maybe_star_patternContext* FandangoParser::maybe_star_pattern() {
  Maybe_star_patternContext *_localctx = _tracker.createInstance<Maybe_star_patternContext>(_ctx, getState());
  enterRule(_localctx, 248, FandangoParser::RuleMaybe_star_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2101);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(2099);
        star_pattern();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::MINUS:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::UNDERSCORE: {
        enterOuterAlt(_localctx, 2);
        setState(2100);
        pattern();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_patternContext ------------------------------------------------------------------

FandangoParser::Star_patternContext::Star_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_patternContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::Star_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}

FandangoParser::Wildcard_patternContext* FandangoParser::Star_patternContext::wildcard_pattern() {
  return getRuleContext<FandangoParser::Wildcard_patternContext>(0);
}


size_t FandangoParser::Star_patternContext::getRuleIndex() const {
  return FandangoParser::RuleStar_pattern;
}


std::any FandangoParser::Star_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_patternContext* FandangoParser::star_pattern() {
  Star_patternContext *_localctx = _tracker.createInstance<Star_patternContext>(_ctx, getState());
  enterRule(_localctx, 250, FandangoParser::RuleStar_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2107);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2103);
      match(FandangoParser::STAR);
      setState(2104);
      pattern_capture_target();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2105);
      match(FandangoParser::STAR);
      setState(2106);
      wildcard_pattern();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mapping_patternContext ------------------------------------------------------------------

FandangoParser::Mapping_patternContext::Mapping_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Mapping_patternContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::Mapping_patternContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

FandangoParser::Double_star_patternContext* FandangoParser::Mapping_patternContext::double_star_pattern() {
  return getRuleContext<FandangoParser::Double_star_patternContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Mapping_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Mapping_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

FandangoParser::Items_patternContext* FandangoParser::Mapping_patternContext::items_pattern() {
  return getRuleContext<FandangoParser::Items_patternContext>(0);
}


size_t FandangoParser::Mapping_patternContext::getRuleIndex() const {
  return FandangoParser::RuleMapping_pattern;
}


std::any FandangoParser::Mapping_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitMapping_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Mapping_patternContext* FandangoParser::mapping_pattern() {
  Mapping_patternContext *_localctx = _tracker.createInstance<Mapping_patternContext>(_ctx, getState());
  enterRule(_localctx, 252, FandangoParser::RuleMapping_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2134);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2109);
      match(FandangoParser::OPEN_BRACE);
      setState(2110);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2111);
      match(FandangoParser::OPEN_BRACE);
      setState(2112);
      double_star_pattern();
      setState(2114);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(2113);
        match(FandangoParser::COMMA);
      }
      setState(2116);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2118);
      match(FandangoParser::OPEN_BRACE);
      setState(2119);
      items_pattern();
      setState(2120);
      match(FandangoParser::COMMA);
      setState(2121);
      double_star_pattern();
      setState(2123);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(2122);
        match(FandangoParser::COMMA);
      }
      setState(2125);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2127);
      match(FandangoParser::OPEN_BRACE);
      setState(2128);
      items_pattern();
      setState(2130);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(2129);
        match(FandangoParser::COMMA);
      }
      setState(2132);
      match(FandangoParser::CLOSE_BRACE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Items_patternContext ------------------------------------------------------------------

FandangoParser::Items_patternContext::Items_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Key_value_patternContext *> FandangoParser::Items_patternContext::key_value_pattern() {
  return getRuleContexts<FandangoParser::Key_value_patternContext>();
}

FandangoParser::Key_value_patternContext* FandangoParser::Items_patternContext::key_value_pattern(size_t i) {
  return getRuleContext<FandangoParser::Key_value_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Items_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Items_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Items_patternContext::getRuleIndex() const {
  return FandangoParser::RuleItems_pattern;
}


std::any FandangoParser::Items_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitItems_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Items_patternContext* FandangoParser::items_pattern() {
  Items_patternContext *_localctx = _tracker.createInstance<Items_patternContext>(_ctx, getState());
  enterRule(_localctx, 254, FandangoParser::RuleItems_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2136);
    key_value_pattern();
    setState(2141);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 245, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2137);
        match(FandangoParser::COMMA);
        setState(2138);
        key_value_pattern(); 
      }
      setState(2143);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 245, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Key_value_patternContext ------------------------------------------------------------------

FandangoParser::Key_value_patternContext::Key_value_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Key_value_patternContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::PatternContext* FandangoParser::Key_value_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}

FandangoParser::Literal_exprContext* FandangoParser::Key_value_patternContext::literal_expr() {
  return getRuleContext<FandangoParser::Literal_exprContext>(0);
}

FandangoParser::AttrContext* FandangoParser::Key_value_patternContext::attr() {
  return getRuleContext<FandangoParser::AttrContext>(0);
}


size_t FandangoParser::Key_value_patternContext::getRuleIndex() const {
  return FandangoParser::RuleKey_value_pattern;
}


std::any FandangoParser::Key_value_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKey_value_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Key_value_patternContext* FandangoParser::key_value_pattern() {
  Key_value_patternContext *_localctx = _tracker.createInstance<Key_value_patternContext>(_ctx, getState());
  enterRule(_localctx, 256, FandangoParser::RuleKey_value_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2146);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::MINUS: {
        setState(2144);
        literal_expr();
        break;
      }

      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME: {
        setState(2145);
        attr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2148);
    match(FandangoParser::COLON);
    setState(2149);
    pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Double_star_patternContext ------------------------------------------------------------------

FandangoParser::Double_star_patternContext::Double_star_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Double_star_patternContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Pattern_capture_targetContext* FandangoParser::Double_star_patternContext::pattern_capture_target() {
  return getRuleContext<FandangoParser::Pattern_capture_targetContext>(0);
}


size_t FandangoParser::Double_star_patternContext::getRuleIndex() const {
  return FandangoParser::RuleDouble_star_pattern;
}


std::any FandangoParser::Double_star_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDouble_star_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Double_star_patternContext* FandangoParser::double_star_pattern() {
  Double_star_patternContext *_localctx = _tracker.createInstance<Double_star_patternContext>(_ctx, getState());
  enterRule(_localctx, 258, FandangoParser::RuleDouble_star_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2151);
    match(FandangoParser::POWER);
    setState(2152);
    pattern_capture_target();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Class_patternContext ------------------------------------------------------------------

FandangoParser::Class_patternContext::Class_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Name_or_attrContext* FandangoParser::Class_patternContext::name_or_attr() {
  return getRuleContext<FandangoParser::Name_or_attrContext>(0);
}

tree::TerminalNode* FandangoParser::Class_patternContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Class_patternContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Positional_patternsContext* FandangoParser::Class_patternContext::positional_patterns() {
  return getRuleContext<FandangoParser::Positional_patternsContext>(0);
}

std::vector<tree::TerminalNode *> FandangoParser::Class_patternContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Class_patternContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

FandangoParser::Keyword_patternsContext* FandangoParser::Class_patternContext::keyword_patterns() {
  return getRuleContext<FandangoParser::Keyword_patternsContext>(0);
}


size_t FandangoParser::Class_patternContext::getRuleIndex() const {
  return FandangoParser::RuleClass_pattern;
}


std::any FandangoParser::Class_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitClass_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Class_patternContext* FandangoParser::class_pattern() {
  Class_patternContext *_localctx = _tracker.createInstance<Class_patternContext>(_ctx, getState());
  enterRule(_localctx, 260, FandangoParser::RuleClass_pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2184);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 250, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2154);
      name_or_attr(0);
      setState(2155);
      match(FandangoParser::OPEN_PAREN);
      setState(2156);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2158);
      name_or_attr(0);
      setState(2159);
      match(FandangoParser::OPEN_PAREN);
      setState(2160);
      positional_patterns();
      setState(2162);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(2161);
        match(FandangoParser::COMMA);
      }
      setState(2164);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2166);
      name_or_attr(0);
      setState(2167);
      match(FandangoParser::OPEN_PAREN);
      setState(2168);
      keyword_patterns();
      setState(2170);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(2169);
        match(FandangoParser::COMMA);
      }
      setState(2172);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2174);
      name_or_attr(0);
      setState(2175);
      match(FandangoParser::OPEN_PAREN);
      setState(2176);
      positional_patterns();
      setState(2177);
      match(FandangoParser::COMMA);
      setState(2178);
      keyword_patterns();
      setState(2180);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(2179);
        match(FandangoParser::COMMA);
      }
      setState(2182);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Positional_patternsContext ------------------------------------------------------------------

FandangoParser::Positional_patternsContext::Positional_patternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::PatternContext *> FandangoParser::Positional_patternsContext::pattern() {
  return getRuleContexts<FandangoParser::PatternContext>();
}

FandangoParser::PatternContext* FandangoParser::Positional_patternsContext::pattern(size_t i) {
  return getRuleContext<FandangoParser::PatternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Positional_patternsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Positional_patternsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Positional_patternsContext::getRuleIndex() const {
  return FandangoParser::RulePositional_patterns;
}


std::any FandangoParser::Positional_patternsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPositional_patterns(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Positional_patternsContext* FandangoParser::positional_patterns() {
  Positional_patternsContext *_localctx = _tracker.createInstance<Positional_patternsContext>(_ctx, getState());
  enterRule(_localctx, 262, FandangoParser::RulePositional_patterns);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2186);
    pattern();
    setState(2191);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2187);
        match(FandangoParser::COMMA);
        setState(2188);
        pattern(); 
      }
      setState(2193);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Keyword_patternsContext ------------------------------------------------------------------

FandangoParser::Keyword_patternsContext::Keyword_patternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Keyword_patternContext *> FandangoParser::Keyword_patternsContext::keyword_pattern() {
  return getRuleContexts<FandangoParser::Keyword_patternContext>();
}

FandangoParser::Keyword_patternContext* FandangoParser::Keyword_patternsContext::keyword_pattern(size_t i) {
  return getRuleContext<FandangoParser::Keyword_patternContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Keyword_patternsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Keyword_patternsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Keyword_patternsContext::getRuleIndex() const {
  return FandangoParser::RuleKeyword_patterns;
}


std::any FandangoParser::Keyword_patternsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKeyword_patterns(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Keyword_patternsContext* FandangoParser::keyword_patterns() {
  Keyword_patternsContext *_localctx = _tracker.createInstance<Keyword_patternsContext>(_ctx, getState());
  enterRule(_localctx, 264, FandangoParser::RuleKeyword_patterns);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2194);
    keyword_pattern();
    setState(2199);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2195);
        match(FandangoParser::COMMA);
        setState(2196);
        keyword_pattern(); 
      }
      setState(2201);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 252, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Keyword_patternContext ------------------------------------------------------------------

FandangoParser::Keyword_patternContext::Keyword_patternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Keyword_patternContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Keyword_patternContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::PatternContext* FandangoParser::Keyword_patternContext::pattern() {
  return getRuleContext<FandangoParser::PatternContext>(0);
}


size_t FandangoParser::Keyword_patternContext::getRuleIndex() const {
  return FandangoParser::RuleKeyword_pattern;
}


std::any FandangoParser::Keyword_patternContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKeyword_pattern(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Keyword_patternContext* FandangoParser::keyword_pattern() {
  Keyword_patternContext *_localctx = _tracker.createInstance<Keyword_patternContext>(_ctx, getState());
  enterRule(_localctx, 266, FandangoParser::RuleKeyword_pattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2202);
    identifier();
    setState(2203);
    match(FandangoParser::ASSIGN);
    setState(2204);
    pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_aliasContext ------------------------------------------------------------------

FandangoParser::Type_aliasContext::Type_aliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Type_aliasContext::TYPE() {
  return getToken(FandangoParser::TYPE, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Type_aliasContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Type_aliasContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Type_aliasContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Type_paramsContext* FandangoParser::Type_aliasContext::type_params() {
  return getRuleContext<FandangoParser::Type_paramsContext>(0);
}


size_t FandangoParser::Type_aliasContext::getRuleIndex() const {
  return FandangoParser::RuleType_alias;
}


std::any FandangoParser::Type_aliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_alias(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_aliasContext* FandangoParser::type_alias() {
  Type_aliasContext *_localctx = _tracker.createInstance<Type_aliasContext>(_ctx, getState());
  enterRule(_localctx, 268, FandangoParser::RuleType_alias);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2206);
    match(FandangoParser::TYPE);
    setState(2207);
    identifier();
    setState(2209);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::OPEN_BRACK) {
      setState(2208);
      type_params();
    }
    setState(2211);
    match(FandangoParser::ASSIGN);
    setState(2212);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_paramsContext ------------------------------------------------------------------

FandangoParser::Type_paramsContext::Type_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Type_paramsContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::Type_param_seqContext* FandangoParser::Type_paramsContext::type_param_seq() {
  return getRuleContext<FandangoParser::Type_param_seqContext>(0);
}

tree::TerminalNode* FandangoParser::Type_paramsContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::Type_paramsContext::getRuleIndex() const {
  return FandangoParser::RuleType_params;
}


std::any FandangoParser::Type_paramsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_params(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_paramsContext* FandangoParser::type_params() {
  Type_paramsContext *_localctx = _tracker.createInstance<Type_paramsContext>(_ctx, getState());
  enterRule(_localctx, 270, FandangoParser::RuleType_params);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2214);
    match(FandangoParser::OPEN_BRACK);
    setState(2215);
    type_param_seq();
    setState(2216);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_param_seqContext ------------------------------------------------------------------

FandangoParser::Type_param_seqContext::Type_param_seqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Type_paramContext *> FandangoParser::Type_param_seqContext::type_param() {
  return getRuleContexts<FandangoParser::Type_paramContext>();
}

FandangoParser::Type_paramContext* FandangoParser::Type_param_seqContext::type_param(size_t i) {
  return getRuleContext<FandangoParser::Type_paramContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Type_param_seqContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Type_param_seqContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Type_param_seqContext::getRuleIndex() const {
  return FandangoParser::RuleType_param_seq;
}


std::any FandangoParser::Type_param_seqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_param_seq(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_param_seqContext* FandangoParser::type_param_seq() {
  Type_param_seqContext *_localctx = _tracker.createInstance<Type_param_seqContext>(_ctx, getState());
  enterRule(_localctx, 272, FandangoParser::RuleType_param_seq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2218);
    type_param();
    setState(2223);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2219);
        match(FandangoParser::COMMA);
        setState(2220);
        type_param(); 
      }
      setState(2225);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx);
    }
    setState(2227);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2226);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_paramContext ------------------------------------------------------------------

FandangoParser::Type_paramContext::Type_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Type_paramContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

FandangoParser::Type_param_boundContext* FandangoParser::Type_paramContext::type_param_bound() {
  return getRuleContext<FandangoParser::Type_param_boundContext>(0);
}

tree::TerminalNode* FandangoParser::Type_paramContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

tree::TerminalNode* FandangoParser::Type_paramContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}


size_t FandangoParser::Type_paramContext::getRuleIndex() const {
  return FandangoParser::RuleType_param;
}


std::any FandangoParser::Type_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_param(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_paramContext* FandangoParser::type_param() {
  Type_paramContext *_localctx = _tracker.createInstance<Type_paramContext>(_ctx, getState());
  enterRule(_localctx, 274, FandangoParser::RuleType_param);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2237);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(2229);
        identifier();
        setState(2231);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FandangoParser::COLON) {
          setState(2230);
          type_param_bound();
        }
        break;
      }

      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 2);
        setState(2233);
        match(FandangoParser::STAR);
        setState(2234);
        identifier();
        break;
      }

      case FandangoParser::POWER: {
        enterOuterAlt(_localctx, 3);
        setState(2235);
        match(FandangoParser::POWER);
        setState(2236);
        identifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_param_boundContext ------------------------------------------------------------------

FandangoParser::Type_param_boundContext::Type_param_boundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Type_param_boundContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Type_param_boundContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Type_param_boundContext::getRuleIndex() const {
  return FandangoParser::RuleType_param_bound;
}


std::any FandangoParser::Type_param_boundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_param_bound(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_param_boundContext* FandangoParser::type_param_bound() {
  Type_param_boundContext *_localctx = _tracker.createInstance<Type_param_boundContext>(_ctx, getState());
  enterRule(_localctx, 276, FandangoParser::RuleType_param_bound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2239);
    match(FandangoParser::COLON);
    setState(2240);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionsContext ------------------------------------------------------------------

FandangoParser::ExpressionsContext::ExpressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::ExpressionsContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::ExpressionsContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::ExpressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::ExpressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::ExpressionsContext::getRuleIndex() const {
  return FandangoParser::RuleExpressions;
}


std::any FandangoParser::ExpressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExpressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ExpressionsContext* FandangoParser::expressions() {
  ExpressionsContext *_localctx = _tracker.createInstance<ExpressionsContext>(_ctx, getState());
  enterRule(_localctx, 278, FandangoParser::RuleExpressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2242);
    expression();
    setState(2247);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2243);
        match(FandangoParser::COMMA);
        setState(2244);
        expression(); 
      }
      setState(2249);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx);
    }
    setState(2251);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2250);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

FandangoParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::DisjunctionContext *> FandangoParser::ExpressionContext::disjunction() {
  return getRuleContexts<FandangoParser::DisjunctionContext>();
}

FandangoParser::DisjunctionContext* FandangoParser::ExpressionContext::disjunction(size_t i) {
  return getRuleContext<FandangoParser::DisjunctionContext>(i);
}

tree::TerminalNode* FandangoParser::ExpressionContext::IF() {
  return getToken(FandangoParser::IF, 0);
}

tree::TerminalNode* FandangoParser::ExpressionContext::ELSE() {
  return getToken(FandangoParser::ELSE, 0);
}

FandangoParser::ExpressionContext* FandangoParser::ExpressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::LambdefContext* FandangoParser::ExpressionContext::lambdef() {
  return getRuleContext<FandangoParser::LambdefContext>(0);
}


size_t FandangoParser::ExpressionContext::getRuleIndex() const {
  return FandangoParser::RuleExpression;
}


std::any FandangoParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ExpressionContext* FandangoParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 280, FandangoParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2261);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 260, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2253);
      disjunction();
      setState(2254);
      match(FandangoParser::IF);
      setState(2255);
      disjunction();
      setState(2256);
      match(FandangoParser::ELSE);
      setState(2257);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2259);
      disjunction();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2260);
      lambdef();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Yield_exprContext ------------------------------------------------------------------

FandangoParser::Yield_exprContext::Yield_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Yield_exprContext::YIELD() {
  return getToken(FandangoParser::YIELD, 0);
}

tree::TerminalNode* FandangoParser::Yield_exprContext::FROM() {
  return getToken(FandangoParser::FROM, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Yield_exprContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Yield_exprContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}


size_t FandangoParser::Yield_exprContext::getRuleIndex() const {
  return FandangoParser::RuleYield_expr;
}


std::any FandangoParser::Yield_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitYield_expr(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Yield_exprContext* FandangoParser::yield_expr() {
  Yield_exprContext *_localctx = _tracker.createInstance<Yield_exprContext>(_ctx, getState());
  enterRule(_localctx, 282, FandangoParser::RuleYield_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2270);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2263);
      match(FandangoParser::YIELD);
      setState(2264);
      match(FandangoParser::FROM);
      setState(2265);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2266);
      match(FandangoParser::YIELD);
      setState(2268);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx)) {
      case 1: {
        setState(2267);
        star_expressions();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_expressionsContext ------------------------------------------------------------------

FandangoParser::Star_expressionsContext::Star_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_expressionContext *> FandangoParser::Star_expressionsContext::star_expression() {
  return getRuleContexts<FandangoParser::Star_expressionContext>();
}

FandangoParser::Star_expressionContext* FandangoParser::Star_expressionsContext::star_expression(size_t i) {
  return getRuleContext<FandangoParser::Star_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_expressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_expressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_expressionsContext::getRuleIndex() const {
  return FandangoParser::RuleStar_expressions;
}


std::any FandangoParser::Star_expressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_expressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_expressionsContext* FandangoParser::star_expressions() {
  Star_expressionsContext *_localctx = _tracker.createInstance<Star_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 284, FandangoParser::RuleStar_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2272);
    star_expression();
    setState(2277);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2273);
        match(FandangoParser::COMMA);
        setState(2274);
        star_expression(); 
      }
      setState(2279);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx);
    }
    setState(2281);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2280);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_expressionContext ------------------------------------------------------------------

FandangoParser::Star_expressionContext::Star_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Star_selectionContext* FandangoParser::Star_expressionContext::star_selection() {
  return getRuleContext<FandangoParser::Star_selectionContext>(0);
}

tree::TerminalNode* FandangoParser::Star_expressionContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Star_expressionContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::Star_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Star_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleStar_expression;
}


std::any FandangoParser::Star_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_expressionContext* FandangoParser::star_expression() {
  Star_expressionContext *_localctx = _tracker.createInstance<Star_expressionContext>(_ctx, getState());
  enterRule(_localctx, 286, FandangoParser::RuleStar_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2287);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 265, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2283);
      star_selection();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2284);
      match(FandangoParser::STAR);
      setState(2285);
      bitwise_or(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2286);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_named_expressionsContext ------------------------------------------------------------------

FandangoParser::Star_named_expressionsContext::Star_named_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_named_expressionContext *> FandangoParser::Star_named_expressionsContext::star_named_expression() {
  return getRuleContexts<FandangoParser::Star_named_expressionContext>();
}

FandangoParser::Star_named_expressionContext* FandangoParser::Star_named_expressionsContext::star_named_expression(size_t i) {
  return getRuleContext<FandangoParser::Star_named_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_named_expressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_named_expressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_named_expressionsContext::getRuleIndex() const {
  return FandangoParser::RuleStar_named_expressions;
}


std::any FandangoParser::Star_named_expressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_named_expressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::star_named_expressions() {
  Star_named_expressionsContext *_localctx = _tracker.createInstance<Star_named_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 288, FandangoParser::RuleStar_named_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2289);
    star_named_expression();
    setState(2294);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2290);
        match(FandangoParser::COMMA);
        setState(2291);
        star_named_expression(); 
      }
      setState(2296);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx);
    }
    setState(2298);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2297);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_named_expressionContext ------------------------------------------------------------------

FandangoParser::Star_named_expressionContext::Star_named_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_named_expressionContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Star_named_expressionContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

FandangoParser::Named_expressionContext* FandangoParser::Star_named_expressionContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::Star_named_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleStar_named_expression;
}


std::any FandangoParser::Star_named_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_named_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_named_expressionContext* FandangoParser::star_named_expression() {
  Star_named_expressionContext *_localctx = _tracker.createInstance<Star_named_expressionContext>(_ctx, getState());
  enterRule(_localctx, 290, FandangoParser::RuleStar_named_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2303);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2300);
      match(FandangoParser::STAR);
      setState(2301);
      bitwise_or(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2302);
      named_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assignment_expressionContext ------------------------------------------------------------------

FandangoParser::Assignment_expressionContext::Assignment_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Assignment_expressionContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Assignment_expressionContext::EXPR_ASSIGN() {
  return getToken(FandangoParser::EXPR_ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Assignment_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Assignment_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleAssignment_expression;
}


std::any FandangoParser::Assignment_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAssignment_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Assignment_expressionContext* FandangoParser::assignment_expression() {
  Assignment_expressionContext *_localctx = _tracker.createInstance<Assignment_expressionContext>(_ctx, getState());
  enterRule(_localctx, 292, FandangoParser::RuleAssignment_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2305);
    identifier();
    setState(2306);
    match(FandangoParser::EXPR_ASSIGN);
    setState(2307);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_expressionContext ------------------------------------------------------------------

FandangoParser::Named_expressionContext::Named_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Assignment_expressionContext* FandangoParser::Named_expressionContext::assignment_expression() {
  return getRuleContext<FandangoParser::Assignment_expressionContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::Named_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Named_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleNamed_expression;
}


std::any FandangoParser::Named_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNamed_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Named_expressionContext* FandangoParser::named_expression() {
  Named_expressionContext *_localctx = _tracker.createInstance<Named_expressionContext>(_ctx, getState());
  enterRule(_localctx, 294, FandangoParser::RuleNamed_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2311);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 269, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2309);
      assignment_expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2310);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DisjunctionContext ------------------------------------------------------------------

FandangoParser::DisjunctionContext::DisjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ConjunctionContext *> FandangoParser::DisjunctionContext::conjunction() {
  return getRuleContexts<FandangoParser::ConjunctionContext>();
}

FandangoParser::ConjunctionContext* FandangoParser::DisjunctionContext::conjunction(size_t i) {
  return getRuleContext<FandangoParser::ConjunctionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::DisjunctionContext::OR() {
  return getTokens(FandangoParser::OR);
}

tree::TerminalNode* FandangoParser::DisjunctionContext::OR(size_t i) {
  return getToken(FandangoParser::OR, i);
}


size_t FandangoParser::DisjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleDisjunction;
}


std::any FandangoParser::DisjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDisjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DisjunctionContext* FandangoParser::disjunction() {
  DisjunctionContext *_localctx = _tracker.createInstance<DisjunctionContext>(_ctx, getState());
  enterRule(_localctx, 296, FandangoParser::RuleDisjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2313);
    conjunction();
    setState(2318);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::OR) {
      setState(2314);
      match(FandangoParser::OR);
      setState(2315);
      conjunction();
      setState(2320);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConjunctionContext ------------------------------------------------------------------

FandangoParser::ConjunctionContext::ConjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::InversionContext *> FandangoParser::ConjunctionContext::inversion() {
  return getRuleContexts<FandangoParser::InversionContext>();
}

FandangoParser::InversionContext* FandangoParser::ConjunctionContext::inversion(size_t i) {
  return getRuleContext<FandangoParser::InversionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::ConjunctionContext::AND() {
  return getTokens(FandangoParser::AND);
}

tree::TerminalNode* FandangoParser::ConjunctionContext::AND(size_t i) {
  return getToken(FandangoParser::AND, i);
}


size_t FandangoParser::ConjunctionContext::getRuleIndex() const {
  return FandangoParser::RuleConjunction;
}


std::any FandangoParser::ConjunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitConjunction(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ConjunctionContext* FandangoParser::conjunction() {
  ConjunctionContext *_localctx = _tracker.createInstance<ConjunctionContext>(_ctx, getState());
  enterRule(_localctx, 298, FandangoParser::RuleConjunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2321);
    inversion();
    setState(2326);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::AND) {
      setState(2322);
      match(FandangoParser::AND);
      setState(2323);
      inversion();
      setState(2328);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InversionContext ------------------------------------------------------------------

FandangoParser::InversionContext::InversionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::InversionContext::NOT() {
  return getToken(FandangoParser::NOT, 0);
}

FandangoParser::InversionContext* FandangoParser::InversionContext::inversion() {
  return getRuleContext<FandangoParser::InversionContext>(0);
}

FandangoParser::ComparisonContext* FandangoParser::InversionContext::comparison() {
  return getRuleContext<FandangoParser::ComparisonContext>(0);
}


size_t FandangoParser::InversionContext::getRuleIndex() const {
  return FandangoParser::RuleInversion;
}


std::any FandangoParser::InversionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitInversion(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::InversionContext* FandangoParser::inversion() {
  InversionContext *_localctx = _tracker.createInstance<InversionContext>(_ctx, getState());
  enterRule(_localctx, 300, FandangoParser::RuleInversion);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2332);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NOT: {
        enterOuterAlt(_localctx, 1);
        setState(2329);
        match(FandangoParser::NOT);
        setState(2330);
        inversion();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(2331);
        comparison();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonContext ------------------------------------------------------------------

FandangoParser::ComparisonContext::ComparisonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Bitwise_orContext* FandangoParser::ComparisonContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

std::vector<FandangoParser::Compare_op_bitwise_or_pairContext *> FandangoParser::ComparisonContext::compare_op_bitwise_or_pair() {
  return getRuleContexts<FandangoParser::Compare_op_bitwise_or_pairContext>();
}

FandangoParser::Compare_op_bitwise_or_pairContext* FandangoParser::ComparisonContext::compare_op_bitwise_or_pair(size_t i) {
  return getRuleContext<FandangoParser::Compare_op_bitwise_or_pairContext>(i);
}


size_t FandangoParser::ComparisonContext::getRuleIndex() const {
  return FandangoParser::RuleComparison;
}


std::any FandangoParser::ComparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitComparison(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ComparisonContext* FandangoParser::comparison() {
  ComparisonContext *_localctx = _tracker.createInstance<ComparisonContext>(_ctx, getState());
  enterRule(_localctx, 302, FandangoParser::RuleComparison);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2334);
    bitwise_or(0);
    setState(2338);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 273, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2335);
        compare_op_bitwise_or_pair(); 
      }
      setState(2340);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 273, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compare_op_bitwise_or_pairContext ------------------------------------------------------------------

FandangoParser::Compare_op_bitwise_or_pairContext::Compare_op_bitwise_or_pairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Eq_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::eq_bitwise_or() {
  return getRuleContext<FandangoParser::Eq_bitwise_orContext>(0);
}

FandangoParser::Noteq_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::noteq_bitwise_or() {
  return getRuleContext<FandangoParser::Noteq_bitwise_orContext>(0);
}

FandangoParser::Lte_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::lte_bitwise_or() {
  return getRuleContext<FandangoParser::Lte_bitwise_orContext>(0);
}

FandangoParser::Lt_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::lt_bitwise_or() {
  return getRuleContext<FandangoParser::Lt_bitwise_orContext>(0);
}

FandangoParser::Gte_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::gte_bitwise_or() {
  return getRuleContext<FandangoParser::Gte_bitwise_orContext>(0);
}

FandangoParser::Gt_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::gt_bitwise_or() {
  return getRuleContext<FandangoParser::Gt_bitwise_orContext>(0);
}

FandangoParser::Notin_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::notin_bitwise_or() {
  return getRuleContext<FandangoParser::Notin_bitwise_orContext>(0);
}

FandangoParser::In_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::in_bitwise_or() {
  return getRuleContext<FandangoParser::In_bitwise_orContext>(0);
}

FandangoParser::Isnot_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::isnot_bitwise_or() {
  return getRuleContext<FandangoParser::Isnot_bitwise_orContext>(0);
}

FandangoParser::Is_bitwise_orContext* FandangoParser::Compare_op_bitwise_or_pairContext::is_bitwise_or() {
  return getRuleContext<FandangoParser::Is_bitwise_orContext>(0);
}


size_t FandangoParser::Compare_op_bitwise_or_pairContext::getRuleIndex() const {
  return FandangoParser::RuleCompare_op_bitwise_or_pair;
}


std::any FandangoParser::Compare_op_bitwise_or_pairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitCompare_op_bitwise_or_pair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Compare_op_bitwise_or_pairContext* FandangoParser::compare_op_bitwise_or_pair() {
  Compare_op_bitwise_or_pairContext *_localctx = _tracker.createInstance<Compare_op_bitwise_or_pairContext>(_ctx, getState());
  enterRule(_localctx, 304, FandangoParser::RuleCompare_op_bitwise_or_pair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2351);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 274, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2341);
      eq_bitwise_or();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2342);
      noteq_bitwise_or();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2343);
      lte_bitwise_or();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2344);
      lt_bitwise_or();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2345);
      gte_bitwise_or();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2346);
      gt_bitwise_or();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2347);
      notin_bitwise_or();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2348);
      in_bitwise_or();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2349);
      isnot_bitwise_or();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2350);
      is_bitwise_or();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Eq_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Eq_bitwise_orContext::Eq_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Eq_bitwise_orContext::EQUALS() {
  return getToken(FandangoParser::EQUALS, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Eq_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Eq_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleEq_bitwise_or;
}


std::any FandangoParser::Eq_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitEq_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Eq_bitwise_orContext* FandangoParser::eq_bitwise_or() {
  Eq_bitwise_orContext *_localctx = _tracker.createInstance<Eq_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 306, FandangoParser::RuleEq_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2353);
    match(FandangoParser::EQUALS);
    setState(2354);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Noteq_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Noteq_bitwise_orContext::Noteq_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Noteq_bitwise_orContext::NOT_EQ_2() {
  return getToken(FandangoParser::NOT_EQ_2, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Noteq_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

tree::TerminalNode* FandangoParser::Noteq_bitwise_orContext::NOT_EQ_1() {
  return getToken(FandangoParser::NOT_EQ_1, 0);
}


size_t FandangoParser::Noteq_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleNoteq_bitwise_or;
}


std::any FandangoParser::Noteq_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNoteq_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Noteq_bitwise_orContext* FandangoParser::noteq_bitwise_or() {
  Noteq_bitwise_orContext *_localctx = _tracker.createInstance<Noteq_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 308, FandangoParser::RuleNoteq_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2360);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NOT_EQ_2: {
        enterOuterAlt(_localctx, 1);
        setState(2356);
        match(FandangoParser::NOT_EQ_2);
        setState(2357);
        bitwise_or(0);
        break;
      }

      case FandangoParser::NOT_EQ_1: {
        enterOuterAlt(_localctx, 2);
        setState(2358);
        match(FandangoParser::NOT_EQ_1);
        setState(2359);
        bitwise_or(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lte_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Lte_bitwise_orContext::Lte_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lte_bitwise_orContext::LT_EQ() {
  return getToken(FandangoParser::LT_EQ, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Lte_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Lte_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleLte_bitwise_or;
}


std::any FandangoParser::Lte_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLte_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lte_bitwise_orContext* FandangoParser::lte_bitwise_or() {
  Lte_bitwise_orContext *_localctx = _tracker.createInstance<Lte_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 310, FandangoParser::RuleLte_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2362);
    match(FandangoParser::LT_EQ);
    setState(2363);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lt_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Lt_bitwise_orContext::Lt_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lt_bitwise_orContext::LESS_THAN() {
  return getToken(FandangoParser::LESS_THAN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Lt_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Lt_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleLt_bitwise_or;
}


std::any FandangoParser::Lt_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLt_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lt_bitwise_orContext* FandangoParser::lt_bitwise_or() {
  Lt_bitwise_orContext *_localctx = _tracker.createInstance<Lt_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 312, FandangoParser::RuleLt_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2365);
    match(FandangoParser::LESS_THAN);
    setState(2366);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Gte_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Gte_bitwise_orContext::Gte_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Gte_bitwise_orContext::GT_EQ() {
  return getToken(FandangoParser::GT_EQ, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Gte_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Gte_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleGte_bitwise_or;
}


std::any FandangoParser::Gte_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGte_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Gte_bitwise_orContext* FandangoParser::gte_bitwise_or() {
  Gte_bitwise_orContext *_localctx = _tracker.createInstance<Gte_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 314, FandangoParser::RuleGte_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2368);
    match(FandangoParser::GT_EQ);
    setState(2369);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Gt_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Gt_bitwise_orContext::Gt_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Gt_bitwise_orContext::GREATER_THAN() {
  return getToken(FandangoParser::GREATER_THAN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Gt_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Gt_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleGt_bitwise_or;
}


std::any FandangoParser::Gt_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGt_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Gt_bitwise_orContext* FandangoParser::gt_bitwise_or() {
  Gt_bitwise_orContext *_localctx = _tracker.createInstance<Gt_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 316, FandangoParser::RuleGt_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2371);
    match(FandangoParser::GREATER_THAN);
    setState(2372);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Notin_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Notin_bitwise_orContext::Notin_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Notin_bitwise_orContext::NOT() {
  return getToken(FandangoParser::NOT, 0);
}

tree::TerminalNode* FandangoParser::Notin_bitwise_orContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Notin_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Notin_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleNotin_bitwise_or;
}


std::any FandangoParser::Notin_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitNotin_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Notin_bitwise_orContext* FandangoParser::notin_bitwise_or() {
  Notin_bitwise_orContext *_localctx = _tracker.createInstance<Notin_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 318, FandangoParser::RuleNotin_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2374);
    match(FandangoParser::NOT);
    setState(2375);
    match(FandangoParser::IN);
    setState(2376);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- In_bitwise_orContext ------------------------------------------------------------------

FandangoParser::In_bitwise_orContext::In_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::In_bitwise_orContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::In_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::In_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleIn_bitwise_or;
}


std::any FandangoParser::In_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIn_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::In_bitwise_orContext* FandangoParser::in_bitwise_or() {
  In_bitwise_orContext *_localctx = _tracker.createInstance<In_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 320, FandangoParser::RuleIn_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2378);
    match(FandangoParser::IN);
    setState(2379);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Isnot_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Isnot_bitwise_orContext::Isnot_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Isnot_bitwise_orContext::IS() {
  return getToken(FandangoParser::IS, 0);
}

tree::TerminalNode* FandangoParser::Isnot_bitwise_orContext::NOT() {
  return getToken(FandangoParser::NOT, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Isnot_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Isnot_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleIsnot_bitwise_or;
}


std::any FandangoParser::Isnot_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIsnot_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Isnot_bitwise_orContext* FandangoParser::isnot_bitwise_or() {
  Isnot_bitwise_orContext *_localctx = _tracker.createInstance<Isnot_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 322, FandangoParser::RuleIsnot_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2381);
    match(FandangoParser::IS);
    setState(2382);
    match(FandangoParser::NOT);
    setState(2383);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Is_bitwise_orContext ------------------------------------------------------------------

FandangoParser::Is_bitwise_orContext::Is_bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Is_bitwise_orContext::IS() {
  return getToken(FandangoParser::IS, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Is_bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}


size_t FandangoParser::Is_bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleIs_bitwise_or;
}


std::any FandangoParser::Is_bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIs_bitwise_or(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Is_bitwise_orContext* FandangoParser::is_bitwise_or() {
  Is_bitwise_orContext *_localctx = _tracker.createInstance<Is_bitwise_orContext>(_ctx, getState());
  enterRule(_localctx, 324, FandangoParser::RuleIs_bitwise_or);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2385);
    match(FandangoParser::IS);
    setState(2386);
    bitwise_or(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bitwise_orContext ------------------------------------------------------------------

FandangoParser::Bitwise_orContext::Bitwise_orContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Bitwise_xorContext* FandangoParser::Bitwise_orContext::bitwise_xor() {
  return getRuleContext<FandangoParser::Bitwise_xorContext>(0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Bitwise_orContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

tree::TerminalNode* FandangoParser::Bitwise_orContext::OR_OP() {
  return getToken(FandangoParser::OR_OP, 0);
}


size_t FandangoParser::Bitwise_orContext::getRuleIndex() const {
  return FandangoParser::RuleBitwise_or;
}


std::any FandangoParser::Bitwise_orContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_or(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Bitwise_orContext* FandangoParser::bitwise_or() {
   return bitwise_or(0);
}

FandangoParser::Bitwise_orContext* FandangoParser::bitwise_or(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Bitwise_orContext *_localctx = _tracker.createInstance<Bitwise_orContext>(_ctx, parentState);
  FandangoParser::Bitwise_orContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 326;
  enterRecursionRule(_localctx, 326, FandangoParser::RuleBitwise_or, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2389);
    bitwise_xor(0);
    _ctx->stop = _input->LT(-1);
    setState(2396);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Bitwise_orContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitwise_or);
        setState(2391);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2392);
        match(FandangoParser::OR_OP);
        setState(2393);
        bitwise_xor(0); 
      }
      setState(2398);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 276, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Bitwise_xorContext ------------------------------------------------------------------

FandangoParser::Bitwise_xorContext::Bitwise_xorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Bitwise_andContext* FandangoParser::Bitwise_xorContext::bitwise_and() {
  return getRuleContext<FandangoParser::Bitwise_andContext>(0);
}

FandangoParser::Bitwise_xorContext* FandangoParser::Bitwise_xorContext::bitwise_xor() {
  return getRuleContext<FandangoParser::Bitwise_xorContext>(0);
}

tree::TerminalNode* FandangoParser::Bitwise_xorContext::XOR() {
  return getToken(FandangoParser::XOR, 0);
}


size_t FandangoParser::Bitwise_xorContext::getRuleIndex() const {
  return FandangoParser::RuleBitwise_xor;
}


std::any FandangoParser::Bitwise_xorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_xor(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Bitwise_xorContext* FandangoParser::bitwise_xor() {
   return bitwise_xor(0);
}

FandangoParser::Bitwise_xorContext* FandangoParser::bitwise_xor(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Bitwise_xorContext *_localctx = _tracker.createInstance<Bitwise_xorContext>(_ctx, parentState);
  FandangoParser::Bitwise_xorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 328;
  enterRecursionRule(_localctx, 328, FandangoParser::RuleBitwise_xor, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2400);
    bitwise_and(0);
    _ctx->stop = _input->LT(-1);
    setState(2407);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Bitwise_xorContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitwise_xor);
        setState(2402);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2403);
        match(FandangoParser::XOR);
        setState(2404);
        bitwise_and(0); 
      }
      setState(2409);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Bitwise_andContext ------------------------------------------------------------------

FandangoParser::Bitwise_andContext::Bitwise_andContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Shift_exprContext* FandangoParser::Bitwise_andContext::shift_expr() {
  return getRuleContext<FandangoParser::Shift_exprContext>(0);
}

FandangoParser::Bitwise_andContext* FandangoParser::Bitwise_andContext::bitwise_and() {
  return getRuleContext<FandangoParser::Bitwise_andContext>(0);
}

tree::TerminalNode* FandangoParser::Bitwise_andContext::AND_OP() {
  return getToken(FandangoParser::AND_OP, 0);
}


size_t FandangoParser::Bitwise_andContext::getRuleIndex() const {
  return FandangoParser::RuleBitwise_and;
}


std::any FandangoParser::Bitwise_andContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_and(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Bitwise_andContext* FandangoParser::bitwise_and() {
   return bitwise_and(0);
}

FandangoParser::Bitwise_andContext* FandangoParser::bitwise_and(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Bitwise_andContext *_localctx = _tracker.createInstance<Bitwise_andContext>(_ctx, parentState);
  FandangoParser::Bitwise_andContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 330;
  enterRecursionRule(_localctx, 330, FandangoParser::RuleBitwise_and, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2411);
    shift_expr(0);
    _ctx->stop = _input->LT(-1);
    setState(2418);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Bitwise_andContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleBitwise_and);
        setState(2413);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2414);
        match(FandangoParser::AND_OP);
        setState(2415);
        shift_expr(0); 
      }
      setState(2420);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Shift_exprContext ------------------------------------------------------------------

FandangoParser::Shift_exprContext::Shift_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::SumContext* FandangoParser::Shift_exprContext::sum() {
  return getRuleContext<FandangoParser::SumContext>(0);
}

FandangoParser::Shift_exprContext* FandangoParser::Shift_exprContext::shift_expr() {
  return getRuleContext<FandangoParser::Shift_exprContext>(0);
}

tree::TerminalNode* FandangoParser::Shift_exprContext::LEFT_SHIFT() {
  return getToken(FandangoParser::LEFT_SHIFT, 0);
}

tree::TerminalNode* FandangoParser::Shift_exprContext::RIGHT_SHIFT() {
  return getToken(FandangoParser::RIGHT_SHIFT, 0);
}


size_t FandangoParser::Shift_exprContext::getRuleIndex() const {
  return FandangoParser::RuleShift_expr;
}


std::any FandangoParser::Shift_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitShift_expr(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::Shift_exprContext* FandangoParser::shift_expr() {
   return shift_expr(0);
}

FandangoParser::Shift_exprContext* FandangoParser::shift_expr(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::Shift_exprContext *_localctx = _tracker.createInstance<Shift_exprContext>(_ctx, parentState);
  FandangoParser::Shift_exprContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 332;
  enterRecursionRule(_localctx, 332, FandangoParser::RuleShift_expr, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2422);
    sum(0);
    _ctx->stop = _input->LT(-1);
    setState(2432);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2430);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Shift_exprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShift_expr);
          setState(2424);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2425);
          match(FandangoParser::LEFT_SHIFT);
          setState(2426);
          sum(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Shift_exprContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleShift_expr);
          setState(2427);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2428);
          match(FandangoParser::RIGHT_SHIFT);
          setState(2429);
          sum(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(2434);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SumContext ------------------------------------------------------------------

FandangoParser::SumContext::SumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::TermContext* FandangoParser::SumContext::term() {
  return getRuleContext<FandangoParser::TermContext>(0);
}

FandangoParser::SumContext* FandangoParser::SumContext::sum() {
  return getRuleContext<FandangoParser::SumContext>(0);
}

tree::TerminalNode* FandangoParser::SumContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}

tree::TerminalNode* FandangoParser::SumContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}


size_t FandangoParser::SumContext::getRuleIndex() const {
  return FandangoParser::RuleSum;
}


std::any FandangoParser::SumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSum(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::SumContext* FandangoParser::sum() {
   return sum(0);
}

FandangoParser::SumContext* FandangoParser::sum(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::SumContext *_localctx = _tracker.createInstance<SumContext>(_ctx, parentState);
  FandangoParser::SumContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 334;
  enterRecursionRule(_localctx, 334, FandangoParser::RuleSum, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2436);
    term(0);
    _ctx->stop = _input->LT(-1);
    setState(2446);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 282, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2444);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<SumContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSum);
          setState(2438);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2439);
          match(FandangoParser::ADD);
          setState(2440);
          term(0);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<SumContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleSum);
          setState(2441);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2442);
          match(FandangoParser::MINUS);
          setState(2443);
          term(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(2448);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 282, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TermContext ------------------------------------------------------------------

FandangoParser::TermContext::TermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::FactorContext* FandangoParser::TermContext::factor() {
  return getRuleContext<FandangoParser::FactorContext>(0);
}

FandangoParser::TermContext* FandangoParser::TermContext::term() {
  return getRuleContext<FandangoParser::TermContext>(0);
}

tree::TerminalNode* FandangoParser::TermContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

tree::TerminalNode* FandangoParser::TermContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

tree::TerminalNode* FandangoParser::TermContext::IDIV() {
  return getToken(FandangoParser::IDIV, 0);
}

tree::TerminalNode* FandangoParser::TermContext::MOD() {
  return getToken(FandangoParser::MOD, 0);
}

tree::TerminalNode* FandangoParser::TermContext::AT() {
  return getToken(FandangoParser::AT, 0);
}


size_t FandangoParser::TermContext::getRuleIndex() const {
  return FandangoParser::RuleTerm;
}


std::any FandangoParser::TermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTerm(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::TermContext* FandangoParser::term() {
   return term(0);
}

FandangoParser::TermContext* FandangoParser::term(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::TermContext *_localctx = _tracker.createInstance<TermContext>(_ctx, parentState);
  FandangoParser::TermContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 336;
  enterRecursionRule(_localctx, 336, FandangoParser::RuleTerm, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2450);
    factor();
    _ctx->stop = _input->LT(-1);
    setState(2469);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 284, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2467);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2452);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(2453);
          match(FandangoParser::STAR);
          setState(2454);
          factor();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2455);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(2456);
          match(FandangoParser::DIV);
          setState(2457);
          factor();
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2458);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(2459);
          match(FandangoParser::IDIV);
          setState(2460);
          factor();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2461);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2462);
          match(FandangoParser::MOD);
          setState(2463);
          factor();
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<TermContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleTerm);
          setState(2464);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2465);
          match(FandangoParser::AT);
          setState(2466);
          factor();
          break;
        }

        default:
          break;
        } 
      }
      setState(2471);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 284, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- FactorContext ------------------------------------------------------------------

FandangoParser::FactorContext::FactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::FactorContext::ADD() {
  return getToken(FandangoParser::ADD, 0);
}

FandangoParser::FactorContext* FandangoParser::FactorContext::factor() {
  return getRuleContext<FandangoParser::FactorContext>(0);
}

tree::TerminalNode* FandangoParser::FactorContext::MINUS() {
  return getToken(FandangoParser::MINUS, 0);
}

tree::TerminalNode* FandangoParser::FactorContext::NOT_OP() {
  return getToken(FandangoParser::NOT_OP, 0);
}

FandangoParser::PowerContext* FandangoParser::FactorContext::power() {
  return getRuleContext<FandangoParser::PowerContext>(0);
}


size_t FandangoParser::FactorContext::getRuleIndex() const {
  return FandangoParser::RuleFactor;
}


std::any FandangoParser::FactorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFactor(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::FactorContext* FandangoParser::factor() {
  FactorContext *_localctx = _tracker.createInstance<FactorContext>(_ctx, getState());
  enterRule(_localctx, 338, FandangoParser::RuleFactor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2479);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ADD: {
        enterOuterAlt(_localctx, 1);
        setState(2472);
        match(FandangoParser::ADD);
        setState(2473);
        factor();
        break;
      }

      case FandangoParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(2474);
        match(FandangoParser::MINUS);
        setState(2475);
        factor();
        break;
      }

      case FandangoParser::NOT_OP: {
        enterOuterAlt(_localctx, 3);
        setState(2476);
        match(FandangoParser::NOT_OP);
        setState(2477);
        factor();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 4);
        setState(2478);
        power();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PowerContext ------------------------------------------------------------------

FandangoParser::PowerContext::PowerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Await_primaryContext* FandangoParser::PowerContext::await_primary() {
  return getRuleContext<FandangoParser::Await_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::PowerContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::FactorContext* FandangoParser::PowerContext::factor() {
  return getRuleContext<FandangoParser::FactorContext>(0);
}


size_t FandangoParser::PowerContext::getRuleIndex() const {
  return FandangoParser::RulePower;
}


std::any FandangoParser::PowerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPower(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::PowerContext* FandangoParser::power() {
  PowerContext *_localctx = _tracker.createInstance<PowerContext>(_ctx, getState());
  enterRule(_localctx, 340, FandangoParser::RulePower);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2486);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 286, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2481);
      await_primary();
      setState(2482);
      match(FandangoParser::POWER);
      setState(2483);
      factor();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2485);
      await_primary();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Await_primaryContext ------------------------------------------------------------------

FandangoParser::Await_primaryContext::Await_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Await_primaryContext::AWAIT() {
  return getToken(FandangoParser::AWAIT, 0);
}

FandangoParser::PrimaryContext* FandangoParser::Await_primaryContext::primary() {
  return getRuleContext<FandangoParser::PrimaryContext>(0);
}


size_t FandangoParser::Await_primaryContext::getRuleIndex() const {
  return FandangoParser::RuleAwait_primary;
}


std::any FandangoParser::Await_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAwait_primary(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Await_primaryContext* FandangoParser::await_primary() {
  Await_primaryContext *_localctx = _tracker.createInstance<Await_primaryContext>(_ctx, getState());
  enterRule(_localctx, 342, FandangoParser::RuleAwait_primary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2491);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::AWAIT: {
        enterOuterAlt(_localctx, 1);
        setState(2488);
        match(FandangoParser::AWAIT);
        setState(2489);
        primary(0);
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::FALSE:
      case FandangoParser::NONE:
      case FandangoParser::TRUE:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        enterOuterAlt(_localctx, 2);
        setState(2490);
        primary(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

FandangoParser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AtomContext* FandangoParser::PrimaryContext::atom() {
  return getRuleContext<FandangoParser::AtomContext>(0);
}

FandangoParser::PrimaryContext* FandangoParser::PrimaryContext::primary() {
  return getRuleContext<FandangoParser::PrimaryContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

FandangoParser::IdentifierContext* FandangoParser::PrimaryContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

FandangoParser::GenexpContext* FandangoParser::PrimaryContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::PrimaryContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::PrimaryContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::PrimaryContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::PrimaryContext::getRuleIndex() const {
  return FandangoParser::RulePrimary;
}


std::any FandangoParser::PrimaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitPrimary(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::PrimaryContext* FandangoParser::primary() {
   return primary(0);
}

FandangoParser::PrimaryContext* FandangoParser::primary(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, parentState);
  FandangoParser::PrimaryContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 344;
  enterRecursionRule(_localctx, 344, FandangoParser::RulePrimary, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2494);
    atom();
    _ctx->stop = _input->LT(-1);
    setState(2514);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 290, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2512);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 289, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2496);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(2497);
          match(FandangoParser::DOT);
          setState(2498);
          identifier();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2499);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(2500);
          genexp();
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2501);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2502);
          match(FandangoParser::OPEN_PAREN);
          setState(2504);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 74)) & 93071897) != 0)) {
            setState(2503);
            arguments();
          }
          setState(2506);
          match(FandangoParser::CLOSE_PAREN);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<PrimaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePrimary);
          setState(2507);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2508);
          match(FandangoParser::OPEN_BRACK);
          setState(2509);
          slices();
          setState(2510);
          match(FandangoParser::CLOSE_BRACK);
          break;
        }

        default:
          break;
        } 
      }
      setState(2516);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 290, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SlicesContext ------------------------------------------------------------------

FandangoParser::SlicesContext::SlicesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::SliceContext *> FandangoParser::SlicesContext::slice() {
  return getRuleContexts<FandangoParser::SliceContext>();
}

FandangoParser::SliceContext* FandangoParser::SlicesContext::slice(size_t i) {
  return getRuleContext<FandangoParser::SliceContext>(i);
}

std::vector<FandangoParser::Starred_expressionContext *> FandangoParser::SlicesContext::starred_expression() {
  return getRuleContexts<FandangoParser::Starred_expressionContext>();
}

FandangoParser::Starred_expressionContext* FandangoParser::SlicesContext::starred_expression(size_t i) {
  return getRuleContext<FandangoParser::Starred_expressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::SlicesContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::SlicesContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::SlicesContext::getRuleIndex() const {
  return FandangoParser::RuleSlices;
}


std::any FandangoParser::SlicesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlices(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SlicesContext* FandangoParser::slices() {
  SlicesContext *_localctx = _tracker.createInstance<SlicesContext>(_ctx, getState());
  enterRule(_localctx, 346, FandangoParser::RuleSlices);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2519);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx)) {
    case 1: {
      setState(2517);
      slice();
      break;
    }

    case 2: {
      setState(2518);
      starred_expression();
      break;
    }

    default:
      break;
    }
    setState(2528);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2521);
        match(FandangoParser::COMMA);
        setState(2524);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx)) {
        case 1: {
          setState(2522);
          slice();
          break;
        }

        case 2: {
          setState(2523);
          starred_expression();
          break;
        }

        default:
          break;
        } 
      }
      setState(2530);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx);
    }
    setState(2532);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2531);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SliceContext ------------------------------------------------------------------

FandangoParser::SliceContext::SliceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::SliceContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::SliceContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::SliceContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::SliceContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

FandangoParser::Named_expressionContext* FandangoParser::SliceContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::SliceContext::getRuleIndex() const {
  return FandangoParser::RuleSlice;
}


std::any FandangoParser::SliceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSlice(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SliceContext* FandangoParser::slice() {
  SliceContext *_localctx = _tracker.createInstance<SliceContext>(_ctx, getState());
  enterRule(_localctx, 348, FandangoParser::RuleSlice);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2548);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 299, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2535);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 93071897) != 0)) {
        setState(2534);
        expression();
      }
      setState(2537);
      match(FandangoParser::COLON);
      setState(2539);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 93071897) != 0)) {
        setState(2538);
        expression();
      }
      setState(2545);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COLON) {
        setState(2541);
        match(FandangoParser::COLON);
        setState(2543);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 74)) & 93071897) != 0)) {
          setState(2542);
          expression();
        }
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2547);
      named_expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

FandangoParser::AtomContext::AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Selector_lengthContext* FandangoParser::AtomContext::selector_length() {
  return getRuleContext<FandangoParser::Selector_lengthContext>(0);
}

FandangoParser::IdentifierContext* FandangoParser::AtomContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::AtomContext::TRUE() {
  return getToken(FandangoParser::TRUE, 0);
}

tree::TerminalNode* FandangoParser::AtomContext::FALSE() {
  return getToken(FandangoParser::FALSE, 0);
}

tree::TerminalNode* FandangoParser::AtomContext::NONE() {
  return getToken(FandangoParser::NONE, 0);
}

FandangoParser::StringsContext* FandangoParser::AtomContext::strings() {
  return getRuleContext<FandangoParser::StringsContext>(0);
}

tree::TerminalNode* FandangoParser::AtomContext::NUMBER() {
  return getToken(FandangoParser::NUMBER, 0);
}

FandangoParser::TupleContext* FandangoParser::AtomContext::tuple() {
  return getRuleContext<FandangoParser::TupleContext>(0);
}

FandangoParser::GroupContext* FandangoParser::AtomContext::group() {
  return getRuleContext<FandangoParser::GroupContext>(0);
}

FandangoParser::GenexpContext* FandangoParser::AtomContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

FandangoParser::ListContext* FandangoParser::AtomContext::list() {
  return getRuleContext<FandangoParser::ListContext>(0);
}

FandangoParser::ListcompContext* FandangoParser::AtomContext::listcomp() {
  return getRuleContext<FandangoParser::ListcompContext>(0);
}

FandangoParser::DictContext* FandangoParser::AtomContext::dict() {
  return getRuleContext<FandangoParser::DictContext>(0);
}

FandangoParser::SetContext* FandangoParser::AtomContext::set() {
  return getRuleContext<FandangoParser::SetContext>(0);
}

FandangoParser::DictcompContext* FandangoParser::AtomContext::dictcomp() {
  return getRuleContext<FandangoParser::DictcompContext>(0);
}

FandangoParser::SetcompContext* FandangoParser::AtomContext::setcomp() {
  return getRuleContext<FandangoParser::SetcompContext>(0);
}

tree::TerminalNode* FandangoParser::AtomContext::ELLIPSIS() {
  return getToken(FandangoParser::ELLIPSIS, 0);
}


size_t FandangoParser::AtomContext::getRuleIndex() const {
  return FandangoParser::RuleAtom;
}


std::any FandangoParser::AtomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitAtom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::AtomContext* FandangoParser::atom() {
  AtomContext *_localctx = _tracker.createInstance<AtomContext>(_ctx, getState());
  enterRule(_localctx, 350, FandangoParser::RuleAtom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2573);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 303, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2550);
      selector_length();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2551);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2552);
      match(FandangoParser::TRUE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2553);
      match(FandangoParser::FALSE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2554);
      match(FandangoParser::NONE);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2555);
      strings();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2556);
      match(FandangoParser::NUMBER);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2560);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 300, _ctx)) {
      case 1: {
        setState(2557);
        tuple();
        break;
      }

      case 2: {
        setState(2558);
        group();
        break;
      }

      case 3: {
        setState(2559);
        genexp();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2564);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx)) {
      case 1: {
        setState(2562);
        list();
        break;
      }

      case 2: {
        setState(2563);
        listcomp();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2570);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx)) {
      case 1: {
        setState(2566);
        dict();
        break;
      }

      case 2: {
        setState(2567);
        set();
        break;
      }

      case 3: {
        setState(2568);
        dictcomp();
        break;
      }

      case 4: {
        setState(2569);
        setcomp();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2572);
      match(FandangoParser::ELLIPSIS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupContext ------------------------------------------------------------------

FandangoParser::GroupContext::GroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::GroupContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::GroupContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Yield_exprContext* FandangoParser::GroupContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Named_expressionContext* FandangoParser::GroupContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}


size_t FandangoParser::GroupContext::getRuleIndex() const {
  return FandangoParser::RuleGroup;
}


std::any FandangoParser::GroupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGroup(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::GroupContext* FandangoParser::group() {
  GroupContext *_localctx = _tracker.createInstance<GroupContext>(_ctx, getState());
  enterRule(_localctx, 352, FandangoParser::RuleGroup);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2575);
    match(FandangoParser::OPEN_PAREN);
    setState(2578);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::YIELD: {
        setState(2576);
        yield_expr();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        setState(2577);
        named_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2580);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdefContext ------------------------------------------------------------------

FandangoParser::LambdefContext::LambdefContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::LambdefContext::LAMBDA() {
  return getToken(FandangoParser::LAMBDA, 0);
}

tree::TerminalNode* FandangoParser::LambdefContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

FandangoParser::ExpressionContext* FandangoParser::LambdefContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Lambda_paramsContext* FandangoParser::LambdefContext::lambda_params() {
  return getRuleContext<FandangoParser::Lambda_paramsContext>(0);
}


size_t FandangoParser::LambdefContext::getRuleIndex() const {
  return FandangoParser::RuleLambdef;
}


std::any FandangoParser::LambdefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambdef(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::LambdefContext* FandangoParser::lambdef() {
  LambdefContext *_localctx = _tracker.createInstance<LambdefContext>(_ctx, getState());
  enterRule(_localctx, 354, FandangoParser::RuleLambdef);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2582);
    match(FandangoParser::LAMBDA);
    setState(2584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 55) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 55)) & 272629775) != 0)) {
      setState(2583);
      lambda_params();
    }
    setState(2586);
    match(FandangoParser::COLON);
    setState(2587);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_paramsContext ------------------------------------------------------------------

FandangoParser::Lambda_paramsContext::Lambda_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_parametersContext* FandangoParser::Lambda_paramsContext::lambda_parameters() {
  return getRuleContext<FandangoParser::Lambda_parametersContext>(0);
}


size_t FandangoParser::Lambda_paramsContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_params;
}


std::any FandangoParser::Lambda_paramsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_params(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_paramsContext* FandangoParser::lambda_params() {
  Lambda_paramsContext *_localctx = _tracker.createInstance<Lambda_paramsContext>(_ctx, getState());
  enterRule(_localctx, 356, FandangoParser::RuleLambda_params);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2589);
    lambda_parameters();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_parametersContext ------------------------------------------------------------------

FandangoParser::Lambda_parametersContext::Lambda_parametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_slash_no_defaultContext* FandangoParser::Lambda_parametersContext::lambda_slash_no_default() {
  return getRuleContext<FandangoParser::Lambda_slash_no_defaultContext>(0);
}

std::vector<FandangoParser::Lambda_param_no_defaultContext *> FandangoParser::Lambda_parametersContext::lambda_param_no_default() {
  return getRuleContexts<FandangoParser::Lambda_param_no_defaultContext>();
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_parametersContext::lambda_param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(i);
}

std::vector<FandangoParser::Lambda_param_with_defaultContext *> FandangoParser::Lambda_parametersContext::lambda_param_with_default() {
  return getRuleContexts<FandangoParser::Lambda_param_with_defaultContext>();
}

FandangoParser::Lambda_param_with_defaultContext* FandangoParser::Lambda_parametersContext::lambda_param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_with_defaultContext>(i);
}

FandangoParser::Lambda_star_etcContext* FandangoParser::Lambda_parametersContext::lambda_star_etc() {
  return getRuleContext<FandangoParser::Lambda_star_etcContext>(0);
}

FandangoParser::Lambda_slash_with_defaultContext* FandangoParser::Lambda_parametersContext::lambda_slash_with_default() {
  return getRuleContext<FandangoParser::Lambda_slash_with_defaultContext>(0);
}


size_t FandangoParser::Lambda_parametersContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_parameters;
}


std::any FandangoParser::Lambda_parametersContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_parameters(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_parametersContext* FandangoParser::lambda_parameters() {
  Lambda_parametersContext *_localctx = _tracker.createInstance<Lambda_parametersContext>(_ctx, getState());
  enterRule(_localctx, 358, FandangoParser::RuleLambda_parameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2640);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 316, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2591);
      lambda_slash_no_default();
      setState(2595);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2592);
          lambda_param_no_default(); 
        }
        setState(2597);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx);
      }
      setState(2601);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(2598);
        lambda_param_with_default();
        setState(2603);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2605);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2604);
        lambda_star_etc();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2607);
      lambda_slash_with_default();
      setState(2611);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(2608);
        lambda_param_with_default();
        setState(2613);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2615);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2614);
        lambda_star_etc();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2618); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2617);
                lambda_param_no_default();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2620); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(2625);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(2622);
        lambda_param_with_default();
        setState(2627);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2629);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2628);
        lambda_star_etc();
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2632); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2631);
        lambda_param_with_default();
        setState(2634); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0));
      setState(2637);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::STAR

      || _la == FandangoParser::POWER) {
        setState(2636);
        lambda_star_etc();
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2639);
      lambda_star_etc();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_slash_no_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_slash_no_defaultContext::Lambda_slash_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_slash_no_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Lambda_param_no_defaultContext *> FandangoParser::Lambda_slash_no_defaultContext::lambda_param_no_default() {
  return getRuleContexts<FandangoParser::Lambda_param_no_defaultContext>();
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_slash_no_defaultContext::lambda_param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Lambda_slash_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_slash_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_slash_no_default;
}


std::any FandangoParser::Lambda_slash_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_slash_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_slash_no_defaultContext* FandangoParser::lambda_slash_no_default() {
  Lambda_slash_no_defaultContext *_localctx = _tracker.createInstance<Lambda_slash_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 360, FandangoParser::RuleLambda_slash_no_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2643); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2642);
      lambda_param_no_default();
      setState(2645); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540431955284459520) != 0));
    setState(2647);
    match(FandangoParser::DIV);
    setState(2649);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2648);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_slash_with_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_slash_with_defaultContext::Lambda_slash_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_slash_with_defaultContext::DIV() {
  return getToken(FandangoParser::DIV, 0);
}

std::vector<FandangoParser::Lambda_param_no_defaultContext *> FandangoParser::Lambda_slash_with_defaultContext::lambda_param_no_default() {
  return getRuleContexts<FandangoParser::Lambda_param_no_defaultContext>();
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_slash_with_defaultContext::lambda_param_no_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(i);
}

std::vector<FandangoParser::Lambda_param_with_defaultContext *> FandangoParser::Lambda_slash_with_defaultContext::lambda_param_with_default() {
  return getRuleContexts<FandangoParser::Lambda_param_with_defaultContext>();
}

FandangoParser::Lambda_param_with_defaultContext* FandangoParser::Lambda_slash_with_defaultContext::lambda_param_with_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_with_defaultContext>(i);
}

tree::TerminalNode* FandangoParser::Lambda_slash_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_slash_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_slash_with_default;
}


std::any FandangoParser::Lambda_slash_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_slash_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_slash_with_defaultContext* FandangoParser::lambda_slash_with_default() {
  Lambda_slash_with_defaultContext *_localctx = _tracker.createInstance<Lambda_slash_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 362, FandangoParser::RuleLambda_slash_with_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2654);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2651);
        lambda_param_no_default(); 
      }
      setState(2656);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx);
    }
    setState(2658); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2657);
      lambda_param_with_default();
      setState(2660); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540431955284459520) != 0));
    setState(2662);
    match(FandangoParser::DIV);
    setState(2664);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2663);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_star_etcContext ------------------------------------------------------------------

FandangoParser::Lambda_star_etcContext::Lambda_star_etcContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_star_etcContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_star_etcContext::lambda_param_no_default() {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(0);
}

std::vector<FandangoParser::Lambda_param_maybe_defaultContext *> FandangoParser::Lambda_star_etcContext::lambda_param_maybe_default() {
  return getRuleContexts<FandangoParser::Lambda_param_maybe_defaultContext>();
}

FandangoParser::Lambda_param_maybe_defaultContext* FandangoParser::Lambda_star_etcContext::lambda_param_maybe_default(size_t i) {
  return getRuleContext<FandangoParser::Lambda_param_maybe_defaultContext>(i);
}

FandangoParser::Lambda_kwdsContext* FandangoParser::Lambda_star_etcContext::lambda_kwds() {
  return getRuleContext<FandangoParser::Lambda_kwdsContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_star_etcContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_star_etcContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_star_etc;
}


std::any FandangoParser::Lambda_star_etcContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_star_etc(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_star_etcContext* FandangoParser::lambda_star_etc() {
  Lambda_star_etcContext *_localctx = _tracker.createInstance<Lambda_star_etcContext>(_ctx, getState());
  enterRule(_localctx, 364, FandangoParser::RuleLambda_star_etc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2688);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2666);
      match(FandangoParser::STAR);
      setState(2667);
      lambda_param_no_default();
      setState(2671);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0)) {
        setState(2668);
        lambda_param_maybe_default();
        setState(2673);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2675);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(2674);
        lambda_kwds();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2677);
      match(FandangoParser::STAR);
      setState(2678);
      match(FandangoParser::COMMA);
      setState(2680); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(2679);
        lambda_param_maybe_default();
        setState(2682); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540431955284459520) != 0));
      setState(2685);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::POWER) {
        setState(2684);
        lambda_kwds();
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2687);
      lambda_kwds();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_kwdsContext ------------------------------------------------------------------

FandangoParser::Lambda_kwdsContext::Lambda_kwdsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Lambda_kwdsContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::Lambda_kwdsContext::lambda_param_no_default() {
  return getRuleContext<FandangoParser::Lambda_param_no_defaultContext>(0);
}


size_t FandangoParser::Lambda_kwdsContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_kwds;
}


std::any FandangoParser::Lambda_kwdsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_kwds(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_kwdsContext* FandangoParser::lambda_kwds() {
  Lambda_kwdsContext *_localctx = _tracker.createInstance<Lambda_kwdsContext>(_ctx, getState());
  enterRule(_localctx, 366, FandangoParser::RuleLambda_kwds);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2690);
    match(FandangoParser::POWER);
    setState(2691);
    lambda_param_no_default();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_param_no_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_param_no_defaultContext::Lambda_param_no_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_paramContext* FandangoParser::Lambda_param_no_defaultContext::lambda_param() {
  return getRuleContext<FandangoParser::Lambda_paramContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_param_no_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_param_no_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param_no_default;
}


std::any FandangoParser::Lambda_param_no_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param_no_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_param_no_defaultContext* FandangoParser::lambda_param_no_default() {
  Lambda_param_no_defaultContext *_localctx = _tracker.createInstance<Lambda_param_no_defaultContext>(_ctx, getState());
  enterRule(_localctx, 368, FandangoParser::RuleLambda_param_no_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2693);
    lambda_param();
    setState(2695);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2694);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_param_with_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_param_with_defaultContext::Lambda_param_with_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_paramContext* FandangoParser::Lambda_param_with_defaultContext::lambda_param() {
  return getRuleContext<FandangoParser::Lambda_paramContext>(0);
}

FandangoParser::DefaultContext* FandangoParser::Lambda_param_with_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_param_with_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_param_with_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param_with_default;
}


std::any FandangoParser::Lambda_param_with_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param_with_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_param_with_defaultContext* FandangoParser::lambda_param_with_default() {
  Lambda_param_with_defaultContext *_localctx = _tracker.createInstance<Lambda_param_with_defaultContext>(_ctx, getState());
  enterRule(_localctx, 370, FandangoParser::RuleLambda_param_with_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2697);
    lambda_param();
    setState(2698);
    default_();
    setState(2700);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2699);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_param_maybe_defaultContext ------------------------------------------------------------------

FandangoParser::Lambda_param_maybe_defaultContext::Lambda_param_maybe_defaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Lambda_paramContext* FandangoParser::Lambda_param_maybe_defaultContext::lambda_param() {
  return getRuleContext<FandangoParser::Lambda_paramContext>(0);
}

FandangoParser::DefaultContext* FandangoParser::Lambda_param_maybe_defaultContext::default_() {
  return getRuleContext<FandangoParser::DefaultContext>(0);
}

tree::TerminalNode* FandangoParser::Lambda_param_maybe_defaultContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::Lambda_param_maybe_defaultContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param_maybe_default;
}


std::any FandangoParser::Lambda_param_maybe_defaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param_maybe_default(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_param_maybe_defaultContext* FandangoParser::lambda_param_maybe_default() {
  Lambda_param_maybe_defaultContext *_localctx = _tracker.createInstance<Lambda_param_maybe_defaultContext>(_ctx, getState());
  enterRule(_localctx, 372, FandangoParser::RuleLambda_param_maybe_default);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2702);
    lambda_param();
    setState(2704);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASSIGN) {
      setState(2703);
      default_();
    }
    setState(2707);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2706);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lambda_paramContext ------------------------------------------------------------------

FandangoParser::Lambda_paramContext::Lambda_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Lambda_paramContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}


size_t FandangoParser::Lambda_paramContext::getRuleIndex() const {
  return FandangoParser::RuleLambda_param;
}


std::any FandangoParser::Lambda_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitLambda_param(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Lambda_paramContext* FandangoParser::lambda_param() {
  Lambda_paramContext *_localctx = _tracker.createInstance<Lambda_paramContext>(_ctx, getState());
  enterRule(_localctx, 374, FandangoParser::RuleLambda_param);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2709);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_middle_no_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_middle_no_quoteContext::Fstring_middle_no_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::Fstring_middle_no_quoteContext::fstring_replacement_field() {
  return getRuleContext<FandangoParser::Fstring_replacement_fieldContext>(0);
}

FandangoParser::Fstring_any_no_quoteContext* FandangoParser::Fstring_middle_no_quoteContext::fstring_any_no_quote() {
  return getRuleContext<FandangoParser::Fstring_any_no_quoteContext>(0);
}


size_t FandangoParser::Fstring_middle_no_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_middle_no_quote;
}


std::any FandangoParser::Fstring_middle_no_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_middle_no_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_middle_no_quoteContext* FandangoParser::fstring_middle_no_quote() {
  Fstring_middle_no_quoteContext *_localctx = _tracker.createInstance<Fstring_middle_no_quoteContext>(_ctx, getState());
  enterRule(_localctx, 376, FandangoParser::RuleFstring_middle_no_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2713);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2711);
      fstring_replacement_field();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2712);
      fstring_any_no_quote();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_middle_no_single_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_middle_no_single_quoteContext::Fstring_middle_no_single_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::Fstring_middle_no_single_quoteContext::fstring_replacement_field() {
  return getRuleContext<FandangoParser::Fstring_replacement_fieldContext>(0);
}

FandangoParser::Fstring_any_no_single_quoteContext* FandangoParser::Fstring_middle_no_single_quoteContext::fstring_any_no_single_quote() {
  return getRuleContext<FandangoParser::Fstring_any_no_single_quoteContext>(0);
}


size_t FandangoParser::Fstring_middle_no_single_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_middle_no_single_quote;
}


std::any FandangoParser::Fstring_middle_no_single_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_middle_no_single_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_middle_no_single_quoteContext* FandangoParser::fstring_middle_no_single_quote() {
  Fstring_middle_no_single_quoteContext *_localctx = _tracker.createInstance<Fstring_middle_no_single_quoteContext>(_ctx, getState());
  enterRule(_localctx, 378, FandangoParser::RuleFstring_middle_no_single_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2717);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 332, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2715);
      fstring_replacement_field();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2716);
      fstring_any_no_single_quote();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_middle_breaks_no_triple_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_middle_breaks_no_triple_quoteContext::Fstring_middle_breaks_no_triple_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::Fstring_middle_breaks_no_triple_quoteContext::fstring_replacement_field() {
  return getRuleContext<FandangoParser::Fstring_replacement_fieldContext>(0);
}

FandangoParser::Fstring_any_breaks_no_triple_quoteContext* FandangoParser::Fstring_middle_breaks_no_triple_quoteContext::fstring_any_breaks_no_triple_quote() {
  return getRuleContext<FandangoParser::Fstring_any_breaks_no_triple_quoteContext>(0);
}


size_t FandangoParser::Fstring_middle_breaks_no_triple_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_middle_breaks_no_triple_quote;
}


std::any FandangoParser::Fstring_middle_breaks_no_triple_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_middle_breaks_no_triple_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_middle_breaks_no_triple_quoteContext* FandangoParser::fstring_middle_breaks_no_triple_quote() {
  Fstring_middle_breaks_no_triple_quoteContext *_localctx = _tracker.createInstance<Fstring_middle_breaks_no_triple_quoteContext>(_ctx, getState());
  enterRule(_localctx, 380, FandangoParser::RuleFstring_middle_breaks_no_triple_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2721);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2719);
      fstring_replacement_field();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2720);
      fstring_any_breaks_no_triple_quote();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_middle_breaks_no_triple_single_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext::Fstring_middle_breaks_no_triple_single_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext::fstring_replacement_field() {
  return getRuleContext<FandangoParser::Fstring_replacement_fieldContext>(0);
}

FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext* FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext::fstring_any_breaks_no_triple_single_quote() {
  return getRuleContext<FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext>(0);
}


size_t FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_middle_breaks_no_triple_single_quote;
}


std::any FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_middle_breaks_no_triple_single_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext* FandangoParser::fstring_middle_breaks_no_triple_single_quote() {
  Fstring_middle_breaks_no_triple_single_quoteContext *_localctx = _tracker.createInstance<Fstring_middle_breaks_no_triple_single_quoteContext>(_ctx, getState());
  enterRule(_localctx, 382, FandangoParser::RuleFstring_middle_breaks_no_triple_single_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2725);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2723);
      fstring_replacement_field();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2724);
      fstring_any_breaks_no_triple_single_quote();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_any_no_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_any_no_quoteContext::Fstring_any_no_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_anyContext* FandangoParser::Fstring_any_no_quoteContext::fstring_any() {
  return getRuleContext<FandangoParser::Fstring_anyContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_any_no_quoteContext::FSTRING_END_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_SINGLE_QUOTE, 0);
}

tree::TerminalNode* FandangoParser::Fstring_any_no_quoteContext::FSTRING_END_TRIPLE_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_TRIPLE_SINGLE_QUOTE, 0);
}


size_t FandangoParser::Fstring_any_no_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_any_no_quote;
}


std::any FandangoParser::Fstring_any_no_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_any_no_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_any_no_quoteContext* FandangoParser::fstring_any_no_quote() {
  Fstring_any_no_quoteContext *_localctx = _tracker.createInstance<Fstring_any_no_quoteContext>(_ctx, getState());
  enterRule(_localctx, 384, FandangoParser::RuleFstring_any_no_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2730);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER:
      case FandangoParser::PYTHON_START:
      case FandangoParser::PYTHON_END:
      case FandangoParser::AND:
      case FandangoParser::AS:
      case FandangoParser::ASSERT:
      case FandangoParser::ASYNC:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CASE:
      case FandangoParser::CLASS:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEF:
      case FandangoParser::DEL:
      case FandangoParser::ELIF:
      case FandangoParser::ELSE:
      case FandangoParser::EXCEPT:
      case FandangoParser::FALSE:
      case FandangoParser::FINALLY:
      case FandangoParser::FOR:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IF:
      case FandangoParser::IMPORT:
      case FandangoParser::IN:
      case FandangoParser::IS:
      case FandangoParser::LAMBDA:
      case FandangoParser::MATCH:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::OR:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TRY:
      case FandangoParser::TYPE:
      case FandangoParser::WHILE:
      case FandangoParser::WHERE:
      case FandangoParser::WITH:
      case FandangoParser::YIELD:
      case FandangoParser::FORALL:
      case FandangoParser::EXISTS:
      case FandangoParser::MAXIMIZING:
      case FandangoParser::MINIMIZING:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::GRAMMAR_ASSIGN:
      case FandangoParser::QUESTION:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::DOTDOT:
      case FandangoParser::DOT:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::CLOSE_PAREN:
      case FandangoParser::COMMA:
      case FandangoParser::COLON:
      case FandangoParser::SEMI_COLON:
      case FandangoParser::POWER:
      case FandangoParser::ASSIGN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::CLOSE_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::XOR:
      case FandangoParser::AND_OP:
      case FandangoParser::LEFT_SHIFT:
      case FandangoParser::RIGHT_SHIFT:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::DIV:
      case FandangoParser::MOD:
      case FandangoParser::IDIV:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::CLOSE_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::GREATER_THAN:
      case FandangoParser::EQUALS:
      case FandangoParser::GT_EQ:
      case FandangoParser::LT_EQ:
      case FandangoParser::NOT_EQ_1:
      case FandangoParser::NOT_EQ_2:
      case FandangoParser::AT:
      case FandangoParser::ARROW:
      case FandangoParser::ADD_ASSIGN:
      case FandangoParser::SUB_ASSIGN:
      case FandangoParser::MULT_ASSIGN:
      case FandangoParser::AT_ASSIGN:
      case FandangoParser::DIV_ASSIGN:
      case FandangoParser::MOD_ASSIGN:
      case FandangoParser::AND_ASSIGN:
      case FandangoParser::OR_ASSIGN:
      case FandangoParser::XOR_ASSIGN:
      case FandangoParser::LEFT_SHIFT_ASSIGN:
      case FandangoParser::RIGHT_SHIFT_ASSIGN:
      case FandangoParser::POWER_ASSIGN:
      case FandangoParser::IDIV_ASSIGN:
      case FandangoParser::EXPR_ASSIGN:
      case FandangoParser::EXCL:
      case FandangoParser::SKIP_:
      case FandangoParser::UNKNOWN_CHAR: {
        enterOuterAlt(_localctx, 1);
        setState(2727);
        fstring_any();
        break;
      }

      case FandangoParser::FSTRING_END_SINGLE_QUOTE: {
        enterOuterAlt(_localctx, 2);
        setState(2728);
        match(FandangoParser::FSTRING_END_SINGLE_QUOTE);
        break;
      }

      case FandangoParser::FSTRING_END_TRIPLE_SINGLE_QUOTE: {
        enterOuterAlt(_localctx, 3);
        setState(2729);
        match(FandangoParser::FSTRING_END_TRIPLE_SINGLE_QUOTE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_any_no_single_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_any_no_single_quoteContext::Fstring_any_no_single_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_anyContext* FandangoParser::Fstring_any_no_single_quoteContext::fstring_any() {
  return getRuleContext<FandangoParser::Fstring_anyContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_any_no_single_quoteContext::FSTRING_END_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_QUOTE, 0);
}

tree::TerminalNode* FandangoParser::Fstring_any_no_single_quoteContext::FSTRING_END_TRIPLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_TRIPLE_QUOTE, 0);
}


size_t FandangoParser::Fstring_any_no_single_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_any_no_single_quote;
}


std::any FandangoParser::Fstring_any_no_single_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_any_no_single_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_any_no_single_quoteContext* FandangoParser::fstring_any_no_single_quote() {
  Fstring_any_no_single_quoteContext *_localctx = _tracker.createInstance<Fstring_any_no_single_quoteContext>(_ctx, getState());
  enterRule(_localctx, 386, FandangoParser::RuleFstring_any_no_single_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2735);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER:
      case FandangoParser::PYTHON_START:
      case FandangoParser::PYTHON_END:
      case FandangoParser::AND:
      case FandangoParser::AS:
      case FandangoParser::ASSERT:
      case FandangoParser::ASYNC:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CASE:
      case FandangoParser::CLASS:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEF:
      case FandangoParser::DEL:
      case FandangoParser::ELIF:
      case FandangoParser::ELSE:
      case FandangoParser::EXCEPT:
      case FandangoParser::FALSE:
      case FandangoParser::FINALLY:
      case FandangoParser::FOR:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IF:
      case FandangoParser::IMPORT:
      case FandangoParser::IN:
      case FandangoParser::IS:
      case FandangoParser::LAMBDA:
      case FandangoParser::MATCH:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::OR:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TRY:
      case FandangoParser::TYPE:
      case FandangoParser::WHILE:
      case FandangoParser::WHERE:
      case FandangoParser::WITH:
      case FandangoParser::YIELD:
      case FandangoParser::FORALL:
      case FandangoParser::EXISTS:
      case FandangoParser::MAXIMIZING:
      case FandangoParser::MINIMIZING:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::GRAMMAR_ASSIGN:
      case FandangoParser::QUESTION:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::DOTDOT:
      case FandangoParser::DOT:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::CLOSE_PAREN:
      case FandangoParser::COMMA:
      case FandangoParser::COLON:
      case FandangoParser::SEMI_COLON:
      case FandangoParser::POWER:
      case FandangoParser::ASSIGN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::CLOSE_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::XOR:
      case FandangoParser::AND_OP:
      case FandangoParser::LEFT_SHIFT:
      case FandangoParser::RIGHT_SHIFT:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::DIV:
      case FandangoParser::MOD:
      case FandangoParser::IDIV:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::CLOSE_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::GREATER_THAN:
      case FandangoParser::EQUALS:
      case FandangoParser::GT_EQ:
      case FandangoParser::LT_EQ:
      case FandangoParser::NOT_EQ_1:
      case FandangoParser::NOT_EQ_2:
      case FandangoParser::AT:
      case FandangoParser::ARROW:
      case FandangoParser::ADD_ASSIGN:
      case FandangoParser::SUB_ASSIGN:
      case FandangoParser::MULT_ASSIGN:
      case FandangoParser::AT_ASSIGN:
      case FandangoParser::DIV_ASSIGN:
      case FandangoParser::MOD_ASSIGN:
      case FandangoParser::AND_ASSIGN:
      case FandangoParser::OR_ASSIGN:
      case FandangoParser::XOR_ASSIGN:
      case FandangoParser::LEFT_SHIFT_ASSIGN:
      case FandangoParser::RIGHT_SHIFT_ASSIGN:
      case FandangoParser::POWER_ASSIGN:
      case FandangoParser::IDIV_ASSIGN:
      case FandangoParser::EXPR_ASSIGN:
      case FandangoParser::EXCL:
      case FandangoParser::SKIP_:
      case FandangoParser::UNKNOWN_CHAR: {
        enterOuterAlt(_localctx, 1);
        setState(2732);
        fstring_any();
        break;
      }

      case FandangoParser::FSTRING_END_QUOTE: {
        enterOuterAlt(_localctx, 2);
        setState(2733);
        match(FandangoParser::FSTRING_END_QUOTE);
        break;
      }

      case FandangoParser::FSTRING_END_TRIPLE_QUOTE: {
        enterOuterAlt(_localctx, 3);
        setState(2734);
        match(FandangoParser::FSTRING_END_TRIPLE_QUOTE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_middleContext ------------------------------------------------------------------

FandangoParser::Fstring_middleContext::Fstring_middleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_anyContext* FandangoParser::Fstring_middleContext::fstring_any() {
  return getRuleContext<FandangoParser::Fstring_anyContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_middleContext::FSTRING_END_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_SINGLE_QUOTE, 0);
}

tree::TerminalNode* FandangoParser::Fstring_middleContext::FSTRING_END_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_QUOTE, 0);
}


size_t FandangoParser::Fstring_middleContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_middle;
}


std::any FandangoParser::Fstring_middleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_middle(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_middleContext* FandangoParser::fstring_middle() {
  Fstring_middleContext *_localctx = _tracker.createInstance<Fstring_middleContext>(_ctx, getState());
  enterRule(_localctx, 388, FandangoParser::RuleFstring_middle);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2740);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER:
      case FandangoParser::PYTHON_START:
      case FandangoParser::PYTHON_END:
      case FandangoParser::AND:
      case FandangoParser::AS:
      case FandangoParser::ASSERT:
      case FandangoParser::ASYNC:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CASE:
      case FandangoParser::CLASS:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEF:
      case FandangoParser::DEL:
      case FandangoParser::ELIF:
      case FandangoParser::ELSE:
      case FandangoParser::EXCEPT:
      case FandangoParser::FALSE:
      case FandangoParser::FINALLY:
      case FandangoParser::FOR:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IF:
      case FandangoParser::IMPORT:
      case FandangoParser::IN:
      case FandangoParser::IS:
      case FandangoParser::LAMBDA:
      case FandangoParser::MATCH:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::OR:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TRY:
      case FandangoParser::TYPE:
      case FandangoParser::WHILE:
      case FandangoParser::WHERE:
      case FandangoParser::WITH:
      case FandangoParser::YIELD:
      case FandangoParser::FORALL:
      case FandangoParser::EXISTS:
      case FandangoParser::MAXIMIZING:
      case FandangoParser::MINIMIZING:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::GRAMMAR_ASSIGN:
      case FandangoParser::QUESTION:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::DOTDOT:
      case FandangoParser::DOT:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::CLOSE_PAREN:
      case FandangoParser::COMMA:
      case FandangoParser::COLON:
      case FandangoParser::SEMI_COLON:
      case FandangoParser::POWER:
      case FandangoParser::ASSIGN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::CLOSE_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::XOR:
      case FandangoParser::AND_OP:
      case FandangoParser::LEFT_SHIFT:
      case FandangoParser::RIGHT_SHIFT:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::DIV:
      case FandangoParser::MOD:
      case FandangoParser::IDIV:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::CLOSE_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::GREATER_THAN:
      case FandangoParser::EQUALS:
      case FandangoParser::GT_EQ:
      case FandangoParser::LT_EQ:
      case FandangoParser::NOT_EQ_1:
      case FandangoParser::NOT_EQ_2:
      case FandangoParser::AT:
      case FandangoParser::ARROW:
      case FandangoParser::ADD_ASSIGN:
      case FandangoParser::SUB_ASSIGN:
      case FandangoParser::MULT_ASSIGN:
      case FandangoParser::AT_ASSIGN:
      case FandangoParser::DIV_ASSIGN:
      case FandangoParser::MOD_ASSIGN:
      case FandangoParser::AND_ASSIGN:
      case FandangoParser::OR_ASSIGN:
      case FandangoParser::XOR_ASSIGN:
      case FandangoParser::LEFT_SHIFT_ASSIGN:
      case FandangoParser::RIGHT_SHIFT_ASSIGN:
      case FandangoParser::POWER_ASSIGN:
      case FandangoParser::IDIV_ASSIGN:
      case FandangoParser::EXPR_ASSIGN:
      case FandangoParser::EXCL:
      case FandangoParser::SKIP_:
      case FandangoParser::UNKNOWN_CHAR: {
        enterOuterAlt(_localctx, 1);
        setState(2737);
        fstring_any();
        break;
      }

      case FandangoParser::FSTRING_END_SINGLE_QUOTE: {
        enterOuterAlt(_localctx, 2);
        setState(2738);
        match(FandangoParser::FSTRING_END_SINGLE_QUOTE);
        break;
      }

      case FandangoParser::FSTRING_END_QUOTE: {
        enterOuterAlt(_localctx, 3);
        setState(2739);
        match(FandangoParser::FSTRING_END_QUOTE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_any_breaks_no_triple_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_any_breaks_no_triple_quoteContext::Fstring_any_breaks_no_triple_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_anyContext* FandangoParser::Fstring_any_breaks_no_triple_quoteContext::fstring_any() {
  return getRuleContext<FandangoParser::Fstring_anyContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_any_breaks_no_triple_quoteContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::Fstring_any_breaks_no_triple_quoteContext::FSTRING_END_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_SINGLE_QUOTE, 0);
}


size_t FandangoParser::Fstring_any_breaks_no_triple_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_any_breaks_no_triple_quote;
}


std::any FandangoParser::Fstring_any_breaks_no_triple_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_any_breaks_no_triple_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_any_breaks_no_triple_quoteContext* FandangoParser::fstring_any_breaks_no_triple_quote() {
  Fstring_any_breaks_no_triple_quoteContext *_localctx = _tracker.createInstance<Fstring_any_breaks_no_triple_quoteContext>(_ctx, getState());
  enterRule(_localctx, 390, FandangoParser::RuleFstring_any_breaks_no_triple_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2745);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER:
      case FandangoParser::PYTHON_START:
      case FandangoParser::PYTHON_END:
      case FandangoParser::AND:
      case FandangoParser::AS:
      case FandangoParser::ASSERT:
      case FandangoParser::ASYNC:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CASE:
      case FandangoParser::CLASS:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEF:
      case FandangoParser::DEL:
      case FandangoParser::ELIF:
      case FandangoParser::ELSE:
      case FandangoParser::EXCEPT:
      case FandangoParser::FALSE:
      case FandangoParser::FINALLY:
      case FandangoParser::FOR:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IF:
      case FandangoParser::IMPORT:
      case FandangoParser::IN:
      case FandangoParser::IS:
      case FandangoParser::LAMBDA:
      case FandangoParser::MATCH:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::OR:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TRY:
      case FandangoParser::TYPE:
      case FandangoParser::WHILE:
      case FandangoParser::WHERE:
      case FandangoParser::WITH:
      case FandangoParser::YIELD:
      case FandangoParser::FORALL:
      case FandangoParser::EXISTS:
      case FandangoParser::MAXIMIZING:
      case FandangoParser::MINIMIZING:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::GRAMMAR_ASSIGN:
      case FandangoParser::QUESTION:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::DOTDOT:
      case FandangoParser::DOT:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::CLOSE_PAREN:
      case FandangoParser::COMMA:
      case FandangoParser::COLON:
      case FandangoParser::SEMI_COLON:
      case FandangoParser::POWER:
      case FandangoParser::ASSIGN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::CLOSE_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::XOR:
      case FandangoParser::AND_OP:
      case FandangoParser::LEFT_SHIFT:
      case FandangoParser::RIGHT_SHIFT:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::DIV:
      case FandangoParser::MOD:
      case FandangoParser::IDIV:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::CLOSE_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::GREATER_THAN:
      case FandangoParser::EQUALS:
      case FandangoParser::GT_EQ:
      case FandangoParser::LT_EQ:
      case FandangoParser::NOT_EQ_1:
      case FandangoParser::NOT_EQ_2:
      case FandangoParser::AT:
      case FandangoParser::ARROW:
      case FandangoParser::ADD_ASSIGN:
      case FandangoParser::SUB_ASSIGN:
      case FandangoParser::MULT_ASSIGN:
      case FandangoParser::AT_ASSIGN:
      case FandangoParser::DIV_ASSIGN:
      case FandangoParser::MOD_ASSIGN:
      case FandangoParser::AND_ASSIGN:
      case FandangoParser::OR_ASSIGN:
      case FandangoParser::XOR_ASSIGN:
      case FandangoParser::LEFT_SHIFT_ASSIGN:
      case FandangoParser::RIGHT_SHIFT_ASSIGN:
      case FandangoParser::POWER_ASSIGN:
      case FandangoParser::IDIV_ASSIGN:
      case FandangoParser::EXPR_ASSIGN:
      case FandangoParser::EXCL:
      case FandangoParser::SKIP_:
      case FandangoParser::UNKNOWN_CHAR: {
        enterOuterAlt(_localctx, 1);
        setState(2742);
        fstring_any();
        break;
      }

      case FandangoParser::NEWLINE: {
        enterOuterAlt(_localctx, 2);
        setState(2743);
        match(FandangoParser::NEWLINE);
        break;
      }

      case FandangoParser::FSTRING_END_SINGLE_QUOTE: {
        enterOuterAlt(_localctx, 3);
        setState(2744);
        match(FandangoParser::FSTRING_END_SINGLE_QUOTE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_any_breaks_no_triple_single_quoteContext ------------------------------------------------------------------

FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext::Fstring_any_breaks_no_triple_single_quoteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_anyContext* FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext::fstring_any() {
  return getRuleContext<FandangoParser::Fstring_anyContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}

tree::TerminalNode* FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext::FSTRING_END_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_QUOTE, 0);
}


size_t FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_any_breaks_no_triple_single_quote;
}


std::any FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_any_breaks_no_triple_single_quote(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_any_breaks_no_triple_single_quoteContext* FandangoParser::fstring_any_breaks_no_triple_single_quote() {
  Fstring_any_breaks_no_triple_single_quoteContext *_localctx = _tracker.createInstance<Fstring_any_breaks_no_triple_single_quoteContext>(_ctx, getState());
  enterRule(_localctx, 392, FandangoParser::RuleFstring_any_breaks_no_triple_single_quote);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2750);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::NUMBER:
      case FandangoParser::PYTHON_START:
      case FandangoParser::PYTHON_END:
      case FandangoParser::AND:
      case FandangoParser::AS:
      case FandangoParser::ASSERT:
      case FandangoParser::ASYNC:
      case FandangoParser::AWAIT:
      case FandangoParser::BREAK:
      case FandangoParser::CASE:
      case FandangoParser::CLASS:
      case FandangoParser::CONTINUE:
      case FandangoParser::DEF:
      case FandangoParser::DEL:
      case FandangoParser::ELIF:
      case FandangoParser::ELSE:
      case FandangoParser::EXCEPT:
      case FandangoParser::FALSE:
      case FandangoParser::FINALLY:
      case FandangoParser::FOR:
      case FandangoParser::FROM:
      case FandangoParser::GLOBAL:
      case FandangoParser::IF:
      case FandangoParser::IMPORT:
      case FandangoParser::IN:
      case FandangoParser::IS:
      case FandangoParser::LAMBDA:
      case FandangoParser::MATCH:
      case FandangoParser::NONE:
      case FandangoParser::NONLOCAL:
      case FandangoParser::NOT:
      case FandangoParser::OR:
      case FandangoParser::PASS:
      case FandangoParser::RAISE:
      case FandangoParser::RETURN:
      case FandangoParser::TRUE:
      case FandangoParser::TRY:
      case FandangoParser::TYPE:
      case FandangoParser::WHILE:
      case FandangoParser::WHERE:
      case FandangoParser::WITH:
      case FandangoParser::YIELD:
      case FandangoParser::FORALL:
      case FandangoParser::EXISTS:
      case FandangoParser::MAXIMIZING:
      case FandangoParser::MINIMIZING:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::GRAMMAR_ASSIGN:
      case FandangoParser::QUESTION:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::DOTDOT:
      case FandangoParser::DOT:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::CLOSE_PAREN:
      case FandangoParser::COMMA:
      case FandangoParser::COLON:
      case FandangoParser::SEMI_COLON:
      case FandangoParser::POWER:
      case FandangoParser::ASSIGN:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::CLOSE_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::XOR:
      case FandangoParser::AND_OP:
      case FandangoParser::LEFT_SHIFT:
      case FandangoParser::RIGHT_SHIFT:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::DIV:
      case FandangoParser::MOD:
      case FandangoParser::IDIV:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::CLOSE_BRACE:
      case FandangoParser::LESS_THAN:
      case FandangoParser::GREATER_THAN:
      case FandangoParser::EQUALS:
      case FandangoParser::GT_EQ:
      case FandangoParser::LT_EQ:
      case FandangoParser::NOT_EQ_1:
      case FandangoParser::NOT_EQ_2:
      case FandangoParser::AT:
      case FandangoParser::ARROW:
      case FandangoParser::ADD_ASSIGN:
      case FandangoParser::SUB_ASSIGN:
      case FandangoParser::MULT_ASSIGN:
      case FandangoParser::AT_ASSIGN:
      case FandangoParser::DIV_ASSIGN:
      case FandangoParser::MOD_ASSIGN:
      case FandangoParser::AND_ASSIGN:
      case FandangoParser::OR_ASSIGN:
      case FandangoParser::XOR_ASSIGN:
      case FandangoParser::LEFT_SHIFT_ASSIGN:
      case FandangoParser::RIGHT_SHIFT_ASSIGN:
      case FandangoParser::POWER_ASSIGN:
      case FandangoParser::IDIV_ASSIGN:
      case FandangoParser::EXPR_ASSIGN:
      case FandangoParser::EXCL:
      case FandangoParser::SKIP_:
      case FandangoParser::UNKNOWN_CHAR: {
        enterOuterAlt(_localctx, 1);
        setState(2747);
        fstring_any();
        break;
      }

      case FandangoParser::NEWLINE: {
        enterOuterAlt(_localctx, 2);
        setState(2748);
        match(FandangoParser::NEWLINE);
        break;
      }

      case FandangoParser::FSTRING_END_QUOTE: {
        enterOuterAlt(_localctx, 3);
        setState(2749);
        match(FandangoParser::FSTRING_END_QUOTE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_anyContext ------------------------------------------------------------------

FandangoParser::Fstring_anyContext::Fstring_anyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NUMBER() {
  return getTokens(FandangoParser::NUMBER);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NUMBER(size_t i) {
  return getToken(FandangoParser::NUMBER, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::PYTHON_START() {
  return getTokens(FandangoParser::PYTHON_START);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::PYTHON_START(size_t i) {
  return getToken(FandangoParser::PYTHON_START, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::PYTHON_END() {
  return getTokens(FandangoParser::PYTHON_END);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::PYTHON_END(size_t i) {
  return getToken(FandangoParser::PYTHON_END, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::AND() {
  return getTokens(FandangoParser::AND);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::AND(size_t i) {
  return getToken(FandangoParser::AND, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::AS() {
  return getTokens(FandangoParser::AS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::AS(size_t i) {
  return getToken(FandangoParser::AS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ASSERT() {
  return getTokens(FandangoParser::ASSERT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ASSERT(size_t i) {
  return getToken(FandangoParser::ASSERT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ASYNC() {
  return getTokens(FandangoParser::ASYNC);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ASYNC(size_t i) {
  return getToken(FandangoParser::ASYNC, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::AWAIT() {
  return getTokens(FandangoParser::AWAIT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::AWAIT(size_t i) {
  return getToken(FandangoParser::AWAIT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::BREAK() {
  return getTokens(FandangoParser::BREAK);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::BREAK(size_t i) {
  return getToken(FandangoParser::BREAK, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::CASE() {
  return getTokens(FandangoParser::CASE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::CASE(size_t i) {
  return getToken(FandangoParser::CASE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::CLASS() {
  return getTokens(FandangoParser::CLASS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::CLASS(size_t i) {
  return getToken(FandangoParser::CLASS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::CONTINUE() {
  return getTokens(FandangoParser::CONTINUE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::CONTINUE(size_t i) {
  return getToken(FandangoParser::CONTINUE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::DEF() {
  return getTokens(FandangoParser::DEF);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::DEF(size_t i) {
  return getToken(FandangoParser::DEF, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::DEL() {
  return getTokens(FandangoParser::DEL);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::DEL(size_t i) {
  return getToken(FandangoParser::DEL, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ELIF() {
  return getTokens(FandangoParser::ELIF);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ELIF(size_t i) {
  return getToken(FandangoParser::ELIF, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ELSE() {
  return getTokens(FandangoParser::ELSE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ELSE(size_t i) {
  return getToken(FandangoParser::ELSE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::EXCEPT() {
  return getTokens(FandangoParser::EXCEPT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::EXCEPT(size_t i) {
  return getToken(FandangoParser::EXCEPT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::FALSE() {
  return getTokens(FandangoParser::FALSE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::FALSE(size_t i) {
  return getToken(FandangoParser::FALSE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::FINALLY() {
  return getTokens(FandangoParser::FINALLY);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::FINALLY(size_t i) {
  return getToken(FandangoParser::FINALLY, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::FOR() {
  return getTokens(FandangoParser::FOR);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::FOR(size_t i) {
  return getToken(FandangoParser::FOR, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::FROM() {
  return getTokens(FandangoParser::FROM);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::FROM(size_t i) {
  return getToken(FandangoParser::FROM, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::GLOBAL() {
  return getTokens(FandangoParser::GLOBAL);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::GLOBAL(size_t i) {
  return getToken(FandangoParser::GLOBAL, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::IF() {
  return getTokens(FandangoParser::IF);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::IF(size_t i) {
  return getToken(FandangoParser::IF, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::IMPORT() {
  return getTokens(FandangoParser::IMPORT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::IMPORT(size_t i) {
  return getToken(FandangoParser::IMPORT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::IN() {
  return getTokens(FandangoParser::IN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::IN(size_t i) {
  return getToken(FandangoParser::IN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::IS() {
  return getTokens(FandangoParser::IS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::IS(size_t i) {
  return getToken(FandangoParser::IS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::LAMBDA() {
  return getTokens(FandangoParser::LAMBDA);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::LAMBDA(size_t i) {
  return getToken(FandangoParser::LAMBDA, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::MATCH() {
  return getTokens(FandangoParser::MATCH);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::MATCH(size_t i) {
  return getToken(FandangoParser::MATCH, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NONE() {
  return getTokens(FandangoParser::NONE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NONE(size_t i) {
  return getToken(FandangoParser::NONE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NONLOCAL() {
  return getTokens(FandangoParser::NONLOCAL);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NONLOCAL(size_t i) {
  return getToken(FandangoParser::NONLOCAL, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NOT() {
  return getTokens(FandangoParser::NOT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NOT(size_t i) {
  return getToken(FandangoParser::NOT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::OR() {
  return getTokens(FandangoParser::OR);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::OR(size_t i) {
  return getToken(FandangoParser::OR, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::PASS() {
  return getTokens(FandangoParser::PASS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::PASS(size_t i) {
  return getToken(FandangoParser::PASS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::RAISE() {
  return getTokens(FandangoParser::RAISE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::RAISE(size_t i) {
  return getToken(FandangoParser::RAISE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::RETURN() {
  return getTokens(FandangoParser::RETURN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::RETURN(size_t i) {
  return getToken(FandangoParser::RETURN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::TRUE() {
  return getTokens(FandangoParser::TRUE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::TRUE(size_t i) {
  return getToken(FandangoParser::TRUE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::TRY() {
  return getTokens(FandangoParser::TRY);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::TRY(size_t i) {
  return getToken(FandangoParser::TRY, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::TYPE() {
  return getTokens(FandangoParser::TYPE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::TYPE(size_t i) {
  return getToken(FandangoParser::TYPE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::WHILE() {
  return getTokens(FandangoParser::WHILE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::WHILE(size_t i) {
  return getToken(FandangoParser::WHILE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::WHERE() {
  return getTokens(FandangoParser::WHERE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::WHERE(size_t i) {
  return getToken(FandangoParser::WHERE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::WITH() {
  return getTokens(FandangoParser::WITH);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::WITH(size_t i) {
  return getToken(FandangoParser::WITH, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::YIELD() {
  return getTokens(FandangoParser::YIELD);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::YIELD(size_t i) {
  return getToken(FandangoParser::YIELD, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::FORALL() {
  return getTokens(FandangoParser::FORALL);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::FORALL(size_t i) {
  return getToken(FandangoParser::FORALL, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::EXISTS() {
  return getTokens(FandangoParser::EXISTS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::EXISTS(size_t i) {
  return getToken(FandangoParser::EXISTS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::MAXIMIZING() {
  return getTokens(FandangoParser::MAXIMIZING);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::MAXIMIZING(size_t i) {
  return getToken(FandangoParser::MAXIMIZING, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::MINIMIZING() {
  return getTokens(FandangoParser::MINIMIZING);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::MINIMIZING(size_t i) {
  return getToken(FandangoParser::MINIMIZING, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ANY() {
  return getTokens(FandangoParser::ANY);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ANY(size_t i) {
  return getToken(FandangoParser::ANY, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ALL() {
  return getTokens(FandangoParser::ALL);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ALL(size_t i) {
  return getToken(FandangoParser::ALL, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::LEN() {
  return getTokens(FandangoParser::LEN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::LEN(size_t i) {
  return getToken(FandangoParser::LEN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NAME() {
  return getTokens(FandangoParser::NAME);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NAME(size_t i) {
  return getToken(FandangoParser::NAME, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::GRAMMAR_ASSIGN() {
  return getTokens(FandangoParser::GRAMMAR_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::GRAMMAR_ASSIGN(size_t i) {
  return getToken(FandangoParser::GRAMMAR_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::QUESTION() {
  return getTokens(FandangoParser::QUESTION);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::QUESTION(size_t i) {
  return getToken(FandangoParser::QUESTION, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::DOT() {
  return getTokens(FandangoParser::DOT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::DOT(size_t i) {
  return getToken(FandangoParser::DOT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::DOTDOT() {
  return getTokens(FandangoParser::DOTDOT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::DOTDOT(size_t i) {
  return getToken(FandangoParser::DOTDOT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ELLIPSIS() {
  return getTokens(FandangoParser::ELLIPSIS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ELLIPSIS(size_t i) {
  return getToken(FandangoParser::ELLIPSIS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::STAR() {
  return getTokens(FandangoParser::STAR);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::STAR(size_t i) {
  return getToken(FandangoParser::STAR, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::OPEN_PAREN() {
  return getTokens(FandangoParser::OPEN_PAREN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::OPEN_PAREN(size_t i) {
  return getToken(FandangoParser::OPEN_PAREN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::CLOSE_PAREN() {
  return getTokens(FandangoParser::CLOSE_PAREN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::CLOSE_PAREN(size_t i) {
  return getToken(FandangoParser::CLOSE_PAREN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::COLON() {
  return getTokens(FandangoParser::COLON);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::COLON(size_t i) {
  return getToken(FandangoParser::COLON, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::SEMI_COLON() {
  return getTokens(FandangoParser::SEMI_COLON);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::SEMI_COLON(size_t i) {
  return getToken(FandangoParser::SEMI_COLON, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::POWER() {
  return getTokens(FandangoParser::POWER);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::POWER(size_t i) {
  return getToken(FandangoParser::POWER, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ASSIGN() {
  return getTokens(FandangoParser::ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ASSIGN(size_t i) {
  return getToken(FandangoParser::ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::OPEN_BRACK() {
  return getTokens(FandangoParser::OPEN_BRACK);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::OPEN_BRACK(size_t i) {
  return getToken(FandangoParser::OPEN_BRACK, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::CLOSE_BRACK() {
  return getTokens(FandangoParser::CLOSE_BRACK);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::CLOSE_BRACK(size_t i) {
  return getToken(FandangoParser::CLOSE_BRACK, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::OR_OP() {
  return getTokens(FandangoParser::OR_OP);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::OR_OP(size_t i) {
  return getToken(FandangoParser::OR_OP, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::XOR() {
  return getTokens(FandangoParser::XOR);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::XOR(size_t i) {
  return getToken(FandangoParser::XOR, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::AND_OP() {
  return getTokens(FandangoParser::AND_OP);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::AND_OP(size_t i) {
  return getToken(FandangoParser::AND_OP, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::LEFT_SHIFT() {
  return getTokens(FandangoParser::LEFT_SHIFT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::LEFT_SHIFT(size_t i) {
  return getToken(FandangoParser::LEFT_SHIFT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::RIGHT_SHIFT() {
  return getTokens(FandangoParser::RIGHT_SHIFT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::RIGHT_SHIFT(size_t i) {
  return getToken(FandangoParser::RIGHT_SHIFT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ADD() {
  return getTokens(FandangoParser::ADD);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ADD(size_t i) {
  return getToken(FandangoParser::ADD, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::MINUS() {
  return getTokens(FandangoParser::MINUS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::MINUS(size_t i) {
  return getToken(FandangoParser::MINUS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::DIV() {
  return getTokens(FandangoParser::DIV);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::DIV(size_t i) {
  return getToken(FandangoParser::DIV, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::MOD() {
  return getTokens(FandangoParser::MOD);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::MOD(size_t i) {
  return getToken(FandangoParser::MOD, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::IDIV() {
  return getTokens(FandangoParser::IDIV);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::IDIV(size_t i) {
  return getToken(FandangoParser::IDIV, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NOT_OP() {
  return getTokens(FandangoParser::NOT_OP);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NOT_OP(size_t i) {
  return getToken(FandangoParser::NOT_OP, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::OPEN_BRACE() {
  return getTokens(FandangoParser::OPEN_BRACE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::OPEN_BRACE(size_t i) {
  return getToken(FandangoParser::OPEN_BRACE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::CLOSE_BRACE() {
  return getTokens(FandangoParser::CLOSE_BRACE);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::CLOSE_BRACE(size_t i) {
  return getToken(FandangoParser::CLOSE_BRACE, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::LESS_THAN() {
  return getTokens(FandangoParser::LESS_THAN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::LESS_THAN(size_t i) {
  return getToken(FandangoParser::LESS_THAN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::GREATER_THAN() {
  return getTokens(FandangoParser::GREATER_THAN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::GREATER_THAN(size_t i) {
  return getToken(FandangoParser::GREATER_THAN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::EQUALS() {
  return getTokens(FandangoParser::EQUALS);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::EQUALS(size_t i) {
  return getToken(FandangoParser::EQUALS, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::GT_EQ() {
  return getTokens(FandangoParser::GT_EQ);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::GT_EQ(size_t i) {
  return getToken(FandangoParser::GT_EQ, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::LT_EQ() {
  return getTokens(FandangoParser::LT_EQ);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::LT_EQ(size_t i) {
  return getToken(FandangoParser::LT_EQ, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NOT_EQ_1() {
  return getTokens(FandangoParser::NOT_EQ_1);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NOT_EQ_1(size_t i) {
  return getToken(FandangoParser::NOT_EQ_1, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::NOT_EQ_2() {
  return getTokens(FandangoParser::NOT_EQ_2);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::NOT_EQ_2(size_t i) {
  return getToken(FandangoParser::NOT_EQ_2, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::AT() {
  return getTokens(FandangoParser::AT);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::AT(size_t i) {
  return getToken(FandangoParser::AT, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ARROW() {
  return getTokens(FandangoParser::ARROW);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ARROW(size_t i) {
  return getToken(FandangoParser::ARROW, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::ADD_ASSIGN() {
  return getTokens(FandangoParser::ADD_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::ADD_ASSIGN(size_t i) {
  return getToken(FandangoParser::ADD_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::SUB_ASSIGN() {
  return getTokens(FandangoParser::SUB_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::SUB_ASSIGN(size_t i) {
  return getToken(FandangoParser::SUB_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::MULT_ASSIGN() {
  return getTokens(FandangoParser::MULT_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::MULT_ASSIGN(size_t i) {
  return getToken(FandangoParser::MULT_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::AT_ASSIGN() {
  return getTokens(FandangoParser::AT_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::AT_ASSIGN(size_t i) {
  return getToken(FandangoParser::AT_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::DIV_ASSIGN() {
  return getTokens(FandangoParser::DIV_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::DIV_ASSIGN(size_t i) {
  return getToken(FandangoParser::DIV_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::MOD_ASSIGN() {
  return getTokens(FandangoParser::MOD_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::MOD_ASSIGN(size_t i) {
  return getToken(FandangoParser::MOD_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::AND_ASSIGN() {
  return getTokens(FandangoParser::AND_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::AND_ASSIGN(size_t i) {
  return getToken(FandangoParser::AND_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::OR_ASSIGN() {
  return getTokens(FandangoParser::OR_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::OR_ASSIGN(size_t i) {
  return getToken(FandangoParser::OR_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::XOR_ASSIGN() {
  return getTokens(FandangoParser::XOR_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::XOR_ASSIGN(size_t i) {
  return getToken(FandangoParser::XOR_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::LEFT_SHIFT_ASSIGN() {
  return getTokens(FandangoParser::LEFT_SHIFT_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::LEFT_SHIFT_ASSIGN(size_t i) {
  return getToken(FandangoParser::LEFT_SHIFT_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::RIGHT_SHIFT_ASSIGN() {
  return getTokens(FandangoParser::RIGHT_SHIFT_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::RIGHT_SHIFT_ASSIGN(size_t i) {
  return getToken(FandangoParser::RIGHT_SHIFT_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::POWER_ASSIGN() {
  return getTokens(FandangoParser::POWER_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::POWER_ASSIGN(size_t i) {
  return getToken(FandangoParser::POWER_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::IDIV_ASSIGN() {
  return getTokens(FandangoParser::IDIV_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::IDIV_ASSIGN(size_t i) {
  return getToken(FandangoParser::IDIV_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::EXPR_ASSIGN() {
  return getTokens(FandangoParser::EXPR_ASSIGN);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::EXPR_ASSIGN(size_t i) {
  return getToken(FandangoParser::EXPR_ASSIGN, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::EXCL() {
  return getTokens(FandangoParser::EXCL);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::EXCL(size_t i) {
  return getToken(FandangoParser::EXCL, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::SKIP_() {
  return getTokens(FandangoParser::SKIP_);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::SKIP_(size_t i) {
  return getToken(FandangoParser::SKIP_, i);
}

std::vector<tree::TerminalNode *> FandangoParser::Fstring_anyContext::UNKNOWN_CHAR() {
  return getTokens(FandangoParser::UNKNOWN_CHAR);
}

tree::TerminalNode* FandangoParser::Fstring_anyContext::UNKNOWN_CHAR(size_t i) {
  return getToken(FandangoParser::UNKNOWN_CHAR, i);
}


size_t FandangoParser::Fstring_anyContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_any;
}


std::any FandangoParser::Fstring_anyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_any(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_anyContext* FandangoParser::fstring_any() {
  Fstring_anyContext *_localctx = _tracker.createInstance<Fstring_anyContext>(_ctx, getState());
  enterRule(_localctx, 394, FandangoParser::RuleFstring_any);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2858); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2858);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case FandangoParser::NUMBER: {
                  setState(2752);
                  match(FandangoParser::NUMBER);
                  break;
                }

                case FandangoParser::PYTHON_START: {
                  setState(2753);
                  match(FandangoParser::PYTHON_START);
                  break;
                }

                case FandangoParser::PYTHON_END: {
                  setState(2754);
                  match(FandangoParser::PYTHON_END);
                  break;
                }

                case FandangoParser::AND: {
                  setState(2755);
                  match(FandangoParser::AND);
                  break;
                }

                case FandangoParser::AS: {
                  setState(2756);
                  match(FandangoParser::AS);
                  break;
                }

                case FandangoParser::ASSERT: {
                  setState(2757);
                  match(FandangoParser::ASSERT);
                  break;
                }

                case FandangoParser::ASYNC: {
                  setState(2758);
                  match(FandangoParser::ASYNC);
                  break;
                }

                case FandangoParser::AWAIT: {
                  setState(2759);
                  match(FandangoParser::AWAIT);
                  break;
                }

                case FandangoParser::BREAK: {
                  setState(2760);
                  match(FandangoParser::BREAK);
                  break;
                }

                case FandangoParser::CASE: {
                  setState(2761);
                  match(FandangoParser::CASE);
                  break;
                }

                case FandangoParser::CLASS: {
                  setState(2762);
                  match(FandangoParser::CLASS);
                  break;
                }

                case FandangoParser::CONTINUE: {
                  setState(2763);
                  match(FandangoParser::CONTINUE);
                  break;
                }

                case FandangoParser::DEF: {
                  setState(2764);
                  match(FandangoParser::DEF);
                  break;
                }

                case FandangoParser::DEL: {
                  setState(2765);
                  match(FandangoParser::DEL);
                  break;
                }

                case FandangoParser::ELIF: {
                  setState(2766);
                  match(FandangoParser::ELIF);
                  break;
                }

                case FandangoParser::ELSE: {
                  setState(2767);
                  match(FandangoParser::ELSE);
                  break;
                }

                case FandangoParser::EXCEPT: {
                  setState(2768);
                  match(FandangoParser::EXCEPT);
                  break;
                }

                case FandangoParser::FALSE: {
                  setState(2769);
                  match(FandangoParser::FALSE);
                  break;
                }

                case FandangoParser::FINALLY: {
                  setState(2770);
                  match(FandangoParser::FINALLY);
                  break;
                }

                case FandangoParser::FOR: {
                  setState(2771);
                  match(FandangoParser::FOR);
                  break;
                }

                case FandangoParser::FROM: {
                  setState(2772);
                  match(FandangoParser::FROM);
                  break;
                }

                case FandangoParser::GLOBAL: {
                  setState(2773);
                  match(FandangoParser::GLOBAL);
                  break;
                }

                case FandangoParser::IF: {
                  setState(2774);
                  match(FandangoParser::IF);
                  break;
                }

                case FandangoParser::IMPORT: {
                  setState(2775);
                  match(FandangoParser::IMPORT);
                  break;
                }

                case FandangoParser::IN: {
                  setState(2776);
                  match(FandangoParser::IN);
                  break;
                }

                case FandangoParser::IS: {
                  setState(2777);
                  match(FandangoParser::IS);
                  break;
                }

                case FandangoParser::LAMBDA: {
                  setState(2778);
                  match(FandangoParser::LAMBDA);
                  break;
                }

                case FandangoParser::MATCH: {
                  setState(2779);
                  match(FandangoParser::MATCH);
                  break;
                }

                case FandangoParser::NONE: {
                  setState(2780);
                  match(FandangoParser::NONE);
                  break;
                }

                case FandangoParser::NONLOCAL: {
                  setState(2781);
                  match(FandangoParser::NONLOCAL);
                  break;
                }

                case FandangoParser::NOT: {
                  setState(2782);
                  match(FandangoParser::NOT);
                  break;
                }

                case FandangoParser::OR: {
                  setState(2783);
                  match(FandangoParser::OR);
                  break;
                }

                case FandangoParser::PASS: {
                  setState(2784);
                  match(FandangoParser::PASS);
                  break;
                }

                case FandangoParser::RAISE: {
                  setState(2785);
                  match(FandangoParser::RAISE);
                  break;
                }

                case FandangoParser::RETURN: {
                  setState(2786);
                  match(FandangoParser::RETURN);
                  break;
                }

                case FandangoParser::TRUE: {
                  setState(2787);
                  match(FandangoParser::TRUE);
                  break;
                }

                case FandangoParser::TRY: {
                  setState(2788);
                  match(FandangoParser::TRY);
                  break;
                }

                case FandangoParser::TYPE: {
                  setState(2789);
                  match(FandangoParser::TYPE);
                  break;
                }

                case FandangoParser::WHILE: {
                  setState(2790);
                  match(FandangoParser::WHILE);
                  break;
                }

                case FandangoParser::WHERE: {
                  setState(2791);
                  match(FandangoParser::WHERE);
                  break;
                }

                case FandangoParser::WITH: {
                  setState(2792);
                  match(FandangoParser::WITH);
                  break;
                }

                case FandangoParser::YIELD: {
                  setState(2793);
                  match(FandangoParser::YIELD);
                  break;
                }

                case FandangoParser::FORALL: {
                  setState(2794);
                  match(FandangoParser::FORALL);
                  break;
                }

                case FandangoParser::EXISTS: {
                  setState(2795);
                  match(FandangoParser::EXISTS);
                  break;
                }

                case FandangoParser::MAXIMIZING: {
                  setState(2796);
                  match(FandangoParser::MAXIMIZING);
                  break;
                }

                case FandangoParser::MINIMIZING: {
                  setState(2797);
                  match(FandangoParser::MINIMIZING);
                  break;
                }

                case FandangoParser::ANY: {
                  setState(2798);
                  match(FandangoParser::ANY);
                  break;
                }

                case FandangoParser::ALL: {
                  setState(2799);
                  match(FandangoParser::ALL);
                  break;
                }

                case FandangoParser::LEN: {
                  setState(2800);
                  match(FandangoParser::LEN);
                  break;
                }

                case FandangoParser::NAME: {
                  setState(2801);
                  match(FandangoParser::NAME);
                  break;
                }

                case FandangoParser::GRAMMAR_ASSIGN: {
                  setState(2802);
                  match(FandangoParser::GRAMMAR_ASSIGN);
                  break;
                }

                case FandangoParser::QUESTION: {
                  setState(2803);
                  match(FandangoParser::QUESTION);
                  break;
                }

                case FandangoParser::DOT: {
                  setState(2804);
                  match(FandangoParser::DOT);
                  break;
                }

                case FandangoParser::DOTDOT: {
                  setState(2805);
                  match(FandangoParser::DOTDOT);
                  break;
                }

                case FandangoParser::ELLIPSIS: {
                  setState(2806);
                  match(FandangoParser::ELLIPSIS);
                  break;
                }

                case FandangoParser::STAR: {
                  setState(2807);
                  match(FandangoParser::STAR);
                  break;
                }

                case FandangoParser::OPEN_PAREN: {
                  setState(2808);
                  match(FandangoParser::OPEN_PAREN);
                  break;
                }

                case FandangoParser::CLOSE_PAREN: {
                  setState(2809);
                  match(FandangoParser::CLOSE_PAREN);
                  break;
                }

                case FandangoParser::COMMA: {
                  setState(2810);
                  match(FandangoParser::COMMA);
                  break;
                }

                case FandangoParser::COLON: {
                  setState(2811);
                  match(FandangoParser::COLON);
                  break;
                }

                case FandangoParser::SEMI_COLON: {
                  setState(2812);
                  match(FandangoParser::SEMI_COLON);
                  break;
                }

                case FandangoParser::POWER: {
                  setState(2813);
                  match(FandangoParser::POWER);
                  break;
                }

                case FandangoParser::ASSIGN: {
                  setState(2814);
                  match(FandangoParser::ASSIGN);
                  break;
                }

                case FandangoParser::OPEN_BRACK: {
                  setState(2815);
                  match(FandangoParser::OPEN_BRACK);
                  break;
                }

                case FandangoParser::CLOSE_BRACK: {
                  setState(2816);
                  match(FandangoParser::CLOSE_BRACK);
                  break;
                }

                case FandangoParser::OR_OP: {
                  setState(2817);
                  match(FandangoParser::OR_OP);
                  break;
                }

                case FandangoParser::XOR: {
                  setState(2818);
                  match(FandangoParser::XOR);
                  break;
                }

                case FandangoParser::AND_OP: {
                  setState(2819);
                  match(FandangoParser::AND_OP);
                  break;
                }

                case FandangoParser::LEFT_SHIFT: {
                  setState(2820);
                  match(FandangoParser::LEFT_SHIFT);
                  break;
                }

                case FandangoParser::RIGHT_SHIFT: {
                  setState(2821);
                  match(FandangoParser::RIGHT_SHIFT);
                  break;
                }

                case FandangoParser::ADD: {
                  setState(2822);
                  match(FandangoParser::ADD);
                  break;
                }

                case FandangoParser::MINUS: {
                  setState(2823);
                  match(FandangoParser::MINUS);
                  break;
                }

                case FandangoParser::DIV: {
                  setState(2824);
                  match(FandangoParser::DIV);
                  break;
                }

                case FandangoParser::MOD: {
                  setState(2825);
                  match(FandangoParser::MOD);
                  break;
                }

                case FandangoParser::IDIV: {
                  setState(2826);
                  match(FandangoParser::IDIV);
                  break;
                }

                case FandangoParser::NOT_OP: {
                  setState(2827);
                  match(FandangoParser::NOT_OP);
                  break;
                }

                case FandangoParser::OPEN_BRACE: {
                  setState(2828);
                  match(FandangoParser::OPEN_BRACE);
                  setState(2829);
                  match(FandangoParser::OPEN_BRACE);
                  break;
                }

                case FandangoParser::CLOSE_BRACE: {
                  setState(2830);
                  match(FandangoParser::CLOSE_BRACE);
                  setState(2831);
                  match(FandangoParser::CLOSE_BRACE);
                  break;
                }

                case FandangoParser::LESS_THAN: {
                  setState(2832);
                  match(FandangoParser::LESS_THAN);
                  break;
                }

                case FandangoParser::GREATER_THAN: {
                  setState(2833);
                  match(FandangoParser::GREATER_THAN);
                  break;
                }

                case FandangoParser::EQUALS: {
                  setState(2834);
                  match(FandangoParser::EQUALS);
                  break;
                }

                case FandangoParser::GT_EQ: {
                  setState(2835);
                  match(FandangoParser::GT_EQ);
                  break;
                }

                case FandangoParser::LT_EQ: {
                  setState(2836);
                  match(FandangoParser::LT_EQ);
                  break;
                }

                case FandangoParser::NOT_EQ_1: {
                  setState(2837);
                  match(FandangoParser::NOT_EQ_1);
                  break;
                }

                case FandangoParser::NOT_EQ_2: {
                  setState(2838);
                  match(FandangoParser::NOT_EQ_2);
                  break;
                }

                case FandangoParser::AT: {
                  setState(2839);
                  match(FandangoParser::AT);
                  break;
                }

                case FandangoParser::ARROW: {
                  setState(2840);
                  match(FandangoParser::ARROW);
                  break;
                }

                case FandangoParser::ADD_ASSIGN: {
                  setState(2841);
                  match(FandangoParser::ADD_ASSIGN);
                  break;
                }

                case FandangoParser::SUB_ASSIGN: {
                  setState(2842);
                  match(FandangoParser::SUB_ASSIGN);
                  break;
                }

                case FandangoParser::MULT_ASSIGN: {
                  setState(2843);
                  match(FandangoParser::MULT_ASSIGN);
                  break;
                }

                case FandangoParser::AT_ASSIGN: {
                  setState(2844);
                  match(FandangoParser::AT_ASSIGN);
                  break;
                }

                case FandangoParser::DIV_ASSIGN: {
                  setState(2845);
                  match(FandangoParser::DIV_ASSIGN);
                  break;
                }

                case FandangoParser::MOD_ASSIGN: {
                  setState(2846);
                  match(FandangoParser::MOD_ASSIGN);
                  break;
                }

                case FandangoParser::AND_ASSIGN: {
                  setState(2847);
                  match(FandangoParser::AND_ASSIGN);
                  break;
                }

                case FandangoParser::OR_ASSIGN: {
                  setState(2848);
                  match(FandangoParser::OR_ASSIGN);
                  break;
                }

                case FandangoParser::XOR_ASSIGN: {
                  setState(2849);
                  match(FandangoParser::XOR_ASSIGN);
                  break;
                }

                case FandangoParser::LEFT_SHIFT_ASSIGN: {
                  setState(2850);
                  match(FandangoParser::LEFT_SHIFT_ASSIGN);
                  break;
                }

                case FandangoParser::RIGHT_SHIFT_ASSIGN: {
                  setState(2851);
                  match(FandangoParser::RIGHT_SHIFT_ASSIGN);
                  break;
                }

                case FandangoParser::POWER_ASSIGN: {
                  setState(2852);
                  match(FandangoParser::POWER_ASSIGN);
                  break;
                }

                case FandangoParser::IDIV_ASSIGN: {
                  setState(2853);
                  match(FandangoParser::IDIV_ASSIGN);
                  break;
                }

                case FandangoParser::EXPR_ASSIGN: {
                  setState(2854);
                  match(FandangoParser::EXPR_ASSIGN);
                  break;
                }

                case FandangoParser::EXCL: {
                  setState(2855);
                  match(FandangoParser::EXCL);
                  break;
                }

                case FandangoParser::SKIP_: {
                  setState(2856);
                  match(FandangoParser::SKIP_);
                  break;
                }

                case FandangoParser::UNKNOWN_CHAR: {
                  setState(2857);
                  match(FandangoParser::UNKNOWN_CHAR);
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2860); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_replacement_fieldContext ------------------------------------------------------------------

FandangoParser::Fstring_replacement_fieldContext::Fstring_replacement_fieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Fstring_replacement_fieldContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::Fstring_replacement_fieldContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

FandangoParser::Yield_exprContext* FandangoParser::Fstring_replacement_fieldContext::yield_expr() {
  return getRuleContext<FandangoParser::Yield_exprContext>(0);
}

FandangoParser::Star_expressionsContext* FandangoParser::Fstring_replacement_fieldContext::star_expressions() {
  return getRuleContext<FandangoParser::Star_expressionsContext>(0);
}

tree::TerminalNode* FandangoParser::Fstring_replacement_fieldContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::Fstring_conversionContext* FandangoParser::Fstring_replacement_fieldContext::fstring_conversion() {
  return getRuleContext<FandangoParser::Fstring_conversionContext>(0);
}

FandangoParser::Fstring_full_format_specContext* FandangoParser::Fstring_replacement_fieldContext::fstring_full_format_spec() {
  return getRuleContext<FandangoParser::Fstring_full_format_specContext>(0);
}


size_t FandangoParser::Fstring_replacement_fieldContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_replacement_field;
}


std::any FandangoParser::Fstring_replacement_fieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_replacement_field(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::fstring_replacement_field() {
  Fstring_replacement_fieldContext *_localctx = _tracker.createInstance<Fstring_replacement_fieldContext>(_ctx, getState());
  enterRule(_localctx, 396, FandangoParser::RuleFstring_replacement_field);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2862);
    match(FandangoParser::OPEN_BRACE);
    setState(2865);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::YIELD: {
        setState(2863);
        yield_expr();
        break;
      }

      case FandangoParser::FSTRING_START_QUOTE:
      case FandangoParser::FSTRING_START_SINGLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE:
      case FandangoParser::STRING:
      case FandangoParser::NUMBER:
      case FandangoParser::AWAIT:
      case FandangoParser::FALSE:
      case FandangoParser::LAMBDA:
      case FandangoParser::NONE:
      case FandangoParser::NOT:
      case FandangoParser::TRUE:
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME:
      case FandangoParser::ELLIPSIS:
      case FandangoParser::STAR:
      case FandangoParser::OPEN_PAREN:
      case FandangoParser::POWER:
      case FandangoParser::OPEN_BRACK:
      case FandangoParser::OR_OP:
      case FandangoParser::ADD:
      case FandangoParser::MINUS:
      case FandangoParser::NOT_OP:
      case FandangoParser::OPEN_BRACE:
      case FandangoParser::LESS_THAN: {
        setState(2864);
        star_expressions();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2868);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASSIGN) {
      setState(2867);
      match(FandangoParser::ASSIGN);
    }
    setState(2871);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::EXCL) {
      setState(2870);
      fstring_conversion();
    }
    setState(2874);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COLON) {
      setState(2873);
      fstring_full_format_spec();
    }
    setState(2876);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_conversionContext ------------------------------------------------------------------

FandangoParser::Fstring_conversionContext::Fstring_conversionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Fstring_conversionContext::EXCL() {
  return getToken(FandangoParser::EXCL, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Fstring_conversionContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}


size_t FandangoParser::Fstring_conversionContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_conversion;
}


std::any FandangoParser::Fstring_conversionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_conversion(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_conversionContext* FandangoParser::fstring_conversion() {
  Fstring_conversionContext *_localctx = _tracker.createInstance<Fstring_conversionContext>(_ctx, getState());
  enterRule(_localctx, 398, FandangoParser::RuleFstring_conversion);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2878);
    match(FandangoParser::EXCL);
    setState(2879);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_full_format_specContext ------------------------------------------------------------------

FandangoParser::Fstring_full_format_specContext::Fstring_full_format_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Fstring_full_format_specContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}

std::vector<FandangoParser::Fstring_format_specContext *> FandangoParser::Fstring_full_format_specContext::fstring_format_spec() {
  return getRuleContexts<FandangoParser::Fstring_format_specContext>();
}

FandangoParser::Fstring_format_specContext* FandangoParser::Fstring_full_format_specContext::fstring_format_spec(size_t i) {
  return getRuleContext<FandangoParser::Fstring_format_specContext>(i);
}


size_t FandangoParser::Fstring_full_format_specContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_full_format_spec;
}


std::any FandangoParser::Fstring_full_format_specContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_full_format_spec(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_full_format_specContext* FandangoParser::fstring_full_format_spec() {
  Fstring_full_format_specContext *_localctx = _tracker.createInstance<Fstring_full_format_specContext>(_ctx, getState());
  enterRule(_localctx, 400, FandangoParser::RuleFstring_full_format_spec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2881);
    match(FandangoParser::COLON);
    setState(2885);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2882);
        fstring_format_spec(); 
      }
      setState(2887);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fstring_format_specContext ------------------------------------------------------------------

FandangoParser::Fstring_format_specContext::Fstring_format_specContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Fstring_replacement_fieldContext* FandangoParser::Fstring_format_specContext::fstring_replacement_field() {
  return getRuleContext<FandangoParser::Fstring_replacement_fieldContext>(0);
}

FandangoParser::Fstring_middleContext* FandangoParser::Fstring_format_specContext::fstring_middle() {
  return getRuleContext<FandangoParser::Fstring_middleContext>(0);
}


size_t FandangoParser::Fstring_format_specContext::getRuleIndex() const {
  return FandangoParser::RuleFstring_format_spec;
}


std::any FandangoParser::Fstring_format_specContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring_format_spec(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Fstring_format_specContext* FandangoParser::fstring_format_spec() {
  Fstring_format_specContext *_localctx = _tracker.createInstance<Fstring_format_specContext>(_ctx, getState());
  enterRule(_localctx, 402, FandangoParser::RuleFstring_format_spec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2890);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 347, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2888);
      fstring_replacement_field();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2889);
      fstring_middle();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FstringContext ------------------------------------------------------------------

FandangoParser::FstringContext::FstringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_START_QUOTE() {
  return getToken(FandangoParser::FSTRING_START_QUOTE, 0);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_END_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_QUOTE, 0);
}

std::vector<FandangoParser::Fstring_middle_no_quoteContext *> FandangoParser::FstringContext::fstring_middle_no_quote() {
  return getRuleContexts<FandangoParser::Fstring_middle_no_quoteContext>();
}

FandangoParser::Fstring_middle_no_quoteContext* FandangoParser::FstringContext::fstring_middle_no_quote(size_t i) {
  return getRuleContext<FandangoParser::Fstring_middle_no_quoteContext>(i);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_START_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_START_SINGLE_QUOTE, 0);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_END_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_SINGLE_QUOTE, 0);
}

std::vector<FandangoParser::Fstring_middle_no_single_quoteContext *> FandangoParser::FstringContext::fstring_middle_no_single_quote() {
  return getRuleContexts<FandangoParser::Fstring_middle_no_single_quoteContext>();
}

FandangoParser::Fstring_middle_no_single_quoteContext* FandangoParser::FstringContext::fstring_middle_no_single_quote(size_t i) {
  return getRuleContext<FandangoParser::Fstring_middle_no_single_quoteContext>(i);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_START_TRIPLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_START_TRIPLE_QUOTE, 0);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_END_TRIPLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_TRIPLE_QUOTE, 0);
}

std::vector<FandangoParser::Fstring_middle_breaks_no_triple_quoteContext *> FandangoParser::FstringContext::fstring_middle_breaks_no_triple_quote() {
  return getRuleContexts<FandangoParser::Fstring_middle_breaks_no_triple_quoteContext>();
}

FandangoParser::Fstring_middle_breaks_no_triple_quoteContext* FandangoParser::FstringContext::fstring_middle_breaks_no_triple_quote(size_t i) {
  return getRuleContext<FandangoParser::Fstring_middle_breaks_no_triple_quoteContext>(i);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_START_TRIPLE_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE, 0);
}

tree::TerminalNode* FandangoParser::FstringContext::FSTRING_END_TRIPLE_SINGLE_QUOTE() {
  return getToken(FandangoParser::FSTRING_END_TRIPLE_SINGLE_QUOTE, 0);
}

std::vector<FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext *> FandangoParser::FstringContext::fstring_middle_breaks_no_triple_single_quote() {
  return getRuleContexts<FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext>();
}

FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext* FandangoParser::FstringContext::fstring_middle_breaks_no_triple_single_quote(size_t i) {
  return getRuleContext<FandangoParser::Fstring_middle_breaks_no_triple_single_quoteContext>(i);
}


size_t FandangoParser::FstringContext::getRuleIndex() const {
  return FandangoParser::RuleFstring;
}


std::any FandangoParser::FstringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFstring(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::FstringContext* FandangoParser::fstring() {
  FstringContext *_localctx = _tracker.createInstance<FstringContext>(_ctx, getState());
  enterRule(_localctx, 404, FandangoParser::RuleFstring);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2924);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::FSTRING_START_QUOTE: {
        enterOuterAlt(_localctx, 1);
        setState(2892);
        match(FandangoParser::FSTRING_START_QUOTE);
        setState(2896);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -6341068275337659136) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 71)) & 63050394783186939) != 0)) {
          setState(2893);
          fstring_middle_no_quote();
          setState(2898);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2899);
        match(FandangoParser::FSTRING_END_QUOTE);
        break;
      }

      case FandangoParser::FSTRING_START_SINGLE_QUOTE: {
        enterOuterAlt(_localctx, 2);
        setState(2900);
        match(FandangoParser::FSTRING_START_SINGLE_QUOTE);
        setState(2904);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 6341068275337657600) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 71)) & 63050394783186939) != 0)) {
          setState(2901);
          fstring_middle_no_single_quote();
          setState(2906);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2907);
        match(FandangoParser::FSTRING_END_SINGLE_QUOTE);
        break;
      }

      case FandangoParser::FSTRING_START_TRIPLE_QUOTE: {
        enterOuterAlt(_localctx, 3);
        setState(2908);
        match(FandangoParser::FSTRING_START_TRIPLE_QUOTE);
        setState(2912);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -8646911284551353088) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 71)) & 72057594037927931) != 0)) {
          setState(2909);
          fstring_middle_breaks_no_triple_quote();
          setState(2914);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2915);
        match(FandangoParser::FSTRING_END_TRIPLE_QUOTE);
        break;
      }

      case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE: {
        enterOuterAlt(_localctx, 4);
        setState(2916);
        match(FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE);
        setState(2920);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 5188146770730810624) != 0) || ((((_la - 71) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 71)) & 72057594037927931) != 0)) {
          setState(2917);
          fstring_middle_breaks_no_triple_single_quote();
          setState(2922);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2923);
        match(FandangoParser::FSTRING_END_TRIPLE_SINGLE_QUOTE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

FandangoParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::StringContext::STRING() {
  return getToken(FandangoParser::STRING, 0);
}


size_t FandangoParser::StringContext::getRuleIndex() const {
  return FandangoParser::RuleString;
}


std::any FandangoParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StringContext* FandangoParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 406, FandangoParser::RuleString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2926);
    match(FandangoParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringsContext ------------------------------------------------------------------

FandangoParser::StringsContext::StringsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::FstringContext *> FandangoParser::StringsContext::fstring() {
  return getRuleContexts<FandangoParser::FstringContext>();
}

FandangoParser::FstringContext* FandangoParser::StringsContext::fstring(size_t i) {
  return getRuleContext<FandangoParser::FstringContext>(i);
}

std::vector<FandangoParser::StringContext *> FandangoParser::StringsContext::string() {
  return getRuleContexts<FandangoParser::StringContext>();
}

FandangoParser::StringContext* FandangoParser::StringsContext::string(size_t i) {
  return getRuleContext<FandangoParser::StringContext>(i);
}


size_t FandangoParser::StringsContext::getRuleIndex() const {
  return FandangoParser::RuleStrings;
}


std::any FandangoParser::StringsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStrings(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::StringsContext* FandangoParser::strings() {
  StringsContext *_localctx = _tracker.createInstance<StringsContext>(_ctx, getState());
  enterRule(_localctx, 408, FandangoParser::RuleStrings);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2930); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2930);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case FandangoParser::FSTRING_START_QUOTE:
                case FandangoParser::FSTRING_START_SINGLE_QUOTE:
                case FandangoParser::FSTRING_START_TRIPLE_QUOTE:
                case FandangoParser::FSTRING_START_TRIPLE_SINGLE_QUOTE: {
                  setState(2928);
                  fstring();
                  break;
                }

                case FandangoParser::STRING: {
                  setState(2929);
                  string();
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2932); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 354, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListContext ------------------------------------------------------------------

FandangoParser::ListContext::ListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::ListContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::ListContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::ListContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}


size_t FandangoParser::ListContext::getRuleIndex() const {
  return FandangoParser::RuleList;
}


std::any FandangoParser::ListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitList(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ListContext* FandangoParser::list() {
  ListContext *_localctx = _tracker.createInstance<ListContext>(_ctx, getState());
  enterRule(_localctx, 410, FandangoParser::RuleList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2934);
    match(FandangoParser::OPEN_BRACK);
    setState(2936);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 93071897) != 0)) {
      setState(2935);
      star_named_expressions();
    }
    setState(2938);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TupleContext ------------------------------------------------------------------

FandangoParser::TupleContext::TupleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::TupleContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::TupleContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Star_named_expressionContext* FandangoParser::TupleContext::star_named_expression() {
  return getRuleContext<FandangoParser::Star_named_expressionContext>(0);
}

tree::TerminalNode* FandangoParser::TupleContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::TupleContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}


size_t FandangoParser::TupleContext::getRuleIndex() const {
  return FandangoParser::RuleTuple;
}


std::any FandangoParser::TupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTuple(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::TupleContext* FandangoParser::tuple() {
  TupleContext *_localctx = _tracker.createInstance<TupleContext>(_ctx, getState());
  enterRule(_localctx, 412, FandangoParser::RuleTuple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2940);
    match(FandangoParser::OPEN_PAREN);
    setState(2945);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 93071897) != 0)) {
      setState(2941);
      star_named_expression();
      setState(2942);
      match(FandangoParser::COMMA);

      setState(2943);
      star_named_expressions();
    }
    setState(2947);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetContext ------------------------------------------------------------------

FandangoParser::SetContext::SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::SetContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::Star_named_expressionsContext* FandangoParser::SetContext::star_named_expressions() {
  return getRuleContext<FandangoParser::Star_named_expressionsContext>(0);
}

tree::TerminalNode* FandangoParser::SetContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::SetContext::getRuleIndex() const {
  return FandangoParser::RuleSet;
}


std::any FandangoParser::SetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSet(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SetContext* FandangoParser::set() {
  SetContext *_localctx = _tracker.createInstance<SetContext>(_ctx, getState());
  enterRule(_localctx, 414, FandangoParser::RuleSet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2949);
    match(FandangoParser::OPEN_BRACE);
    setState(2950);
    star_named_expressions();
    setState(2951);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DictContext ------------------------------------------------------------------

FandangoParser::DictContext::DictContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::DictContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

tree::TerminalNode* FandangoParser::DictContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}

FandangoParser::Double_starred_kvpairsContext* FandangoParser::DictContext::double_starred_kvpairs() {
  return getRuleContext<FandangoParser::Double_starred_kvpairsContext>(0);
}


size_t FandangoParser::DictContext::getRuleIndex() const {
  return FandangoParser::RuleDict;
}


std::any FandangoParser::DictContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDict(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DictContext* FandangoParser::dict() {
  DictContext *_localctx = _tracker.createInstance<DictContext>(_ctx, getState());
  enterRule(_localctx, 416, FandangoParser::RuleDict);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2953);
    match(FandangoParser::OPEN_BRACE);
    setState(2955);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 74)) & 93071897) != 0)) {
      setState(2954);
      double_starred_kvpairs();
    }
    setState(2957);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Double_starred_kvpairsContext ------------------------------------------------------------------

FandangoParser::Double_starred_kvpairsContext::Double_starred_kvpairsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Double_starred_kvpairContext *> FandangoParser::Double_starred_kvpairsContext::double_starred_kvpair() {
  return getRuleContexts<FandangoParser::Double_starred_kvpairContext>();
}

FandangoParser::Double_starred_kvpairContext* FandangoParser::Double_starred_kvpairsContext::double_starred_kvpair(size_t i) {
  return getRuleContext<FandangoParser::Double_starred_kvpairContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Double_starred_kvpairsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Double_starred_kvpairsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Double_starred_kvpairsContext::getRuleIndex() const {
  return FandangoParser::RuleDouble_starred_kvpairs;
}


std::any FandangoParser::Double_starred_kvpairsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDouble_starred_kvpairs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Double_starred_kvpairsContext* FandangoParser::double_starred_kvpairs() {
  Double_starred_kvpairsContext *_localctx = _tracker.createInstance<Double_starred_kvpairsContext>(_ctx, getState());
  enterRule(_localctx, 418, FandangoParser::RuleDouble_starred_kvpairs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2959);
    double_starred_kvpair();
    setState(2964);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 358, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2960);
        match(FandangoParser::COMMA);
        setState(2961);
        double_starred_kvpair(); 
      }
      setState(2966);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 358, _ctx);
    }
    setState(2968);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(2967);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Double_starred_kvpairContext ------------------------------------------------------------------

FandangoParser::Double_starred_kvpairContext::Double_starred_kvpairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Double_starred_kvpairContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}

FandangoParser::Bitwise_orContext* FandangoParser::Double_starred_kvpairContext::bitwise_or() {
  return getRuleContext<FandangoParser::Bitwise_orContext>(0);
}

FandangoParser::KvpairContext* FandangoParser::Double_starred_kvpairContext::kvpair() {
  return getRuleContext<FandangoParser::KvpairContext>(0);
}


size_t FandangoParser::Double_starred_kvpairContext::getRuleIndex() const {
  return FandangoParser::RuleDouble_starred_kvpair;
}


std::any FandangoParser::Double_starred_kvpairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDouble_starred_kvpair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Double_starred_kvpairContext* FandangoParser::double_starred_kvpair() {
  Double_starred_kvpairContext *_localctx = _tracker.createInstance<Double_starred_kvpairContext>(_ctx, getState());
  enterRule(_localctx, 420, FandangoParser::RuleDouble_starred_kvpair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2973);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 360, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2970);
      match(FandangoParser::POWER);
      setState(2971);
      bitwise_or(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2972);
      kvpair();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KvpairContext ------------------------------------------------------------------

FandangoParser::KvpairContext::KvpairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::KvpairContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::KvpairContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

tree::TerminalNode* FandangoParser::KvpairContext::COLON() {
  return getToken(FandangoParser::COLON, 0);
}


size_t FandangoParser::KvpairContext::getRuleIndex() const {
  return FandangoParser::RuleKvpair;
}


std::any FandangoParser::KvpairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKvpair(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KvpairContext* FandangoParser::kvpair() {
  KvpairContext *_localctx = _tracker.createInstance<KvpairContext>(_ctx, getState());
  enterRule(_localctx, 422, FandangoParser::RuleKvpair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2975);
    expression();
    setState(2976);
    match(FandangoParser::COLON);
    setState(2977);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_if_clausesContext ------------------------------------------------------------------

FandangoParser::For_if_clausesContext::For_if_clausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::For_if_clauseContext *> FandangoParser::For_if_clausesContext::for_if_clause() {
  return getRuleContexts<FandangoParser::For_if_clauseContext>();
}

FandangoParser::For_if_clauseContext* FandangoParser::For_if_clausesContext::for_if_clause(size_t i) {
  return getRuleContext<FandangoParser::For_if_clauseContext>(i);
}


size_t FandangoParser::For_if_clausesContext::getRuleIndex() const {
  return FandangoParser::RuleFor_if_clauses;
}


std::any FandangoParser::For_if_clausesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFor_if_clauses(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::For_if_clausesContext* FandangoParser::for_if_clauses() {
  For_if_clausesContext *_localctx = _tracker.createInstance<For_if_clausesContext>(_ctx, getState());
  enterRule(_localctx, 424, FandangoParser::RuleFor_if_clauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2980); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2979);
      for_if_clause();
      setState(2982); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FandangoParser::ASYNC

    || _la == FandangoParser::FOR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_if_clauseContext ------------------------------------------------------------------

FandangoParser::For_if_clauseContext::For_if_clauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::FOR() {
  return getToken(FandangoParser::FOR, 0);
}

FandangoParser::Star_targetsContext* FandangoParser::For_if_clauseContext::star_targets() {
  return getRuleContext<FandangoParser::Star_targetsContext>(0);
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::IN() {
  return getToken(FandangoParser::IN, 0);
}

std::vector<FandangoParser::DisjunctionContext *> FandangoParser::For_if_clauseContext::disjunction() {
  return getRuleContexts<FandangoParser::DisjunctionContext>();
}

FandangoParser::DisjunctionContext* FandangoParser::For_if_clauseContext::disjunction(size_t i) {
  return getRuleContext<FandangoParser::DisjunctionContext>(i);
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::ASYNC() {
  return getToken(FandangoParser::ASYNC, 0);
}

std::vector<tree::TerminalNode *> FandangoParser::For_if_clauseContext::IF() {
  return getTokens(FandangoParser::IF);
}

tree::TerminalNode* FandangoParser::For_if_clauseContext::IF(size_t i) {
  return getToken(FandangoParser::IF, i);
}


size_t FandangoParser::For_if_clauseContext::getRuleIndex() const {
  return FandangoParser::RuleFor_if_clause;
}


std::any FandangoParser::For_if_clauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFor_if_clause(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::For_if_clauseContext* FandangoParser::for_if_clause() {
  For_if_clauseContext *_localctx = _tracker.createInstance<For_if_clauseContext>(_ctx, getState());
  enterRule(_localctx, 426, FandangoParser::RuleFor_if_clause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2985);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::ASYNC) {
      setState(2984);
      match(FandangoParser::ASYNC);
    }
    setState(2987);
    match(FandangoParser::FOR);
    setState(2988);
    star_targets();
    setState(2989);
    match(FandangoParser::IN);
    setState(2990);
    disjunction();
    setState(2995);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FandangoParser::IF) {
      setState(2991);
      match(FandangoParser::IF);
      setState(2992);
      disjunction();
      setState(2997);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListcompContext ------------------------------------------------------------------

FandangoParser::ListcompContext::ListcompContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::ListcompContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::ListcompContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

FandangoParser::For_if_clausesContext* FandangoParser::ListcompContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::ListcompContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::ListcompContext::getRuleIndex() const {
  return FandangoParser::RuleListcomp;
}


std::any FandangoParser::ListcompContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitListcomp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ListcompContext* FandangoParser::listcomp() {
  ListcompContext *_localctx = _tracker.createInstance<ListcompContext>(_ctx, getState());
  enterRule(_localctx, 428, FandangoParser::RuleListcomp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2998);
    match(FandangoParser::OPEN_BRACK);
    setState(2999);
    named_expression();
    setState(3000);
    for_if_clauses();
    setState(3001);
    match(FandangoParser::CLOSE_BRACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetcompContext ------------------------------------------------------------------

FandangoParser::SetcompContext::SetcompContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::SetcompContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::Named_expressionContext* FandangoParser::SetcompContext::named_expression() {
  return getRuleContext<FandangoParser::Named_expressionContext>(0);
}

FandangoParser::For_if_clausesContext* FandangoParser::SetcompContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::SetcompContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::SetcompContext::getRuleIndex() const {
  return FandangoParser::RuleSetcomp;
}


std::any FandangoParser::SetcompContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSetcomp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::SetcompContext* FandangoParser::setcomp() {
  SetcompContext *_localctx = _tracker.createInstance<SetcompContext>(_ctx, getState());
  enterRule(_localctx, 430, FandangoParser::RuleSetcomp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3003);
    match(FandangoParser::OPEN_BRACE);
    setState(3004);
    named_expression();
    setState(3005);
    for_if_clauses();
    setState(3006);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenexpContext ------------------------------------------------------------------

FandangoParser::GenexpContext::GenexpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::GenexpContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::For_if_clausesContext* FandangoParser::GenexpContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::GenexpContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Assignment_expressionContext* FandangoParser::GenexpContext::assignment_expression() {
  return getRuleContext<FandangoParser::Assignment_expressionContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::GenexpContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::GenexpContext::getRuleIndex() const {
  return FandangoParser::RuleGenexp;
}


std::any FandangoParser::GenexpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitGenexp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::GenexpContext* FandangoParser::genexp() {
  GenexpContext *_localctx = _tracker.createInstance<GenexpContext>(_ctx, getState());
  enterRule(_localctx, 432, FandangoParser::RuleGenexp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3008);
    match(FandangoParser::OPEN_PAREN);
    setState(3011);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 364, _ctx)) {
    case 1: {
      setState(3009);
      assignment_expression();
      break;
    }

    case 2: {
      setState(3010);
      expression();
      break;
    }

    default:
      break;
    }
    setState(3013);
    for_if_clauses();
    setState(3014);
    match(FandangoParser::CLOSE_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DictcompContext ------------------------------------------------------------------

FandangoParser::DictcompContext::DictcompContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::DictcompContext::OPEN_BRACE() {
  return getToken(FandangoParser::OPEN_BRACE, 0);
}

FandangoParser::KvpairContext* FandangoParser::DictcompContext::kvpair() {
  return getRuleContext<FandangoParser::KvpairContext>(0);
}

FandangoParser::For_if_clausesContext* FandangoParser::DictcompContext::for_if_clauses() {
  return getRuleContext<FandangoParser::For_if_clausesContext>(0);
}

tree::TerminalNode* FandangoParser::DictcompContext::CLOSE_BRACE() {
  return getToken(FandangoParser::CLOSE_BRACE, 0);
}


size_t FandangoParser::DictcompContext::getRuleIndex() const {
  return FandangoParser::RuleDictcomp;
}


std::any FandangoParser::DictcompContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDictcomp(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::DictcompContext* FandangoParser::dictcomp() {
  DictcompContext *_localctx = _tracker.createInstance<DictcompContext>(_ctx, getState());
  enterRule(_localctx, 434, FandangoParser::RuleDictcomp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3016);
    match(FandangoParser::OPEN_BRACE);
    setState(3017);
    kvpair();
    setState(3018);
    for_if_clauses();
    setState(3019);
    match(FandangoParser::CLOSE_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgumentsContext ------------------------------------------------------------------

FandangoParser::ArgumentsContext::ArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::ArgsContext* FandangoParser::ArgumentsContext::args() {
  return getRuleContext<FandangoParser::ArgsContext>(0);
}

tree::TerminalNode* FandangoParser::ArgumentsContext::COMMA() {
  return getToken(FandangoParser::COMMA, 0);
}


size_t FandangoParser::ArgumentsContext::getRuleIndex() const {
  return FandangoParser::RuleArguments;
}


std::any FandangoParser::ArgumentsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitArguments(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ArgumentsContext* FandangoParser::arguments() {
  ArgumentsContext *_localctx = _tracker.createInstance<ArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 436, FandangoParser::RuleArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3021);
    args();
    setState(3023);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(3022);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgsContext ------------------------------------------------------------------

FandangoParser::ArgsContext::ArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ArgContext *> FandangoParser::ArgsContext::arg() {
  return getRuleContexts<FandangoParser::ArgContext>();
}

FandangoParser::ArgContext* FandangoParser::ArgsContext::arg(size_t i) {
  return getRuleContext<FandangoParser::ArgContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::ArgsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::ArgsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

FandangoParser::KwargsContext* FandangoParser::ArgsContext::kwargs() {
  return getRuleContext<FandangoParser::KwargsContext>(0);
}


size_t FandangoParser::ArgsContext::getRuleIndex() const {
  return FandangoParser::RuleArgs;
}


std::any FandangoParser::ArgsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitArgs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ArgsContext* FandangoParser::args() {
  ArgsContext *_localctx = _tracker.createInstance<ArgsContext>(_ctx, getState());
  enterRule(_localctx, 438, FandangoParser::RuleArgs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(3038);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3025);
      arg();
      setState(3030);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 366, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3026);
          match(FandangoParser::COMMA);
          setState(3027);
          arg(); 
        }
        setState(3032);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 366, _ctx);
      }
      setState(3035);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 367, _ctx)) {
      case 1: {
        setState(3033);
        match(FandangoParser::COMMA);
        setState(3034);
        kwargs();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3037);
      kwargs();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgContext ------------------------------------------------------------------

FandangoParser::ArgContext::ArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Star_selectionContext* FandangoParser::ArgContext::star_selection() {
  return getRuleContext<FandangoParser::Star_selectionContext>(0);
}

FandangoParser::Starred_expressionContext* FandangoParser::ArgContext::starred_expression() {
  return getRuleContext<FandangoParser::Starred_expressionContext>(0);
}

FandangoParser::Assignment_expressionContext* FandangoParser::ArgContext::assignment_expression() {
  return getRuleContext<FandangoParser::Assignment_expressionContext>(0);
}

FandangoParser::ExpressionContext* FandangoParser::ArgContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::ArgContext::getRuleIndex() const {
  return FandangoParser::RuleArg;
}


std::any FandangoParser::ArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitArg(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::ArgContext* FandangoParser::arg() {
  ArgContext *_localctx = _tracker.createInstance<ArgContext>(_ctx, getState());
  enterRule(_localctx, 440, FandangoParser::RuleArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3044);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 369, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3040);
      star_selection();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3041);
      starred_expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3042);
      assignment_expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3043);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KwargsContext ------------------------------------------------------------------

FandangoParser::KwargsContext::KwargsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Kwarg_or_starredContext *> FandangoParser::KwargsContext::kwarg_or_starred() {
  return getRuleContexts<FandangoParser::Kwarg_or_starredContext>();
}

FandangoParser::Kwarg_or_starredContext* FandangoParser::KwargsContext::kwarg_or_starred(size_t i) {
  return getRuleContext<FandangoParser::Kwarg_or_starredContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::KwargsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::KwargsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

std::vector<FandangoParser::Kwarg_or_double_starredContext *> FandangoParser::KwargsContext::kwarg_or_double_starred() {
  return getRuleContexts<FandangoParser::Kwarg_or_double_starredContext>();
}

FandangoParser::Kwarg_or_double_starredContext* FandangoParser::KwargsContext::kwarg_or_double_starred(size_t i) {
  return getRuleContext<FandangoParser::Kwarg_or_double_starredContext>(i);
}


size_t FandangoParser::KwargsContext::getRuleIndex() const {
  return FandangoParser::RuleKwargs;
}


std::any FandangoParser::KwargsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwargs(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::KwargsContext* FandangoParser::kwargs() {
  KwargsContext *_localctx = _tracker.createInstance<KwargsContext>(_ctx, getState());
  enterRule(_localctx, 442, FandangoParser::RuleKwargs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(3079);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 374, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3046);
      kwarg_or_starred();
      setState(3051);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3047);
          match(FandangoParser::COMMA);
          setState(3048);
          kwarg_or_starred(); 
        }
        setState(3053);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx);
      }
      setState(3054);
      match(FandangoParser::COMMA);
      setState(3055);
      kwarg_or_double_starred();
      setState(3060);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 371, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3056);
          match(FandangoParser::COMMA);
          setState(3057);
          kwarg_or_double_starred(); 
        }
        setState(3062);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 371, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3063);
      kwarg_or_starred();
      setState(3068);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 372, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3064);
          match(FandangoParser::COMMA);
          setState(3065);
          kwarg_or_starred(); 
        }
        setState(3070);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 372, _ctx);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3071);
      kwarg_or_double_starred();
      setState(3076);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 373, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3072);
          match(FandangoParser::COMMA);
          setState(3073);
          kwarg_or_double_starred(); 
        }
        setState(3078);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 373, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Starred_expressionContext ------------------------------------------------------------------

FandangoParser::Starred_expressionContext::Starred_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Starred_expressionContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Starred_expressionContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}


size_t FandangoParser::Starred_expressionContext::getRuleIndex() const {
  return FandangoParser::RuleStarred_expression;
}


std::any FandangoParser::Starred_expressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStarred_expression(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Starred_expressionContext* FandangoParser::starred_expression() {
  Starred_expressionContext *_localctx = _tracker.createInstance<Starred_expressionContext>(_ctx, getState());
  enterRule(_localctx, 444, FandangoParser::RuleStarred_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3081);
    match(FandangoParser::STAR);
    setState(3082);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kwarg_or_starredContext ------------------------------------------------------------------

FandangoParser::Kwarg_or_starredContext::Kwarg_or_starredContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Kwarg_or_starredContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Kwarg_or_starredContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Kwarg_or_starredContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

FandangoParser::Starred_expressionContext* FandangoParser::Kwarg_or_starredContext::starred_expression() {
  return getRuleContext<FandangoParser::Starred_expressionContext>(0);
}


size_t FandangoParser::Kwarg_or_starredContext::getRuleIndex() const {
  return FandangoParser::RuleKwarg_or_starred;
}


std::any FandangoParser::Kwarg_or_starredContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwarg_or_starred(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Kwarg_or_starredContext* FandangoParser::kwarg_or_starred() {
  Kwarg_or_starredContext *_localctx = _tracker.createInstance<Kwarg_or_starredContext>(_ctx, getState());
  enterRule(_localctx, 446, FandangoParser::RuleKwarg_or_starred);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3089);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(3084);
        identifier();
        setState(3085);
        match(FandangoParser::ASSIGN);
        setState(3086);
        expression();
        break;
      }

      case FandangoParser::STAR: {
        enterOuterAlt(_localctx, 2);
        setState(3088);
        starred_expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kwarg_or_double_starredContext ------------------------------------------------------------------

FandangoParser::Kwarg_or_double_starredContext::Kwarg_or_double_starredContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Kwarg_or_double_starredContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Kwarg_or_double_starredContext::ASSIGN() {
  return getToken(FandangoParser::ASSIGN, 0);
}

FandangoParser::ExpressionContext* FandangoParser::Kwarg_or_double_starredContext::expression() {
  return getRuleContext<FandangoParser::ExpressionContext>(0);
}

tree::TerminalNode* FandangoParser::Kwarg_or_double_starredContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}


size_t FandangoParser::Kwarg_or_double_starredContext::getRuleIndex() const {
  return FandangoParser::RuleKwarg_or_double_starred;
}


std::any FandangoParser::Kwarg_or_double_starredContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitKwarg_or_double_starred(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Kwarg_or_double_starredContext* FandangoParser::kwarg_or_double_starred() {
  Kwarg_or_double_starredContext *_localctx = _tracker.createInstance<Kwarg_or_double_starredContext>(_ctx, getState());
  enterRule(_localctx, 448, FandangoParser::RuleKwarg_or_double_starred);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3097);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(3091);
        identifier();
        setState(3092);
        match(FandangoParser::ASSIGN);
        setState(3093);
        expression();
        break;
      }

      case FandangoParser::POWER: {
        enterOuterAlt(_localctx, 2);
        setState(3095);
        match(FandangoParser::POWER);
        setState(3096);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targetsContext ------------------------------------------------------------------

FandangoParser::Star_targetsContext::Star_targetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_targetContext *> FandangoParser::Star_targetsContext::star_target() {
  return getRuleContexts<FandangoParser::Star_targetContext>();
}

FandangoParser::Star_targetContext* FandangoParser::Star_targetsContext::star_target(size_t i) {
  return getRuleContext<FandangoParser::Star_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_targetsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_targetsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_targetsContext::getRuleIndex() const {
  return FandangoParser::RuleStar_targets;
}


std::any FandangoParser::Star_targetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_targets(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targetsContext* FandangoParser::star_targets() {
  Star_targetsContext *_localctx = _tracker.createInstance<Star_targetsContext>(_ctx, getState());
  enterRule(_localctx, 450, FandangoParser::RuleStar_targets);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3099);
    star_target();
    setState(3104);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 377, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3100);
        match(FandangoParser::COMMA);
        setState(3101);
        star_target(); 
      }
      setState(3106);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 377, _ctx);
    }
    setState(3108);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(3107);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targets_list_seqContext ------------------------------------------------------------------

FandangoParser::Star_targets_list_seqContext::Star_targets_list_seqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_targetContext *> FandangoParser::Star_targets_list_seqContext::star_target() {
  return getRuleContexts<FandangoParser::Star_targetContext>();
}

FandangoParser::Star_targetContext* FandangoParser::Star_targets_list_seqContext::star_target(size_t i) {
  return getRuleContext<FandangoParser::Star_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_targets_list_seqContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_targets_list_seqContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_targets_list_seqContext::getRuleIndex() const {
  return FandangoParser::RuleStar_targets_list_seq;
}


std::any FandangoParser::Star_targets_list_seqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_targets_list_seq(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targets_list_seqContext* FandangoParser::star_targets_list_seq() {
  Star_targets_list_seqContext *_localctx = _tracker.createInstance<Star_targets_list_seqContext>(_ctx, getState());
  enterRule(_localctx, 452, FandangoParser::RuleStar_targets_list_seq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3110);
    star_target();
    setState(3115);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 379, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3111);
        match(FandangoParser::COMMA);
        setState(3112);
        star_target(); 
      }
      setState(3117);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 379, _ctx);
    }
    setState(3119);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(3118);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targets_tuple_seqContext ------------------------------------------------------------------

FandangoParser::Star_targets_tuple_seqContext::Star_targets_tuple_seqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Star_targetContext *> FandangoParser::Star_targets_tuple_seqContext::star_target() {
  return getRuleContexts<FandangoParser::Star_targetContext>();
}

FandangoParser::Star_targetContext* FandangoParser::Star_targets_tuple_seqContext::star_target(size_t i) {
  return getRuleContext<FandangoParser::Star_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Star_targets_tuple_seqContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Star_targets_tuple_seqContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Star_targets_tuple_seqContext::getRuleIndex() const {
  return FandangoParser::RuleStar_targets_tuple_seq;
}


std::any FandangoParser::Star_targets_tuple_seqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_targets_tuple_seq(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targets_tuple_seqContext* FandangoParser::star_targets_tuple_seq() {
  Star_targets_tuple_seqContext *_localctx = _tracker.createInstance<Star_targets_tuple_seqContext>(_ctx, getState());
  enterRule(_localctx, 454, FandangoParser::RuleStar_targets_tuple_seq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(3134);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 383, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3121);
      star_target();
      setState(3124); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(3122);
                match(FandangoParser::COMMA);
                setState(3123);
                star_target();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(3126); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 381, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(3129);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FandangoParser::COMMA) {
        setState(3128);
        match(FandangoParser::COMMA);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3131);
      star_target();
      setState(3132);
      match(FandangoParser::COMMA);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_targetContext ------------------------------------------------------------------

FandangoParser::Star_targetContext::Star_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Star_targetContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

FandangoParser::Star_targetContext* FandangoParser::Star_targetContext::star_target() {
  return getRuleContext<FandangoParser::Star_targetContext>(0);
}

FandangoParser::Target_with_star_atomContext* FandangoParser::Star_targetContext::target_with_star_atom() {
  return getRuleContext<FandangoParser::Target_with_star_atomContext>(0);
}


size_t FandangoParser::Star_targetContext::getRuleIndex() const {
  return FandangoParser::RuleStar_target;
}


std::any FandangoParser::Star_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_targetContext* FandangoParser::star_target() {
  Star_targetContext *_localctx = _tracker.createInstance<Star_targetContext>(_ctx, getState());
  enterRule(_localctx, 456, FandangoParser::RuleStar_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3139);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3136);
      match(FandangoParser::STAR);
      setState(3137);
      star_target();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3138);
      target_with_star_atom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Target_with_star_atomContext ------------------------------------------------------------------

FandangoParser::Target_with_star_atomContext::Target_with_star_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::T_primaryContext* FandangoParser::Target_with_star_atomContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::Target_with_star_atomContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Target_with_star_atomContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Target_with_star_atomContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Target_with_star_atomContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Target_with_star_atomContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Star_atomContext* FandangoParser::Target_with_star_atomContext::star_atom() {
  return getRuleContext<FandangoParser::Star_atomContext>(0);
}


size_t FandangoParser::Target_with_star_atomContext::getRuleIndex() const {
  return FandangoParser::RuleTarget_with_star_atom;
}


std::any FandangoParser::Target_with_star_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitTarget_with_star_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Target_with_star_atomContext* FandangoParser::target_with_star_atom() {
  Target_with_star_atomContext *_localctx = _tracker.createInstance<Target_with_star_atomContext>(_ctx, getState());
  enterRule(_localctx, 458, FandangoParser::RuleTarget_with_star_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3151);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 385, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3141);
      t_primary(0);
      setState(3142);
      match(FandangoParser::DOT);
      setState(3143);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3145);
      t_primary(0);
      setState(3146);
      match(FandangoParser::OPEN_BRACK);
      setState(3147);
      slices();
      setState(3148);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3150);
      star_atom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Star_atomContext ------------------------------------------------------------------

FandangoParser::Star_atomContext::Star_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Star_atomContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Target_with_star_atomContext* FandangoParser::Star_atomContext::target_with_star_atom() {
  return getRuleContext<FandangoParser::Target_with_star_atomContext>(0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Star_targets_tuple_seqContext* FandangoParser::Star_atomContext::star_targets_tuple_seq() {
  return getRuleContext<FandangoParser::Star_targets_tuple_seqContext>(0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Star_atomContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Star_targets_list_seqContext* FandangoParser::Star_atomContext::star_targets_list_seq() {
  return getRuleContext<FandangoParser::Star_targets_list_seqContext>(0);
}


size_t FandangoParser::Star_atomContext::getRuleIndex() const {
  return FandangoParser::RuleStar_atom;
}


std::any FandangoParser::Star_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitStar_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Star_atomContext* FandangoParser::star_atom() {
  Star_atomContext *_localctx = _tracker.createInstance<Star_atomContext>(_ctx, getState());
  enterRule(_localctx, 460, FandangoParser::RuleStar_atom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3168);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 388, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3153);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3154);
      match(FandangoParser::OPEN_PAREN);
      setState(3155);
      target_with_star_atom();
      setState(3156);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3158);
      match(FandangoParser::OPEN_PAREN);
      setState(3160);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540449684976566776) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 83896857) != 0)) {
        setState(3159);
        star_targets_tuple_seq();
      }
      setState(3162);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3163);
      match(FandangoParser::OPEN_BRACK);
      setState(3165);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 540449684976566776) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 74)) & 83896857) != 0)) {
        setState(3164);
        star_targets_list_seq();
      }
      setState(3167);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Single_targetContext ------------------------------------------------------------------

FandangoParser::Single_targetContext::Single_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::Single_subscript_attribute_targetContext* FandangoParser::Single_targetContext::single_subscript_attribute_target() {
  return getRuleContext<FandangoParser::Single_subscript_attribute_targetContext>(0);
}

FandangoParser::IdentifierContext* FandangoParser::Single_targetContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Single_targetContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

FandangoParser::Single_targetContext* FandangoParser::Single_targetContext::single_target() {
  return getRuleContext<FandangoParser::Single_targetContext>(0);
}

tree::TerminalNode* FandangoParser::Single_targetContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}


size_t FandangoParser::Single_targetContext::getRuleIndex() const {
  return FandangoParser::RuleSingle_target;
}


std::any FandangoParser::Single_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSingle_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Single_targetContext* FandangoParser::single_target() {
  Single_targetContext *_localctx = _tracker.createInstance<Single_targetContext>(_ctx, getState());
  enterRule(_localctx, 462, FandangoParser::RuleSingle_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3176);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 389, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3170);
      single_subscript_attribute_target();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3171);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3172);
      match(FandangoParser::OPEN_PAREN);
      setState(3173);
      single_target();
      setState(3174);
      match(FandangoParser::CLOSE_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Single_subscript_attribute_targetContext ------------------------------------------------------------------

FandangoParser::Single_subscript_attribute_targetContext::Single_subscript_attribute_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::T_primaryContext* FandangoParser::Single_subscript_attribute_targetContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::Single_subscript_attribute_targetContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Single_subscript_attribute_targetContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Single_subscript_attribute_targetContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Single_subscript_attribute_targetContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Single_subscript_attribute_targetContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::Single_subscript_attribute_targetContext::getRuleIndex() const {
  return FandangoParser::RuleSingle_subscript_attribute_target;
}


std::any FandangoParser::Single_subscript_attribute_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitSingle_subscript_attribute_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Single_subscript_attribute_targetContext* FandangoParser::single_subscript_attribute_target() {
  Single_subscript_attribute_targetContext *_localctx = _tracker.createInstance<Single_subscript_attribute_targetContext>(_ctx, getState());
  enterRule(_localctx, 464, FandangoParser::RuleSingle_subscript_attribute_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3187);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 390, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3178);
      t_primary(0);
      setState(3179);
      match(FandangoParser::DOT);
      setState(3180);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3182);
      t_primary(0);
      setState(3183);
      match(FandangoParser::OPEN_BRACK);
      setState(3184);
      slices();
      setState(3185);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- T_primaryContext ------------------------------------------------------------------

FandangoParser::T_primaryContext::T_primaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::AtomContext* FandangoParser::T_primaryContext::atom() {
  return getRuleContext<FandangoParser::AtomContext>(0);
}

FandangoParser::T_primaryContext* FandangoParser::T_primaryContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

FandangoParser::IdentifierContext* FandangoParser::T_primaryContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::T_primaryContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::GenexpContext* FandangoParser::T_primaryContext::genexp() {
  return getRuleContext<FandangoParser::GenexpContext>(0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::T_primaryContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::ArgumentsContext* FandangoParser::T_primaryContext::arguments() {
  return getRuleContext<FandangoParser::ArgumentsContext>(0);
}


size_t FandangoParser::T_primaryContext::getRuleIndex() const {
  return FandangoParser::RuleT_primary;
}


std::any FandangoParser::T_primaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitT_primary(this);
  else
    return visitor->visitChildren(this);
}


FandangoParser::T_primaryContext* FandangoParser::t_primary() {
   return t_primary(0);
}

FandangoParser::T_primaryContext* FandangoParser::t_primary(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  FandangoParser::T_primaryContext *_localctx = _tracker.createInstance<T_primaryContext>(_ctx, parentState);
  FandangoParser::T_primaryContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 466;
  enterRecursionRule(_localctx, 466, FandangoParser::RuleT_primary, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3190);
    atom();
    _ctx->stop = _input->LT(-1);
    setState(3210);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 393, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3208);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 392, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(3192);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(3193);
          match(FandangoParser::DOT);
          setState(3194);
          identifier();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(3195);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(3196);
          match(FandangoParser::OPEN_BRACK);
          setState(3197);
          slices();
          setState(3198);
          match(FandangoParser::CLOSE_BRACK);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(3200);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(3201);
          genexp();
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<T_primaryContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleT_primary);
          setState(3202);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(3203);
          match(FandangoParser::OPEN_PAREN);
          setState(3205);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 540450269092184568) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 74)) & 93071897) != 0)) {
            setState(3204);
            arguments();
          }
          setState(3207);
          match(FandangoParser::CLOSE_PAREN);
          break;
        }

        default:
          break;
        } 
      }
      setState(3212);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 393, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Del_targetsContext ------------------------------------------------------------------

FandangoParser::Del_targetsContext::Del_targetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::Del_targetContext *> FandangoParser::Del_targetsContext::del_target() {
  return getRuleContexts<FandangoParser::Del_targetContext>();
}

FandangoParser::Del_targetContext* FandangoParser::Del_targetsContext::del_target(size_t i) {
  return getRuleContext<FandangoParser::Del_targetContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Del_targetsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Del_targetsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}


size_t FandangoParser::Del_targetsContext::getRuleIndex() const {
  return FandangoParser::RuleDel_targets;
}


std::any FandangoParser::Del_targetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_targets(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_targetsContext* FandangoParser::del_targets() {
  Del_targetsContext *_localctx = _tracker.createInstance<Del_targetsContext>(_ctx, getState());
  enterRule(_localctx, 468, FandangoParser::RuleDel_targets);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3213);
    del_target();
    setState(3218);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 394, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3214);
        match(FandangoParser::COMMA);
        setState(3215);
        del_target(); 
      }
      setState(3220);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 394, _ctx);
    }
    setState(3222);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FandangoParser::COMMA) {
      setState(3221);
      match(FandangoParser::COMMA);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Del_targetContext ------------------------------------------------------------------

FandangoParser::Del_targetContext::Del_targetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::T_primaryContext* FandangoParser::Del_targetContext::t_primary() {
  return getRuleContext<FandangoParser::T_primaryContext>(0);
}

tree::TerminalNode* FandangoParser::Del_targetContext::DOT() {
  return getToken(FandangoParser::DOT, 0);
}

FandangoParser::IdentifierContext* FandangoParser::Del_targetContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Del_targetContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

FandangoParser::SlicesContext* FandangoParser::Del_targetContext::slices() {
  return getRuleContext<FandangoParser::SlicesContext>(0);
}

tree::TerminalNode* FandangoParser::Del_targetContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}

FandangoParser::Del_t_atomContext* FandangoParser::Del_targetContext::del_t_atom() {
  return getRuleContext<FandangoParser::Del_t_atomContext>(0);
}


size_t FandangoParser::Del_targetContext::getRuleIndex() const {
  return FandangoParser::RuleDel_target;
}


std::any FandangoParser::Del_targetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_target(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_targetContext* FandangoParser::del_target() {
  Del_targetContext *_localctx = _tracker.createInstance<Del_targetContext>(_ctx, getState());
  enterRule(_localctx, 470, FandangoParser::RuleDel_target);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3234);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 396, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3224);
      t_primary(0);
      setState(3225);
      match(FandangoParser::DOT);
      setState(3226);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3228);
      t_primary(0);
      setState(3229);
      match(FandangoParser::OPEN_BRACK);
      setState(3230);
      slices();
      setState(3231);
      match(FandangoParser::CLOSE_BRACK);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3233);
      del_t_atom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Del_t_atomContext ------------------------------------------------------------------

FandangoParser::Del_t_atomContext::Del_t_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FandangoParser::IdentifierContext* FandangoParser::Del_t_atomContext::identifier() {
  return getRuleContext<FandangoParser::IdentifierContext>(0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::OPEN_PAREN() {
  return getToken(FandangoParser::OPEN_PAREN, 0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::CLOSE_PAREN() {
  return getToken(FandangoParser::CLOSE_PAREN, 0);
}

FandangoParser::Del_targetsContext* FandangoParser::Del_t_atomContext::del_targets() {
  return getRuleContext<FandangoParser::Del_targetsContext>(0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::OPEN_BRACK() {
  return getToken(FandangoParser::OPEN_BRACK, 0);
}

tree::TerminalNode* FandangoParser::Del_t_atomContext::CLOSE_BRACK() {
  return getToken(FandangoParser::CLOSE_BRACK, 0);
}


size_t FandangoParser::Del_t_atomContext::getRuleIndex() const {
  return FandangoParser::RuleDel_t_atom;
}


std::any FandangoParser::Del_t_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitDel_t_atom(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Del_t_atomContext* FandangoParser::del_t_atom() {
  Del_t_atomContext *_localctx = _tracker.createInstance<Del_t_atomContext>(_ctx, getState());
  enterRule(_localctx, 472, FandangoParser::RuleDel_t_atom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3247);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FandangoParser::ANY:
      case FandangoParser::ALL:
      case FandangoParser::LEN:
      case FandangoParser::NAME: {
        enterOuterAlt(_localctx, 1);
        setState(3236);
        identifier();
        break;
      }

      case FandangoParser::OPEN_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(3237);
        match(FandangoParser::OPEN_PAREN);
        setState(3239);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 540449684976566776) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 74)) & 83896857) != 0)) {
          setState(3238);
          del_targets();
        }
        setState(3241);
        match(FandangoParser::CLOSE_PAREN);
        break;
      }

      case FandangoParser::OPEN_BRACK: {
        enterOuterAlt(_localctx, 3);
        setState(3242);
        match(FandangoParser::OPEN_BRACK);
        setState(3244);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 540449684976566776) != 0) || ((((_la - 74) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 74)) & 83896857) != 0)) {
          setState(3243);
          del_targets();
        }
        setState(3246);
        match(FandangoParser::CLOSE_BRACK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_expressionsContext ------------------------------------------------------------------

FandangoParser::Type_expressionsContext::Type_expressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FandangoParser::ExpressionContext *> FandangoParser::Type_expressionsContext::expression() {
  return getRuleContexts<FandangoParser::ExpressionContext>();
}

FandangoParser::ExpressionContext* FandangoParser::Type_expressionsContext::expression(size_t i) {
  return getRuleContext<FandangoParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FandangoParser::Type_expressionsContext::COMMA() {
  return getTokens(FandangoParser::COMMA);
}

tree::TerminalNode* FandangoParser::Type_expressionsContext::COMMA(size_t i) {
  return getToken(FandangoParser::COMMA, i);
}

tree::TerminalNode* FandangoParser::Type_expressionsContext::STAR() {
  return getToken(FandangoParser::STAR, 0);
}

tree::TerminalNode* FandangoParser::Type_expressionsContext::POWER() {
  return getToken(FandangoParser::POWER, 0);
}


size_t FandangoParser::Type_expressionsContext::getRuleIndex() const {
  return FandangoParser::RuleType_expressions;
}


std::any FandangoParser::Type_expressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitType_expressions(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Type_expressionsContext* FandangoParser::type_expressions() {
  Type_expressionsContext *_localctx = _tracker.createInstance<Type_expressionsContext>(_ctx, getState());
  enterRule(_localctx, 474, FandangoParser::RuleType_expressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(3306);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 404, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3249);
      expression();
      setState(3254);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 400, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3250);
          match(FandangoParser::COMMA);
          setState(3251);
          expression(); 
        }
        setState(3256);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 400, _ctx);
      }
      setState(3257);
      match(FandangoParser::COMMA);
      setState(3258);
      match(FandangoParser::STAR);
      setState(3259);
      expression();
      setState(3260);
      match(FandangoParser::COMMA);
      setState(3261);
      match(FandangoParser::POWER);
      setState(3262);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3264);
      expression();
      setState(3269);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 401, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3265);
          match(FandangoParser::COMMA);
          setState(3266);
          expression(); 
        }
        setState(3271);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 401, _ctx);
      }
      setState(3272);
      match(FandangoParser::COMMA);
      setState(3273);
      match(FandangoParser::STAR);
      setState(3274);
      expression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3276);
      expression();
      setState(3281);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 402, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(3277);
          match(FandangoParser::COMMA);
          setState(3278);
          expression(); 
        }
        setState(3283);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 402, _ctx);
      }
      setState(3284);
      match(FandangoParser::COMMA);
      setState(3285);
      match(FandangoParser::POWER);
      setState(3286);
      expression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3288);
      match(FandangoParser::STAR);
      setState(3289);
      expression();
      setState(3290);
      match(FandangoParser::COMMA);
      setState(3291);
      match(FandangoParser::POWER);
      setState(3292);
      expression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3294);
      match(FandangoParser::STAR);
      setState(3295);
      expression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3296);
      match(FandangoParser::POWER);
      setState(3297);
      expression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(3298);
      expression();
      setState(3303);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FandangoParser::COMMA) {
        setState(3299);
        match(FandangoParser::COMMA);
        setState(3300);
        expression();
        setState(3305);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_type_commentContext ------------------------------------------------------------------

FandangoParser::Func_type_commentContext::Func_type_commentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::Func_type_commentContext::NEWLINE() {
  return getToken(FandangoParser::NEWLINE, 0);
}


size_t FandangoParser::Func_type_commentContext::getRuleIndex() const {
  return FandangoParser::RuleFunc_type_comment;
}


std::any FandangoParser::Func_type_commentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitFunc_type_comment(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::Func_type_commentContext* FandangoParser::func_type_comment() {
  Func_type_commentContext *_localctx = _tracker.createInstance<Func_type_commentContext>(_ctx, getState());
  enterRule(_localctx, 476, FandangoParser::RuleFunc_type_comment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3308);
    match(FandangoParser::NEWLINE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

FandangoParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FandangoParser::IdentifierContext::NAME() {
  return getToken(FandangoParser::NAME, 0);
}

tree::TerminalNode* FandangoParser::IdentifierContext::ANY() {
  return getToken(FandangoParser::ANY, 0);
}

tree::TerminalNode* FandangoParser::IdentifierContext::ALL() {
  return getToken(FandangoParser::ALL, 0);
}

tree::TerminalNode* FandangoParser::IdentifierContext::LEN() {
  return getToken(FandangoParser::LEN, 0);
}


size_t FandangoParser::IdentifierContext::getRuleIndex() const {
  return FandangoParser::RuleIdentifier;
}


std::any FandangoParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<FandangoParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

FandangoParser::IdentifierContext* FandangoParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 478, FandangoParser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3310);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540431955284459520) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool FandangoParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 14: return generator_callSempred(antlrcpp::downCast<Generator_callContext *>(context), predicateIndex);
    case 28: return dot_selectionSempred(antlrcpp::downCast<Dot_selectionContext *>(context), predicateIndex);
    case 65: return dotted_nameSempred(antlrcpp::downCast<Dotted_nameContext *>(context), predicateIndex);
    case 119: return name_or_attrSempred(antlrcpp::downCast<Name_or_attrContext *>(context), predicateIndex);
    case 163: return bitwise_orSempred(antlrcpp::downCast<Bitwise_orContext *>(context), predicateIndex);
    case 164: return bitwise_xorSempred(antlrcpp::downCast<Bitwise_xorContext *>(context), predicateIndex);
    case 165: return bitwise_andSempred(antlrcpp::downCast<Bitwise_andContext *>(context), predicateIndex);
    case 166: return shift_exprSempred(antlrcpp::downCast<Shift_exprContext *>(context), predicateIndex);
    case 167: return sumSempred(antlrcpp::downCast<SumContext *>(context), predicateIndex);
    case 168: return termSempred(antlrcpp::downCast<TermContext *>(context), predicateIndex);
    case 172: return primarySempred(antlrcpp::downCast<PrimaryContext *>(context), predicateIndex);
    case 233: return t_primarySempred(antlrcpp::downCast<T_primaryContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool FandangoParser::generator_callSempred(Generator_callContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 4);
    case 1: return precpred(_ctx, 3);
    case 2: return precpred(_ctx, 2);
    case 3: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool FandangoParser::dot_selectionSempred(Dot_selectionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 4: return precpred(_ctx, 2);
    case 5: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool FandangoParser::dotted_nameSempred(Dotted_nameContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::name_or_attrSempred(Name_or_attrContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 7: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::bitwise_orSempred(Bitwise_orContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::bitwise_xorSempred(Bitwise_xorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::bitwise_andSempred(Bitwise_andContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::shift_exprSempred(Shift_exprContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 3);
    case 12: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::sumSempred(SumContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 13: return precpred(_ctx, 3);
    case 14: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::termSempred(TermContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 15: return precpred(_ctx, 6);
    case 16: return precpred(_ctx, 5);
    case 17: return precpred(_ctx, 4);
    case 18: return precpred(_ctx, 3);
    case 19: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::primarySempred(PrimaryContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 20: return precpred(_ctx, 5);
    case 21: return precpred(_ctx, 4);
    case 22: return precpred(_ctx, 3);
    case 23: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool FandangoParser::t_primarySempred(T_primaryContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 24: return precpred(_ctx, 5);
    case 25: return precpred(_ctx, 4);
    case 26: return precpred(_ctx, 3);
    case 27: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

void FandangoParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  fandangoparserParserInitialize();
#else
  ::antlr4::internal::call_once(fandangoparserParserOnceFlag, fandangoparserParserInitialize);
#endif
}
